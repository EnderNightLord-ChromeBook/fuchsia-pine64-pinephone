// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/posix/socket/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace posix {
namespace socket {

namespace {

[[maybe_unused]]
constexpr uint64_t kProvider_Socket_GenOrdinal = 0x4d07378200000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ProviderSocketRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ProviderSocketResponseTable;

}  // namespace
template <>
Provider::ResultOf::Socket_Impl<Provider::SocketResponse>::Socket_Impl(zx::unowned_channel _client_end, int16_t domain, int16_t type, int16_t protocol) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SocketRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SocketRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SocketRequest*>(_write_bytes);
  _request.domain = std::move(domain);
  _request.type = std::move(type);
  _request.protocol = std::move(protocol);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SocketRequest));
  ::fidl::DecodedMessage<SocketRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Provider::InPlace::Socket(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Provider::ResultOf::Socket Provider::SyncClient::Socket(int16_t domain, int16_t type, int16_t protocol) {
  return ResultOf::Socket(zx::unowned_channel(this->channel_), std::move(domain), std::move(type), std::move(protocol));
}

Provider::ResultOf::Socket Provider::Call::Socket(zx::unowned_channel _client_end, int16_t domain, int16_t type, int16_t protocol) {
  return ResultOf::Socket(std::move(_client_end), std::move(domain), std::move(type), std::move(protocol));
}

template <>
Provider::UnownedResultOf::Socket_Impl<Provider::SocketResponse>::Socket_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t domain, int16_t type, int16_t protocol, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SocketRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SocketResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, SocketRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SocketRequest*>(_request_buffer.data());
  _request.domain = std::move(domain);
  _request.type = std::move(type);
  _request.protocol = std::move(protocol);
  _request_buffer.set_actual(sizeof(SocketRequest));
  ::fidl::DecodedMessage<SocketRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Provider::InPlace::Socket(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Provider::UnownedResultOf::Socket Provider::SyncClient::Socket(::fidl::BytePart _request_buffer, int16_t domain, int16_t type, int16_t protocol, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Socket(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(domain), std::move(type), std::move(protocol), std::move(_response_buffer));
}

Provider::UnownedResultOf::Socket Provider::Call::Socket(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t domain, int16_t type, int16_t protocol, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Socket(std::move(_client_end), std::move(_request_buffer), std::move(domain), std::move(type), std::move(protocol), std::move(_response_buffer));
}

zx_status_t Provider::SyncClient::Socket_Deprecated(int16_t domain, int16_t type, int16_t protocol, int16_t* out_code, ::zx::channel* out_s) {
  return Provider::Call::Socket_Deprecated(zx::unowned_channel(this->channel_), std::move(domain), std::move(type), std::move(protocol), out_code, out_s);
}

zx_status_t Provider::Call::Socket_Deprecated(zx::unowned_channel _client_end, int16_t domain, int16_t type, int16_t protocol, int16_t* out_code, ::zx::channel* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SocketRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SocketRequest*>(_write_bytes);
  _request._hdr.ordinal = kProvider_Socket_GenOrdinal;
  _request.domain = std::move(domain);
  _request.type = std::move(type);
  _request.protocol = std::move(protocol);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SocketRequest));
  ::fidl::DecodedMessage<SocketRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SocketResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SocketRequest, SocketResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Provider::SocketResponse> Provider::SyncClient::Socket_Deprecated(::fidl::BytePart _request_buffer, int16_t domain, int16_t type, int16_t protocol, ::fidl::BytePart _response_buffer, int16_t* out_code, ::zx::channel* out_s) {
  return Provider::Call::Socket_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(domain), std::move(type), std::move(protocol), std::move(_response_buffer), out_code, out_s);
}

::fidl::DecodeResult<Provider::SocketResponse> Provider::Call::Socket_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t domain, int16_t type, int16_t protocol, ::fidl::BytePart _response_buffer, int16_t* out_code, ::zx::channel* out_s) {
  if (_request_buffer.capacity() < SocketRequest::PrimarySize) {
    return ::fidl::DecodeResult<SocketResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<SocketRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kProvider_Socket_GenOrdinal;
  _request.domain = std::move(domain);
  _request.type = std::move(type);
  _request.protocol = std::move(protocol);
  _request_buffer.set_actual(sizeof(SocketRequest));
  ::fidl::DecodedMessage<SocketRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SocketResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SocketRequest, SocketResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SocketResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Provider::SocketResponse> Provider::InPlace::Socket(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SocketRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kProvider_Socket_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Provider::SocketResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SocketRequest, SocketResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Provider::SocketResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Provider::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kProvider_Socket_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SocketRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Socket(std::move(message->domain), std::move(message->type), std::move(message->protocol),
        Interface::SocketCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Provider::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Provider::Interface::SocketCompleterBase::Reply(int16_t code, ::zx::channel s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SocketResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SocketResponse*>(_write_bytes);
  _response._hdr.ordinal = kProvider_Socket_GenOrdinal;
  _response.code = std::move(code);
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SocketResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SocketResponse>(std::move(_response_bytes)));
}

void Provider::Interface::SocketCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::zx::channel s) {
  if (_buffer.capacity() < SocketResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SocketResponse*>(_buffer.data());
  _response._hdr.ordinal = kProvider_Socket_GenOrdinal;
  _response.code = std::move(code);
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(SocketResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SocketResponse>(std::move(_buffer)));
}

void Provider::Interface::SocketCompleterBase::Reply(::fidl::DecodedMessage<SocketResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kProvider_Socket_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint64_t kControl_Clone_GenOrdinal = 0x17fe6a4c00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlCloneRequestTable;
[[maybe_unused]]
constexpr uint64_t kControl_Close_GenOrdinal = 0x52b9568700000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlCloseResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Describe_GenOrdinal = 0x1f62df5e00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlDescribeResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_OnOpen_GenOrdinal = 0x4700a7bd00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlOnOpenEventTable;
[[maybe_unused]]
constexpr uint64_t kControl_Sync_GenOrdinal = 0x62423faa00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlSyncResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_GetAttr_GenOrdinal = 0x4585e7c800000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlGetAttrResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_SetAttr_GenOrdinal = 0xbd5559a00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlSetAttrRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlSetAttrResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Ioctl_GenOrdinal = 0x35f3aca700000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlIoctlRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlIoctlResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Bind_GenOrdinal = 0x147441ed00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlBindRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlBindResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Connect_GenOrdinal = 0x237ed33800000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlConnectRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlConnectResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Listen_GenOrdinal = 0x2e63628600000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlListenRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlListenResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_Accept_GenOrdinal = 0x11ed297300000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlAcceptRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlAcceptResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_GetSockName_GenOrdinal = 0x63c1368200000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlGetSockNameResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_GetPeerName_GenOrdinal = 0x58787bb600000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlGetPeerNameResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_SetSockOpt_GenOrdinal = 0x4ba217a700000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlSetSockOptRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlSetSockOptResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_GetSockOpt_GenOrdinal = 0x3685367800000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlGetSockOptRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlGetSockOptResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_IoctlPOSIX_GenOrdinal = 0x50a8f69d00000000lu;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlIoctlPOSIXRequestTable;
extern "C" const fidl_type_t fuchsia_posix_socket_ControlIoctlPOSIXResponseTable;

}  // namespace

Control::ResultOf::Clone_Impl::Clone_Impl(zx::unowned_channel _client_end, uint32_t flags, ::zx::channel object) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CloneRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, CloneRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CloneRequest*>(_write_bytes);
  _request.flags = std::move(flags);
  _request.object = std::move(object);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CloneRequest));
  ::fidl::DecodedMessage<CloneRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Control::InPlace::Clone(std::move(_client_end), std::move(_decoded_request)));
}

Control::ResultOf::Clone Control::SyncClient::Clone(uint32_t flags, ::zx::channel object) {
  return ResultOf::Clone(zx::unowned_channel(this->channel_), std::move(flags), std::move(object));
}

Control::ResultOf::Clone Control::Call::Clone(zx::unowned_channel _client_end, uint32_t flags, ::zx::channel object) {
  return ResultOf::Clone(std::move(_client_end), std::move(flags), std::move(object));
}


Control::UnownedResultOf::Clone_Impl::Clone_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::zx::channel object) {
  if (_request_buffer.capacity() < CloneRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, CloneRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CloneRequest*>(_request_buffer.data());
  _request.flags = std::move(flags);
  _request.object = std::move(object);
  _request_buffer.set_actual(sizeof(CloneRequest));
  ::fidl::DecodedMessage<CloneRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Control::InPlace::Clone(std::move(_client_end), std::move(_decoded_request)));
}

Control::UnownedResultOf::Clone Control::SyncClient::Clone(::fidl::BytePart _request_buffer, uint32_t flags, ::zx::channel object) {
  return UnownedResultOf::Clone(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(object));
}

Control::UnownedResultOf::Clone Control::Call::Clone(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::zx::channel object) {
  return UnownedResultOf::Clone(std::move(_client_end), std::move(_request_buffer), std::move(flags), std::move(object));
}

zx_status_t Control::SyncClient::Clone_Deprecated(uint32_t flags, ::zx::channel object) {
  return Control::Call::Clone_Deprecated(zx::unowned_channel(this->channel_), std::move(flags), std::move(object));
}

zx_status_t Control::Call::Clone_Deprecated(zx::unowned_channel _client_end, uint32_t flags, ::zx::channel object) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CloneRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<CloneRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Clone_GenOrdinal;
  _request.flags = std::move(flags);
  _request.object = std::move(object);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CloneRequest));
  ::fidl::DecodedMessage<CloneRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Control::SyncClient::Clone_Deprecated(::fidl::BytePart _request_buffer, uint32_t flags, ::zx::channel object) {
  return Control::Call::Clone_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(object));
}

zx_status_t Control::Call::Clone_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::zx::channel object) {
  if (_request_buffer.capacity() < CloneRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<CloneRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Clone_GenOrdinal;
  _request.flags = std::move(flags);
  _request.object = std::move(object);
  _request_buffer.set_actual(sizeof(CloneRequest));
  ::fidl::DecodedMessage<CloneRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Control::InPlace::Clone(zx::unowned_channel _client_end, ::fidl::DecodedMessage<CloneRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Clone_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

template <>
Control::ResultOf::Close_Impl<Control::CloseResponse>::Close_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CloseRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, CloseRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CloseRequest));
  ::fidl::DecodedMessage<CloseRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::Close(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::Close Control::SyncClient::Close() {
  return ResultOf::Close(zx::unowned_channel(this->channel_));
}

Control::ResultOf::Close Control::Call::Close(zx::unowned_channel _client_end) {
  return ResultOf::Close(std::move(_client_end));
}

template <>
Control::UnownedResultOf::Close_Impl<Control::CloseResponse>::Close_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(CloseRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, CloseRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(CloseRequest));
  ::fidl::DecodedMessage<CloseRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::Close(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::Close Control::SyncClient::Close(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Close(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::Close Control::Call::Close(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Close(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Close_Deprecated(int32_t* out_s) {
  return Control::Call::Close_Deprecated(zx::unowned_channel(this->channel_), out_s);
}

zx_status_t Control::Call::Close_Deprecated(zx::unowned_channel _client_end, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CloseRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<CloseRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Close_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CloseRequest));
  ::fidl::DecodedMessage<CloseRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<CloseResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<CloseRequest, CloseResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Control::CloseResponse> Control::SyncClient::Close_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Control::Call::Close_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Control::CloseResponse> Control::Call::Close_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(CloseRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<CloseRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Close_GenOrdinal;
  _request_buffer.set_actual(sizeof(CloseRequest));
  ::fidl::DecodedMessage<CloseRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<CloseResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<CloseRequest, CloseResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<CloseResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Control::CloseResponse> Control::InPlace::Close(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(CloseRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<CloseRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Close_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::CloseResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<CloseRequest, CloseResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::CloseResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Describe_Impl<Control::DescribeResponse>::Describe_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<DescribeRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, DescribeRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(DescribeRequest));
  ::fidl::DecodedMessage<DescribeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::Describe(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::Describe Control::SyncClient::Describe() {
  return ResultOf::Describe(zx::unowned_channel(this->channel_));
}

Control::ResultOf::Describe Control::Call::Describe(zx::unowned_channel _client_end) {
  return ResultOf::Describe(std::move(_client_end));
}

template <>
Control::UnownedResultOf::Describe_Impl<Control::DescribeResponse>::Describe_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(DescribeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, DescribeRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(DescribeRequest));
  ::fidl::DecodedMessage<DescribeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::Describe(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::Describe Control::SyncClient::Describe(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Describe(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::Describe Control::Call::Describe(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Describe(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Describe_Deprecated(::llcpp::fuchsia::io::NodeInfo* out_info) {
  return Control::Call::Describe_Deprecated(zx::unowned_channel(this->channel_), out_info);
}

zx_status_t Control::Call::Describe_Deprecated(zx::unowned_channel _client_end, ::llcpp::fuchsia::io::NodeInfo* out_info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<DescribeRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<DescribeRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Describe_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(DescribeRequest));
  ::fidl::DecodedMessage<DescribeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<DescribeResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<DescribeRequest, DescribeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_info = std::move(_response.info);
  return ZX_OK;
}

::fidl::DecodeResult<Control::DescribeResponse> Control::SyncClient::Describe_Deprecated(::fidl::BytePart _response_buffer, ::llcpp::fuchsia::io::NodeInfo* out_info) {
  return Control::Call::Describe_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_info);
}

::fidl::DecodeResult<Control::DescribeResponse> Control::Call::Describe_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::llcpp::fuchsia::io::NodeInfo* out_info) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(DescribeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<DescribeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Describe_GenOrdinal;
  _request_buffer.set_actual(sizeof(DescribeRequest));
  ::fidl::DecodedMessage<DescribeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DescribeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<DescribeRequest, DescribeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DescribeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_info = std::move(_response.info);
  return _decode_result;
}

::fidl::DecodeResult<Control::DescribeResponse> Control::InPlace::Describe(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(DescribeRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<DescribeRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Describe_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::DescribeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<DescribeRequest, DescribeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::DescribeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Sync_Impl<Control::SyncResponse>::Sync_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SyncRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SyncRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SyncRequest));
  ::fidl::DecodedMessage<SyncRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::Sync(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::Sync Control::SyncClient::Sync() {
  return ResultOf::Sync(zx::unowned_channel(this->channel_));
}

Control::ResultOf::Sync Control::Call::Sync(zx::unowned_channel _client_end) {
  return ResultOf::Sync(std::move(_client_end));
}

template <>
Control::UnownedResultOf::Sync_Impl<Control::SyncResponse>::Sync_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(SyncRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, SyncRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(SyncRequest));
  ::fidl::DecodedMessage<SyncRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::Sync(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::Sync Control::SyncClient::Sync(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Sync(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::Sync Control::Call::Sync(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Sync(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Sync_Deprecated(int32_t* out_s) {
  return Control::Call::Sync_Deprecated(zx::unowned_channel(this->channel_), out_s);
}

zx_status_t Control::Call::Sync_Deprecated(zx::unowned_channel _client_end, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SyncRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SyncRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Sync_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SyncRequest));
  ::fidl::DecodedMessage<SyncRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SyncResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SyncRequest, SyncResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Control::SyncResponse> Control::SyncClient::Sync_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Control::Call::Sync_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Control::SyncResponse> Control::Call::Sync_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(SyncRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<SyncRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Sync_GenOrdinal;
  _request_buffer.set_actual(sizeof(SyncRequest));
  ::fidl::DecodedMessage<SyncRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SyncResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SyncRequest, SyncResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SyncResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Control::SyncResponse> Control::InPlace::Sync(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(SyncRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<SyncRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Sync_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SyncResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SyncRequest, SyncResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SyncResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::GetAttr_Impl<Control::GetAttrResponse>::GetAttr_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetAttrRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetAttrRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetAttrRequest));
  ::fidl::DecodedMessage<GetAttrRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetAttr(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::GetAttr Control::SyncClient::GetAttr() {
  return ResultOf::GetAttr(zx::unowned_channel(this->channel_));
}

Control::ResultOf::GetAttr Control::Call::GetAttr(zx::unowned_channel _client_end) {
  return ResultOf::GetAttr(std::move(_client_end));
}

template <>
Control::UnownedResultOf::GetAttr_Impl<Control::GetAttrResponse>::GetAttr_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetAttrRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetAttrRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetAttrRequest));
  ::fidl::DecodedMessage<GetAttrRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetAttr(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetAttr Control::SyncClient::GetAttr(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetAttr(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::GetAttr Control::Call::GetAttr(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetAttr(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::GetAttr_Deprecated(int32_t* out_s, ::llcpp::fuchsia::io::NodeAttributes* out_attributes) {
  return Control::Call::GetAttr_Deprecated(zx::unowned_channel(this->channel_), out_s, out_attributes);
}

zx_status_t Control::Call::GetAttr_Deprecated(zx::unowned_channel _client_end, int32_t* out_s, ::llcpp::fuchsia::io::NodeAttributes* out_attributes) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetAttrRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetAttrRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_GetAttr_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetAttrRequest));
  ::fidl::DecodedMessage<GetAttrRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetAttrResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetAttrRequest, GetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_attributes = std::move(_response.attributes);
  return ZX_OK;
}

::fidl::DecodeResult<Control::GetAttrResponse> Control::SyncClient::GetAttr_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s, ::llcpp::fuchsia::io::NodeAttributes* out_attributes) {
  return Control::Call::GetAttr_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s, out_attributes);
}

::fidl::DecodeResult<Control::GetAttrResponse> Control::Call::GetAttr_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s, ::llcpp::fuchsia::io::NodeAttributes* out_attributes) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetAttrRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetAttrRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetAttr_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetAttrRequest));
  ::fidl::DecodedMessage<GetAttrRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetAttrResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetAttrRequest, GetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetAttrResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_attributes = std::move(_response.attributes);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetAttrResponse> Control::InPlace::GetAttr(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetAttrRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetAttrRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetAttr_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetAttrResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetAttrRequest, GetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetAttrResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::SetAttr_Impl<Control::SetAttrResponse>::SetAttr_Impl(zx::unowned_channel _client_end, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetAttrRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetAttrRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetAttrRequest*>(_write_bytes);
  _request.flags = std::move(flags);
  _request.attributes = std::move(attributes);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetAttrRequest));
  ::fidl::DecodedMessage<SetAttrRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::SetAttr(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::SetAttr Control::SyncClient::SetAttr(uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes) {
  return ResultOf::SetAttr(zx::unowned_channel(this->channel_), std::move(flags), std::move(attributes));
}

Control::ResultOf::SetAttr Control::Call::SetAttr(zx::unowned_channel _client_end, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes) {
  return ResultOf::SetAttr(std::move(_client_end), std::move(flags), std::move(attributes));
}

template <>
Control::UnownedResultOf::SetAttr_Impl<Control::SetAttrResponse>::SetAttr_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetAttrRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetAttrResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, SetAttrRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetAttrRequest*>(_request_buffer.data());
  _request.flags = std::move(flags);
  _request.attributes = std::move(attributes);
  _request_buffer.set_actual(sizeof(SetAttrRequest));
  ::fidl::DecodedMessage<SetAttrRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::SetAttr(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::SetAttr Control::SyncClient::SetAttr(::fidl::BytePart _request_buffer, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetAttr(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(attributes), std::move(_response_buffer));
}

Control::UnownedResultOf::SetAttr Control::Call::SetAttr(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetAttr(std::move(_client_end), std::move(_request_buffer), std::move(flags), std::move(attributes), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::SetAttr_Deprecated(uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, int32_t* out_s) {
  return Control::Call::SetAttr_Deprecated(zx::unowned_channel(this->channel_), std::move(flags), std::move(attributes), out_s);
}

zx_status_t Control::Call::SetAttr_Deprecated(zx::unowned_channel _client_end, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetAttrRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SetAttrRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_SetAttr_GenOrdinal;
  _request.flags = std::move(flags);
  _request.attributes = std::move(attributes);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetAttrRequest));
  ::fidl::DecodedMessage<SetAttrRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SetAttrResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SetAttrRequest, SetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Control::SetAttrResponse> Control::SyncClient::SetAttr_Deprecated(::fidl::BytePart _request_buffer, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Control::Call::SetAttr_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(attributes), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Control::SetAttrResponse> Control::Call::SetAttr_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t flags, ::llcpp::fuchsia::io::NodeAttributes attributes, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  if (_request_buffer.capacity() < SetAttrRequest::PrimarySize) {
    return ::fidl::DecodeResult<SetAttrResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<SetAttrRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_SetAttr_GenOrdinal;
  _request.flags = std::move(flags);
  _request.attributes = std::move(attributes);
  _request_buffer.set_actual(sizeof(SetAttrRequest));
  ::fidl::DecodedMessage<SetAttrRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetAttrResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SetAttrRequest, SetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetAttrResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Control::SetAttrResponse> Control::InPlace::SetAttr(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetAttrRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_SetAttr_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SetAttrResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetAttrRequest, SetAttrResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SetAttrResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Ioctl_Impl<Control::IoctlResponse>::Ioctl_Impl(zx::unowned_channel _client_end, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IoctlRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  IoctlRequest _request = {};
  _request.opcode = std::move(opcode);
  _request.max_out = std::move(max_out);
  _request.handles = std::move(handles);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<IoctlRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Ioctl(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::Ioctl Control::SyncClient::Ioctl(uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in) {
  return ResultOf::Ioctl(zx::unowned_channel(this->channel_), std::move(opcode), std::move(max_out), std::move(handles), std::move(in));
}

Control::ResultOf::Ioctl Control::Call::Ioctl(zx::unowned_channel _client_end, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in) {
  return ResultOf::Ioctl(std::move(_client_end), std::move(opcode), std::move(max_out), std::move(handles), std::move(in));
}

template <>
Control::UnownedResultOf::Ioctl_Impl<Control::IoctlResponse>::Ioctl_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < IoctlRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<IoctlResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  IoctlRequest _request = {};
  _request.opcode = std::move(opcode);
  _request.max_out = std::move(max_out);
  _request.handles = std::move(handles);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<IoctlRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Ioctl(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::Ioctl Control::SyncClient::Ioctl(::fidl::BytePart _request_buffer, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Ioctl(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(opcode), std::move(max_out), std::move(handles), std::move(in), std::move(_response_buffer));
}

Control::UnownedResultOf::Ioctl Control::Call::Ioctl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Ioctl(std::move(_client_end), std::move(_request_buffer), std::move(opcode), std::move(max_out), std::move(handles), std::move(in), std::move(_response_buffer));
}

::fidl::DecodeResult<Control::IoctlResponse> Control::SyncClient::Ioctl_Deprecated(::fidl::BytePart _request_buffer, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer, int32_t* out_s, ::fidl::VectorView<::zx::handle>* out_handles, ::fidl::VectorView<uint8_t>* out_out) {
  return Control::Call::Ioctl_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(opcode), std::move(max_out), std::move(handles), std::move(in), std::move(_response_buffer), out_s, out_handles, out_out);
}

::fidl::DecodeResult<Control::IoctlResponse> Control::Call::Ioctl_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t opcode, uint64_t max_out, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer, int32_t* out_s, ::fidl::VectorView<::zx::handle>* out_handles, ::fidl::VectorView<uint8_t>* out_out) {
  if (_request_buffer.capacity() < IoctlRequest::PrimarySize) {
    return ::fidl::DecodeResult<IoctlResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  IoctlRequest _request = {};
  _request._hdr.ordinal = kControl_Ioctl_GenOrdinal;
  _request.opcode = std::move(opcode);
  _request.max_out = std::move(max_out);
  _request.handles = std::move(handles);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<IoctlRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<IoctlRequest, IoctlResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_handles = std::move(_response.handles);
  *out_out = std::move(_response.out);
  return _decode_result;
}

::fidl::DecodeResult<Control::IoctlResponse> Control::InPlace::Ioctl(zx::unowned_channel _client_end, ::fidl::DecodedMessage<IoctlRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Ioctl_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::IoctlResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<IoctlRequest, IoctlResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::IoctlResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Bind_Impl<Control::BindResponse>::Bind_Impl(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  BindRequest _request = {};
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<BindRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Bind(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::Bind Control::SyncClient::Bind(::fidl::VectorView<uint8_t> addr) {
  return ResultOf::Bind(zx::unowned_channel(this->channel_), std::move(addr));
}

Control::ResultOf::Bind Control::Call::Bind(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr) {
  return ResultOf::Bind(std::move(_client_end), std::move(addr));
}

template <>
Control::UnownedResultOf::Bind_Impl<Control::BindResponse>::Bind_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < BindRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<BindResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  BindRequest _request = {};
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<BindRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Bind(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::Bind Control::SyncClient::Bind(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Bind(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(addr), std::move(_response_buffer));
}

Control::UnownedResultOf::Bind Control::Call::Bind(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Bind(std::move(_client_end), std::move(_request_buffer), std::move(addr), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Bind_Deprecated(::fidl::VectorView<uint8_t> addr, int16_t* out_code) {
  return Control::Call::Bind_Deprecated(zx::unowned_channel(this->channel_), std::move(addr), out_code);
}

zx_status_t Control::Call::Bind_Deprecated(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr, int16_t* out_code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  BindRequest _request = {};
  _request._hdr.ordinal = kControl_Bind_GenOrdinal;
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<BindRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<BindResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<BindRequest, BindResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return ZX_OK;
}

::fidl::DecodeResult<Control::BindResponse> Control::SyncClient::Bind_Deprecated(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  return Control::Call::Bind_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(addr), std::move(_response_buffer), out_code);
}

::fidl::DecodeResult<Control::BindResponse> Control::Call::Bind_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  if (_request_buffer.capacity() < BindRequest::PrimarySize) {
    return ::fidl::DecodeResult<BindResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  BindRequest _request = {};
  _request._hdr.ordinal = kControl_Bind_GenOrdinal;
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<BindResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<BindRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<BindResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<BindRequest, BindResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<BindResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return _decode_result;
}

::fidl::DecodeResult<Control::BindResponse> Control::InPlace::Bind(zx::unowned_channel _client_end, ::fidl::DecodedMessage<BindRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Bind_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::BindResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<BindRequest, BindResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::BindResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Connect_Impl<Control::ConnectResponse>::Connect_Impl(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ConnectRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  ConnectRequest _request = {};
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<ConnectRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Connect(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::Connect Control::SyncClient::Connect(::fidl::VectorView<uint8_t> addr) {
  return ResultOf::Connect(zx::unowned_channel(this->channel_), std::move(addr));
}

Control::ResultOf::Connect Control::Call::Connect(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr) {
  return ResultOf::Connect(std::move(_client_end), std::move(addr));
}

template <>
Control::UnownedResultOf::Connect_Impl<Control::ConnectResponse>::Connect_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < ConnectRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<ConnectResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  ConnectRequest _request = {};
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<ConnectRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::Connect(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::Connect Control::SyncClient::Connect(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Connect(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(addr), std::move(_response_buffer));
}

Control::UnownedResultOf::Connect Control::Call::Connect(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Connect(std::move(_client_end), std::move(_request_buffer), std::move(addr), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Connect_Deprecated(::fidl::VectorView<uint8_t> addr, int16_t* out_code) {
  return Control::Call::Connect_Deprecated(zx::unowned_channel(this->channel_), std::move(addr), out_code);
}

zx_status_t Control::Call::Connect_Deprecated(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> addr, int16_t* out_code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ConnectRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  ConnectRequest _request = {};
  _request._hdr.ordinal = kControl_Connect_GenOrdinal;
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<ConnectRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<ConnectResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<ConnectRequest, ConnectResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return ZX_OK;
}

::fidl::DecodeResult<Control::ConnectResponse> Control::SyncClient::Connect_Deprecated(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  return Control::Call::Connect_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(addr), std::move(_response_buffer), out_code);
}

::fidl::DecodeResult<Control::ConnectResponse> Control::Call::Connect_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> addr, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  if (_request_buffer.capacity() < ConnectRequest::PrimarySize) {
    return ::fidl::DecodeResult<ConnectResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  ConnectRequest _request = {};
  _request._hdr.ordinal = kControl_Connect_GenOrdinal;
  _request.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ConnectResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<ConnectRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ConnectResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<ConnectRequest, ConnectResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ConnectResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return _decode_result;
}

::fidl::DecodeResult<Control::ConnectResponse> Control::InPlace::Connect(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ConnectRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Connect_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::ConnectResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<ConnectRequest, ConnectResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::ConnectResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Listen_Impl<Control::ListenResponse>::Listen_Impl(zx::unowned_channel _client_end, int16_t backlog) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ListenRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, ListenRequest::PrimarySize);
  auto& _request = *reinterpret_cast<ListenRequest*>(_write_bytes);
  _request.backlog = std::move(backlog);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ListenRequest));
  ::fidl::DecodedMessage<ListenRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::Listen(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::Listen Control::SyncClient::Listen(int16_t backlog) {
  return ResultOf::Listen(zx::unowned_channel(this->channel_), std::move(backlog));
}

Control::ResultOf::Listen Control::Call::Listen(zx::unowned_channel _client_end, int16_t backlog) {
  return ResultOf::Listen(std::move(_client_end), std::move(backlog));
}

template <>
Control::UnownedResultOf::Listen_Impl<Control::ListenResponse>::Listen_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t backlog, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < ListenRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<ListenResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, ListenRequest::PrimarySize);
  auto& _request = *reinterpret_cast<ListenRequest*>(_request_buffer.data());
  _request.backlog = std::move(backlog);
  _request_buffer.set_actual(sizeof(ListenRequest));
  ::fidl::DecodedMessage<ListenRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::Listen(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::Listen Control::SyncClient::Listen(::fidl::BytePart _request_buffer, int16_t backlog, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Listen(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(backlog), std::move(_response_buffer));
}

Control::UnownedResultOf::Listen Control::Call::Listen(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t backlog, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Listen(std::move(_client_end), std::move(_request_buffer), std::move(backlog), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Listen_Deprecated(int16_t backlog, int16_t* out_code) {
  return Control::Call::Listen_Deprecated(zx::unowned_channel(this->channel_), std::move(backlog), out_code);
}

zx_status_t Control::Call::Listen_Deprecated(zx::unowned_channel _client_end, int16_t backlog, int16_t* out_code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ListenRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<ListenRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Listen_GenOrdinal;
  _request.backlog = std::move(backlog);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ListenRequest));
  ::fidl::DecodedMessage<ListenRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<ListenResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<ListenRequest, ListenResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return ZX_OK;
}

::fidl::DecodeResult<Control::ListenResponse> Control::SyncClient::Listen_Deprecated(::fidl::BytePart _request_buffer, int16_t backlog, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  return Control::Call::Listen_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(backlog), std::move(_response_buffer), out_code);
}

::fidl::DecodeResult<Control::ListenResponse> Control::Call::Listen_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t backlog, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  if (_request_buffer.capacity() < ListenRequest::PrimarySize) {
    return ::fidl::DecodeResult<ListenResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<ListenRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Listen_GenOrdinal;
  _request.backlog = std::move(backlog);
  _request_buffer.set_actual(sizeof(ListenRequest));
  ::fidl::DecodedMessage<ListenRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ListenResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<ListenRequest, ListenResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ListenResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return _decode_result;
}

::fidl::DecodeResult<Control::ListenResponse> Control::InPlace::Listen(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ListenRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Listen_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::ListenResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<ListenRequest, ListenResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::ListenResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::Accept_Impl<Control::AcceptResponse>::Accept_Impl(zx::unowned_channel _client_end, int16_t flags) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AcceptRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, AcceptRequest::PrimarySize);
  auto& _request = *reinterpret_cast<AcceptRequest*>(_write_bytes);
  _request.flags = std::move(flags);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(AcceptRequest));
  ::fidl::DecodedMessage<AcceptRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::Accept(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::Accept Control::SyncClient::Accept(int16_t flags) {
  return ResultOf::Accept(zx::unowned_channel(this->channel_), std::move(flags));
}

Control::ResultOf::Accept Control::Call::Accept(zx::unowned_channel _client_end, int16_t flags) {
  return ResultOf::Accept(std::move(_client_end), std::move(flags));
}

template <>
Control::UnownedResultOf::Accept_Impl<Control::AcceptResponse>::Accept_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t flags, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < AcceptRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<AcceptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, AcceptRequest::PrimarySize);
  auto& _request = *reinterpret_cast<AcceptRequest*>(_request_buffer.data());
  _request.flags = std::move(flags);
  _request_buffer.set_actual(sizeof(AcceptRequest));
  ::fidl::DecodedMessage<AcceptRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::Accept(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::Accept Control::SyncClient::Accept(::fidl::BytePart _request_buffer, int16_t flags, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Accept(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(_response_buffer));
}

Control::UnownedResultOf::Accept Control::Call::Accept(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t flags, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::Accept(std::move(_client_end), std::move(_request_buffer), std::move(flags), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::Accept_Deprecated(int16_t flags, int16_t* out_code, ::zx::channel* out_s) {
  return Control::Call::Accept_Deprecated(zx::unowned_channel(this->channel_), std::move(flags), out_code, out_s);
}

zx_status_t Control::Call::Accept_Deprecated(zx::unowned_channel _client_end, int16_t flags, int16_t* out_code, ::zx::channel* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AcceptRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<AcceptRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_Accept_GenOrdinal;
  _request.flags = std::move(flags);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(AcceptRequest));
  ::fidl::DecodedMessage<AcceptRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<AcceptResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<AcceptRequest, AcceptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Control::AcceptResponse> Control::SyncClient::Accept_Deprecated(::fidl::BytePart _request_buffer, int16_t flags, ::fidl::BytePart _response_buffer, int16_t* out_code, ::zx::channel* out_s) {
  return Control::Call::Accept_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(flags), std::move(_response_buffer), out_code, out_s);
}

::fidl::DecodeResult<Control::AcceptResponse> Control::Call::Accept_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t flags, ::fidl::BytePart _response_buffer, int16_t* out_code, ::zx::channel* out_s) {
  if (_request_buffer.capacity() < AcceptRequest::PrimarySize) {
    return ::fidl::DecodeResult<AcceptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<AcceptRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_Accept_GenOrdinal;
  _request.flags = std::move(flags);
  _request_buffer.set_actual(sizeof(AcceptRequest));
  ::fidl::DecodedMessage<AcceptRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AcceptResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<AcceptRequest, AcceptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AcceptResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Control::AcceptResponse> Control::InPlace::Accept(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AcceptRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Accept_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::AcceptResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<AcceptRequest, AcceptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::AcceptResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::GetSockName_Impl<Control::GetSockNameResponse>::GetSockName_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetSockNameRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetSockNameRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetSockNameRequest));
  ::fidl::DecodedMessage<GetSockNameRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetSockName(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::GetSockName Control::SyncClient::GetSockName() {
  return ResultOf::GetSockName(zx::unowned_channel(this->channel_));
}

Control::ResultOf::GetSockName Control::Call::GetSockName(zx::unowned_channel _client_end) {
  return ResultOf::GetSockName(std::move(_client_end));
}

template <>
Control::UnownedResultOf::GetSockName_Impl<Control::GetSockNameResponse>::GetSockName_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetSockNameRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetSockNameRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetSockNameRequest));
  ::fidl::DecodedMessage<GetSockNameRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetSockName(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetSockName Control::SyncClient::GetSockName(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetSockName(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::GetSockName Control::Call::GetSockName(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetSockName(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Control::GetSockNameResponse> Control::SyncClient::GetSockName_Deprecated(::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_addr) {
  return Control::Call::GetSockName_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_code, out_addr);
}

::fidl::DecodeResult<Control::GetSockNameResponse> Control::Call::GetSockName_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_addr) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetSockNameRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetSockNameRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetSockName_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetSockNameRequest));
  ::fidl::DecodedMessage<GetSockNameRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetSockNameResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetSockNameRequest, GetSockNameResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetSockNameResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_addr = std::move(_response.addr);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetSockNameResponse> Control::InPlace::GetSockName(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetSockNameRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetSockNameRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetSockName_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetSockNameResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetSockNameRequest, GetSockNameResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetSockNameResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::GetPeerName_Impl<Control::GetPeerNameResponse>::GetPeerName_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetPeerNameRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetPeerNameRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetPeerNameRequest));
  ::fidl::DecodedMessage<GetPeerNameRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetPeerName(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::GetPeerName Control::SyncClient::GetPeerName() {
  return ResultOf::GetPeerName(zx::unowned_channel(this->channel_));
}

Control::ResultOf::GetPeerName Control::Call::GetPeerName(zx::unowned_channel _client_end) {
  return ResultOf::GetPeerName(std::move(_client_end));
}

template <>
Control::UnownedResultOf::GetPeerName_Impl<Control::GetPeerNameResponse>::GetPeerName_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetPeerNameRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetPeerNameRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetPeerNameRequest));
  ::fidl::DecodedMessage<GetPeerNameRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetPeerName(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetPeerName Control::SyncClient::GetPeerName(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetPeerName(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::GetPeerName Control::Call::GetPeerName(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetPeerName(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Control::GetPeerNameResponse> Control::SyncClient::GetPeerName_Deprecated(::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_addr) {
  return Control::Call::GetPeerName_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_code, out_addr);
}

::fidl::DecodeResult<Control::GetPeerNameResponse> Control::Call::GetPeerName_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_addr) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetPeerNameRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetPeerNameRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetPeerName_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetPeerNameRequest));
  ::fidl::DecodedMessage<GetPeerNameRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetPeerNameResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetPeerNameRequest, GetPeerNameResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetPeerNameResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_addr = std::move(_response.addr);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetPeerNameResponse> Control::InPlace::GetPeerName(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetPeerNameRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetPeerNameRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetPeerName_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetPeerNameResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetPeerNameRequest, GetPeerNameResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetPeerNameResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::SetSockOpt_Impl<Control::SetSockOptResponse>::SetSockOpt_Impl(zx::unowned_channel _client_end, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetSockOptRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  SetSockOptRequest _request = {};
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SetSockOptRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::SetSockOpt(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::SetSockOpt Control::SyncClient::SetSockOpt(int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval) {
  return ResultOf::SetSockOpt(zx::unowned_channel(this->channel_), std::move(level), std::move(optname), std::move(optval));
}

Control::ResultOf::SetSockOpt Control::Call::SetSockOpt(zx::unowned_channel _client_end, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval) {
  return ResultOf::SetSockOpt(std::move(_client_end), std::move(level), std::move(optname), std::move(optval));
}

template <>
Control::UnownedResultOf::SetSockOpt_Impl<Control::SetSockOptResponse>::SetSockOpt_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetSockOptRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetSockOptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  SetSockOptRequest _request = {};
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SetSockOptRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::SetSockOpt(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::SetSockOpt Control::SyncClient::SetSockOpt(::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetSockOpt(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(level), std::move(optname), std::move(optval), std::move(_response_buffer));
}

Control::UnownedResultOf::SetSockOpt Control::Call::SetSockOpt(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetSockOpt(std::move(_client_end), std::move(_request_buffer), std::move(level), std::move(optname), std::move(optval), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::SetSockOpt_Deprecated(int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, int16_t* out_code) {
  return Control::Call::SetSockOpt_Deprecated(zx::unowned_channel(this->channel_), std::move(level), std::move(optname), std::move(optval), out_code);
}

zx_status_t Control::Call::SetSockOpt_Deprecated(zx::unowned_channel _client_end, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, int16_t* out_code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetSockOptRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  SetSockOptRequest _request = {};
  _request._hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<SetSockOptRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SetSockOptResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SetSockOptRequest, SetSockOptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return ZX_OK;
}

::fidl::DecodeResult<Control::SetSockOptResponse> Control::SyncClient::SetSockOpt_Deprecated(::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  return Control::Call::SetSockOpt_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(level), std::move(optname), std::move(optval), std::move(_response_buffer), out_code);
}

::fidl::DecodeResult<Control::SetSockOptResponse> Control::Call::SetSockOpt_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::VectorView<uint8_t> optval, ::fidl::BytePart _response_buffer, int16_t* out_code) {
  if (_request_buffer.capacity() < SetSockOptRequest::PrimarySize) {
    return ::fidl::DecodeResult<SetSockOptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  SetSockOptRequest _request = {};
  _request._hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetSockOptResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<SetSockOptRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetSockOptResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SetSockOptRequest, SetSockOptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetSockOptResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  return _decode_result;
}

::fidl::DecodeResult<Control::SetSockOptResponse> Control::InPlace::SetSockOpt(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetSockOptRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SetSockOptResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetSockOptRequest, SetSockOptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::SetSockOptResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::GetSockOpt_Impl<Control::GetSockOptResponse>::GetSockOpt_Impl(zx::unowned_channel _client_end, int16_t level, int16_t optname) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetSockOptRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetSockOptRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetSockOptRequest*>(_write_bytes);
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetSockOptRequest));
  ::fidl::DecodedMessage<GetSockOptRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetSockOpt(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::GetSockOpt Control::SyncClient::GetSockOpt(int16_t level, int16_t optname) {
  return ResultOf::GetSockOpt(zx::unowned_channel(this->channel_), std::move(level), std::move(optname));
}

Control::ResultOf::GetSockOpt Control::Call::GetSockOpt(zx::unowned_channel _client_end, int16_t level, int16_t optname) {
  return ResultOf::GetSockOpt(std::move(_client_end), std::move(level), std::move(optname));
}

template <>
Control::UnownedResultOf::GetSockOpt_Impl<Control::GetSockOptResponse>::GetSockOpt_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetSockOptRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetSockOptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetSockOptRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetSockOptRequest*>(_request_buffer.data());
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request_buffer.set_actual(sizeof(GetSockOptRequest));
  ::fidl::DecodedMessage<GetSockOptRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetSockOpt(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetSockOpt Control::SyncClient::GetSockOpt(::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetSockOpt(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(level), std::move(optname), std::move(_response_buffer));
}

Control::UnownedResultOf::GetSockOpt Control::Call::GetSockOpt(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetSockOpt(std::move(_client_end), std::move(_request_buffer), std::move(level), std::move(optname), std::move(_response_buffer));
}

::fidl::DecodeResult<Control::GetSockOptResponse> Control::SyncClient::GetSockOpt_Deprecated(::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_optval) {
  return Control::Call::GetSockOpt_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(level), std::move(optname), std::move(_response_buffer), out_code, out_optval);
}

::fidl::DecodeResult<Control::GetSockOptResponse> Control::Call::GetSockOpt_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t level, int16_t optname, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_optval) {
  if (_request_buffer.capacity() < GetSockOptRequest::PrimarySize) {
    return ::fidl::DecodeResult<GetSockOptResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<GetSockOptRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetSockOpt_GenOrdinal;
  _request.level = std::move(level);
  _request.optname = std::move(optname);
  _request_buffer.set_actual(sizeof(GetSockOptRequest));
  ::fidl::DecodedMessage<GetSockOptRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetSockOptResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetSockOptRequest, GetSockOptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetSockOptResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_optval = std::move(_response.optval);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetSockOptResponse> Control::InPlace::GetSockOpt(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetSockOptRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetSockOpt_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetSockOptResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetSockOptRequest, GetSockOptResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetSockOptResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Control::ResultOf::IoctlPOSIX_Impl<Control::IoctlPOSIXResponse>::IoctlPOSIX_Impl(zx::unowned_channel _client_end, int16_t req, ::fidl::VectorView<uint8_t> in) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IoctlPOSIXRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  IoctlPOSIXRequest _request = {};
  _request.req = std::move(req);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<IoctlPOSIXRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::IoctlPOSIX(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::IoctlPOSIX Control::SyncClient::IoctlPOSIX(int16_t req, ::fidl::VectorView<uint8_t> in) {
  return ResultOf::IoctlPOSIX(zx::unowned_channel(this->channel_), std::move(req), std::move(in));
}

Control::ResultOf::IoctlPOSIX Control::Call::IoctlPOSIX(zx::unowned_channel _client_end, int16_t req, ::fidl::VectorView<uint8_t> in) {
  return ResultOf::IoctlPOSIX(std::move(_client_end), std::move(req), std::move(in));
}

template <>
Control::UnownedResultOf::IoctlPOSIX_Impl<Control::IoctlPOSIXResponse>::IoctlPOSIX_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t req, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < IoctlPOSIXRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<IoctlPOSIXResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  IoctlPOSIXRequest _request = {};
  _request.req = std::move(req);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<IoctlPOSIXRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Control::InPlace::IoctlPOSIX(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::IoctlPOSIX Control::SyncClient::IoctlPOSIX(::fidl::BytePart _request_buffer, int16_t req, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::IoctlPOSIX(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(req), std::move(in), std::move(_response_buffer));
}

Control::UnownedResultOf::IoctlPOSIX Control::Call::IoctlPOSIX(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t req, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::IoctlPOSIX(std::move(_client_end), std::move(_request_buffer), std::move(req), std::move(in), std::move(_response_buffer));
}

::fidl::DecodeResult<Control::IoctlPOSIXResponse> Control::SyncClient::IoctlPOSIX_Deprecated(::fidl::BytePart _request_buffer, int16_t req, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_out) {
  return Control::Call::IoctlPOSIX_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(req), std::move(in), std::move(_response_buffer), out_code, out_out);
}

::fidl::DecodeResult<Control::IoctlPOSIXResponse> Control::Call::IoctlPOSIX_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int16_t req, ::fidl::VectorView<uint8_t> in, ::fidl::BytePart _response_buffer, int16_t* out_code, ::fidl::VectorView<uint8_t>* out_out) {
  if (_request_buffer.capacity() < IoctlPOSIXRequest::PrimarySize) {
    return ::fidl::DecodeResult<IoctlPOSIXResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  IoctlPOSIXRequest _request = {};
  _request._hdr.ordinal = kControl_IoctlPOSIX_GenOrdinal;
  _request.req = std::move(req);
  _request.in = std::move(in);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlPOSIXResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<IoctlPOSIXRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlPOSIXResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<IoctlPOSIXRequest, IoctlPOSIXResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<IoctlPOSIXResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_code = std::move(_response.code);
  *out_out = std::move(_response.out);
  return _decode_result;
}

::fidl::DecodeResult<Control::IoctlPOSIXResponse> Control::InPlace::IoctlPOSIX(zx::unowned_channel _client_end, ::fidl::DecodedMessage<IoctlPOSIXRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_IoctlPOSIX_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::IoctlPOSIXResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<IoctlPOSIXRequest, IoctlPOSIXResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::IoctlPOSIXResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

zx_status_t Control::SyncClient::HandleEvents(Control::EventHandlers handlers) {
  return Control::Call::HandleEvents(zx::unowned_channel(channel_), std::move(handlers));
}

zx_status_t Control::Call::HandleEvents(zx::unowned_channel client_end,
                                            Control::EventHandlers handlers) {
  zx_status_t status = client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                            zx::time::infinite(),
                                            nullptr);
  if (status != ZX_OK) {
    return status;
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<OnOpenResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<OnOpenResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (OnOpenResponse::MaxNumHandles >= x) {
      x = OnOpenResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  FIDL_ALIGNDECL uint8_t read_bytes[kReadAllocSize];
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD,
                            read_bytes, read_handles,
                            kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new event,
    // whose size exceeds the maximum of known events in the current protocol.
    return handlers.unknown();
  }
  if (status != ZX_OK) {
    return status;
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ZX_ERR_INVALID_ARGS;
  }
  auto msg = fidl_msg_t {
    .bytes = read_bytes,
    .handles = read_handles,
    .num_bytes = actual_bytes,
    .num_handles = actual_handles
  };
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg.bytes);
  switch (hdr->ordinal) {
    case kControl_OnOpen_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<OnOpenResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      auto message = result.message.message();
      return handlers.on_open(std::move(message->s), std::move(message->info));
    }
    default:
      zx_handle_close_many(read_handles, actual_handles);
      return handlers.unknown();
  }
}

bool Control::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kControl_Clone_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<CloneRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Clone(std::move(message->flags), std::move(message->object),
        Interface::CloneCompleter::Sync(txn));
      return true;
    }
    case kControl_Close_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<CloseRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Close(
        Interface::CloseCompleter::Sync(txn));
      return true;
    }
    case kControl_Describe_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<DescribeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Describe(
        Interface::DescribeCompleter::Sync(txn));
      return true;
    }
    case kControl_Sync_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SyncRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Sync(
        Interface::SyncCompleter::Sync(txn));
      return true;
    }
    case kControl_GetAttr_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetAttrRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetAttr(
        Interface::GetAttrCompleter::Sync(txn));
      return true;
    }
    case kControl_SetAttr_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetAttrRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetAttr(std::move(message->flags), std::move(message->attributes),
        Interface::SetAttrCompleter::Sync(txn));
      return true;
    }
    case kControl_Ioctl_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<IoctlRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Ioctl(std::move(message->opcode), std::move(message->max_out), std::move(message->handles), std::move(message->in),
        Interface::IoctlCompleter::Sync(txn));
      return true;
    }
    case kControl_Bind_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<BindRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Bind(std::move(message->addr),
        Interface::BindCompleter::Sync(txn));
      return true;
    }
    case kControl_Connect_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<ConnectRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Connect(std::move(message->addr),
        Interface::ConnectCompleter::Sync(txn));
      return true;
    }
    case kControl_Listen_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<ListenRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Listen(std::move(message->backlog),
        Interface::ListenCompleter::Sync(txn));
      return true;
    }
    case kControl_Accept_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<AcceptRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Accept(std::move(message->flags),
        Interface::AcceptCompleter::Sync(txn));
      return true;
    }
    case kControl_GetSockName_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetSockNameRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetSockName(
        Interface::GetSockNameCompleter::Sync(txn));
      return true;
    }
    case kControl_GetPeerName_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetPeerNameRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetPeerName(
        Interface::GetPeerNameCompleter::Sync(txn));
      return true;
    }
    case kControl_SetSockOpt_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetSockOptRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetSockOpt(std::move(message->level), std::move(message->optname), std::move(message->optval),
        Interface::SetSockOptCompleter::Sync(txn));
      return true;
    }
    case kControl_GetSockOpt_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetSockOptRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetSockOpt(std::move(message->level), std::move(message->optname),
        Interface::GetSockOptCompleter::Sync(txn));
      return true;
    }
    case kControl_IoctlPOSIX_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<IoctlPOSIXRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->IoctlPOSIX(std::move(message->req), std::move(message->in),
        Interface::IoctlPOSIXCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Control::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Control::Interface::CloseCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CloseResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<CloseResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Close_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(CloseResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<CloseResponse>(std::move(_response_bytes)));
}

void Control::Interface::CloseCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < CloseResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<CloseResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Close_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(CloseResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<CloseResponse>(std::move(_buffer)));
}

void Control::Interface::CloseCompleterBase::Reply(::fidl::DecodedMessage<CloseResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Close_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::DescribeCompleterBase::Reply(::llcpp::fuchsia::io::NodeInfo info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<DescribeResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<DescribeResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Describe_GenOrdinal;
  _response.info = std::move(info);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(DescribeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<DescribeResponse>(std::move(_response_bytes)));
}

void Control::Interface::DescribeCompleterBase::Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::io::NodeInfo info) {
  if (_buffer.capacity() < DescribeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<DescribeResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Describe_GenOrdinal;
  _response.info = std::move(info);
  _buffer.set_actual(sizeof(DescribeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<DescribeResponse>(std::move(_buffer)));
}

void Control::Interface::DescribeCompleterBase::Reply(::fidl::DecodedMessage<DescribeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Describe_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


zx_status_t Control::SendOnOpenEvent(::zx::unowned_channel _chan, int32_t s, ::llcpp::fuchsia::io::NodeInfo* info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnOpenResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize];
  OnOpenResponse _response = {};
  _response._hdr = {};
  _response._hdr.ordinal = kControl_OnOpen_GenOrdinal;
  _response.s = std::move(s);
  _response.info = std::move(info);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(_linearize_result.message));
}

zx_status_t Control::SendOnOpenEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int32_t s, ::llcpp::fuchsia::io::NodeInfo* info) {
  if (_buffer.capacity() < OnOpenResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  OnOpenResponse _response = {};
  _response._hdr = {};
  _response._hdr.ordinal = kControl_OnOpen_GenOrdinal;
  _response.s = std::move(s);
  _response.info = std::move(info);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
	return _linearize_result.status;
  }
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(_linearize_result.message));
}

zx_status_t Control::SendOnOpenEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<OnOpenResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_OnOpen_GenOrdinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


void Control::Interface::SyncCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SyncResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SyncResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Sync_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SyncResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SyncResponse>(std::move(_response_bytes)));
}

void Control::Interface::SyncCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < SyncResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SyncResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Sync_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(SyncResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SyncResponse>(std::move(_buffer)));
}

void Control::Interface::SyncCompleterBase::Reply(::fidl::DecodedMessage<SyncResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Sync_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::GetAttrCompleterBase::Reply(int32_t s, ::llcpp::fuchsia::io::NodeAttributes attributes) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetAttrResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetAttrResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_GetAttr_GenOrdinal;
  _response.s = std::move(s);
  _response.attributes = std::move(attributes);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetAttrResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetAttrResponse>(std::move(_response_bytes)));
}

void Control::Interface::GetAttrCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s, ::llcpp::fuchsia::io::NodeAttributes attributes) {
  if (_buffer.capacity() < GetAttrResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetAttrResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_GetAttr_GenOrdinal;
  _response.s = std::move(s);
  _response.attributes = std::move(attributes);
  _buffer.set_actual(sizeof(GetAttrResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetAttrResponse>(std::move(_buffer)));
}

void Control::Interface::GetAttrCompleterBase::Reply(::fidl::DecodedMessage<GetAttrResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetAttr_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::SetAttrCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetAttrResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetAttrResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_SetAttr_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetAttrResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetAttrResponse>(std::move(_response_bytes)));
}

void Control::Interface::SetAttrCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < SetAttrResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetAttrResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_SetAttr_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(SetAttrResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetAttrResponse>(std::move(_buffer)));
}

void Control::Interface::SetAttrCompleterBase::Reply(::fidl::DecodedMessage<SetAttrResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_SetAttr_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::IoctlCompleterBase::Reply(int32_t s, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> out) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IoctlResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  IoctlResponse _response = {};
  _response._hdr.ordinal = kControl_Ioctl_GenOrdinal;
  _response.s = std::move(s);
  _response.handles = std::move(handles);
  _response.out = std::move(out);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::IoctlCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s, ::fidl::VectorView<::zx::handle> handles, ::fidl::VectorView<uint8_t> out) {
  if (_buffer.capacity() < IoctlResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  IoctlResponse _response = {};
  _response._hdr.ordinal = kControl_Ioctl_GenOrdinal;
  _response.s = std::move(s);
  _response.handles = std::move(handles);
  _response.out = std::move(out);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::IoctlCompleterBase::Reply(::fidl::DecodedMessage<IoctlResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Ioctl_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::BindCompleterBase::Reply(int16_t code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<BindResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Bind_GenOrdinal;
  _response.code = std::move(code);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(BindResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<BindResponse>(std::move(_response_bytes)));
}

void Control::Interface::BindCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code) {
  if (_buffer.capacity() < BindResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<BindResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Bind_GenOrdinal;
  _response.code = std::move(code);
  _buffer.set_actual(sizeof(BindResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<BindResponse>(std::move(_buffer)));
}

void Control::Interface::BindCompleterBase::Reply(::fidl::DecodedMessage<BindResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Bind_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::ConnectCompleterBase::Reply(int16_t code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ConnectResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<ConnectResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Connect_GenOrdinal;
  _response.code = std::move(code);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(ConnectResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ConnectResponse>(std::move(_response_bytes)));
}

void Control::Interface::ConnectCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code) {
  if (_buffer.capacity() < ConnectResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<ConnectResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Connect_GenOrdinal;
  _response.code = std::move(code);
  _buffer.set_actual(sizeof(ConnectResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ConnectResponse>(std::move(_buffer)));
}

void Control::Interface::ConnectCompleterBase::Reply(::fidl::DecodedMessage<ConnectResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Connect_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::ListenCompleterBase::Reply(int16_t code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ListenResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<ListenResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Listen_GenOrdinal;
  _response.code = std::move(code);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(ListenResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ListenResponse>(std::move(_response_bytes)));
}

void Control::Interface::ListenCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code) {
  if (_buffer.capacity() < ListenResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<ListenResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Listen_GenOrdinal;
  _response.code = std::move(code);
  _buffer.set_actual(sizeof(ListenResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ListenResponse>(std::move(_buffer)));
}

void Control::Interface::ListenCompleterBase::Reply(::fidl::DecodedMessage<ListenResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Listen_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::AcceptCompleterBase::Reply(int16_t code, ::zx::channel s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AcceptResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<AcceptResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_Accept_GenOrdinal;
  _response.code = std::move(code);
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(AcceptResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AcceptResponse>(std::move(_response_bytes)));
}

void Control::Interface::AcceptCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::zx::channel s) {
  if (_buffer.capacity() < AcceptResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<AcceptResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_Accept_GenOrdinal;
  _response.code = std::move(code);
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(AcceptResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AcceptResponse>(std::move(_buffer)));
}

void Control::Interface::AcceptCompleterBase::Reply(::fidl::DecodedMessage<AcceptResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_Accept_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::GetSockNameCompleterBase::Reply(int16_t code, ::fidl::VectorView<uint8_t> addr) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetSockNameResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetSockNameResponse _response = {};
  _response._hdr.ordinal = kControl_GetSockName_GenOrdinal;
  _response.code = std::move(code);
  _response.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetSockNameCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::fidl::VectorView<uint8_t> addr) {
  if (_buffer.capacity() < GetSockNameResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetSockNameResponse _response = {};
  _response._hdr.ordinal = kControl_GetSockName_GenOrdinal;
  _response.code = std::move(code);
  _response.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetSockNameCompleterBase::Reply(::fidl::DecodedMessage<GetSockNameResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetSockName_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::GetPeerNameCompleterBase::Reply(int16_t code, ::fidl::VectorView<uint8_t> addr) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetPeerNameResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetPeerNameResponse _response = {};
  _response._hdr.ordinal = kControl_GetPeerName_GenOrdinal;
  _response.code = std::move(code);
  _response.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetPeerNameCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::fidl::VectorView<uint8_t> addr) {
  if (_buffer.capacity() < GetPeerNameResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetPeerNameResponse _response = {};
  _response._hdr.ordinal = kControl_GetPeerName_GenOrdinal;
  _response.code = std::move(code);
  _response.addr = std::move(addr);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetPeerNameCompleterBase::Reply(::fidl::DecodedMessage<GetPeerNameResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetPeerName_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::SetSockOptCompleterBase::Reply(int16_t code) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetSockOptResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetSockOptResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  _response.code = std::move(code);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetSockOptResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetSockOptResponse>(std::move(_response_bytes)));
}

void Control::Interface::SetSockOptCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code) {
  if (_buffer.capacity() < SetSockOptResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetSockOptResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  _response.code = std::move(code);
  _buffer.set_actual(sizeof(SetSockOptResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetSockOptResponse>(std::move(_buffer)));
}

void Control::Interface::SetSockOptCompleterBase::Reply(::fidl::DecodedMessage<SetSockOptResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_SetSockOpt_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::GetSockOptCompleterBase::Reply(int16_t code, ::fidl::VectorView<uint8_t> optval) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetSockOptResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetSockOptResponse _response = {};
  _response._hdr.ordinal = kControl_GetSockOpt_GenOrdinal;
  _response.code = std::move(code);
  _response.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetSockOptCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::fidl::VectorView<uint8_t> optval) {
  if (_buffer.capacity() < GetSockOptResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetSockOptResponse _response = {};
  _response._hdr.ordinal = kControl_GetSockOpt_GenOrdinal;
  _response.code = std::move(code);
  _response.optval = std::move(optval);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::GetSockOptCompleterBase::Reply(::fidl::DecodedMessage<GetSockOptResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetSockOpt_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::IoctlPOSIXCompleterBase::Reply(int16_t code, ::fidl::VectorView<uint8_t> out) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IoctlPOSIXResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  IoctlPOSIXResponse _response = {};
  _response._hdr.ordinal = kControl_IoctlPOSIX_GenOrdinal;
  _response.code = std::move(code);
  _response.out = std::move(out);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::IoctlPOSIXCompleterBase::Reply(::fidl::BytePart _buffer, int16_t code, ::fidl::VectorView<uint8_t> out) {
  if (_buffer.capacity() < IoctlPOSIXResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  IoctlPOSIXResponse _response = {};
  _response._hdr.ordinal = kControl_IoctlPOSIX_GenOrdinal;
  _response.code = std::move(code);
  _response.out = std::move(out);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Control::Interface::IoctlPOSIXCompleterBase::Reply(::fidl::DecodedMessage<IoctlPOSIXResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_IoctlPOSIX_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace socket
}  // namespace posix
}  // namespace fuchsia
}  // namespace llcpp
