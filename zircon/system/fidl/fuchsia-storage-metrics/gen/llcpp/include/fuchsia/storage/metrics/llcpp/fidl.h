// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace storage {
namespace metrics {

struct CallStatRaw;
struct CallStat;
struct FsMetrics;



struct CallStatRaw {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint64_t minimum_latency = {};

  uint64_t maximum_latency = {};

  uint64_t total_time_spent = {};

  uint64_t total_calls = {};

  uint64_t bytes_transferred = {};
};



struct CallStat {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 80;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  CallStatRaw success = {};

  CallStatRaw failure = {};
};



struct FsMetrics {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 640;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  CallStat create = {};

  CallStat read = {};

  CallStat write = {};

  CallStat truncate = {};

  CallStat unlink = {};

  CallStat rename = {};

  CallStat lookup = {};

  CallStat open = {};
};

}  // namespace metrics
}  // namespace storage
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::storage::metrics::CallStatRaw> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::storage::metrics::CallStatRaw>);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStatRaw, minimum_latency) == 0);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStatRaw, maximum_latency) == 8);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStatRaw, total_time_spent) == 16);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStatRaw, total_calls) == 24);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStatRaw, bytes_transferred) == 32);
static_assert(sizeof(::llcpp::fuchsia::storage::metrics::CallStatRaw) == ::llcpp::fuchsia::storage::metrics::CallStatRaw::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::storage::metrics::CallStat> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::storage::metrics::CallStat>);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStat, success) == 0);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::CallStat, failure) == 40);
static_assert(sizeof(::llcpp::fuchsia::storage::metrics::CallStat) == ::llcpp::fuchsia::storage::metrics::CallStat::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::storage::metrics::FsMetrics> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::storage::metrics::FsMetrics>);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, create) == 0);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, read) == 80);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, write) == 160);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, truncate) == 240);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, unlink) == 320);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, rename) == 400);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, lookup) == 480);
static_assert(offsetof(::llcpp::fuchsia::storage::metrics::FsMetrics, open) == 560);
static_assert(sizeof(::llcpp::fuchsia::storage::metrics::FsMetrics) == ::llcpp::fuchsia::storage::metrics::FsMetrics::PrimarySize);

}  // namespace fidl
