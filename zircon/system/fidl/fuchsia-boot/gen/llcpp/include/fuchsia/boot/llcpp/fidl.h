// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/debuglog.h>
#include <lib/zx/job.h>
#include <lib/zx/resource.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace boot {

class RootJob;
class Log;
class Items;
class FactoryItems;
class RootResource;
class Arguments;

extern "C" const fidl_type_t fuchsia_boot_RootJobGetResponseTable;

// Protocol for providing the root job.
//
// TODO(ZX-4072): Do not use this without first consulting the Zircon team.
class RootJob final {
  RootJob() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.RootJob";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::job job;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_RootJobGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Get the root `job`.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get();

    // Get the root `job`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _response_buffer);

    // Get the root `job`.
    zx_status_t Get_Deprecated(::zx::job* out_job);

    // Get the root `job`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _response_buffer, ::zx::job* out_job);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Get the root `job`.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end);

    // Get the root `job`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Get the root `job`.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, ::zx::job* out_job);

    // Get the root `job`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::job* out_job);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Get the root `job`.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = RootJob;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::job job);
      void Reply(::fidl::BytePart _buffer, ::zx::job job);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_boot_LogGetResponseTable;

// Protocol for providing the kernel log.
class Log final {
  Log() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.Log";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::debuglog log;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_LogGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Get the kernel `log`.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get();

    // Get the kernel `log`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _response_buffer);

    // Get the kernel `log`.
    zx_status_t Get_Deprecated(::zx::debuglog* out_log);

    // Get the kernel `log`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _response_buffer, ::zx::debuglog* out_log);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Get the kernel `log`.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end);

    // Get the kernel `log`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Get the kernel `log`.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, ::zx::debuglog* out_log);

    // Get the kernel `log`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::debuglog* out_log);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Get the kernel `log`.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Log;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::debuglog log);
      void Reply(::fidl::BytePart _buffer, ::zx::debuglog log);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_boot_ItemsGetResponseTable;

// Protocol for retrieving boot item payloads.
class Items final {
  Items() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.Items";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo payload;
    uint32_t length;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_ItemsGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct GetRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t type;
    uint32_t extra;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetResponse;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, uint32_t type, uint32_t extra);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t type, uint32_t extra, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get(uint32_t type, uint32_t extra);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _request_buffer, uint32_t type, uint32_t extra, ::fidl::BytePart _response_buffer);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    zx_status_t Get_Deprecated(uint32_t type, uint32_t extra, ::zx::vmo* out_payload, uint32_t* out_length);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _request_buffer, uint32_t type, uint32_t extra, ::fidl::BytePart _response_buffer, ::zx::vmo* out_payload, uint32_t* out_length);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end, uint32_t type, uint32_t extra);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t type, uint32_t extra, ::fidl::BytePart _response_buffer);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, uint32_t type, uint32_t extra, ::zx::vmo* out_payload, uint32_t* out_length);

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t type, uint32_t extra, ::fidl::BytePart _response_buffer, ::zx::vmo* out_payload, uint32_t* out_length);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Get a `payload` for a boot item of `type` and `extra`.
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    //
    // For a list of `type`s, refer to <zircon/boot/image.h>.
    // For a list of `extra`s, refer to <zircon/boot/driver-config.h>.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Items;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::vmo payload, uint32_t length);
      void Reply(::fidl::BytePart _buffer, ::zx::vmo payload, uint32_t length);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(uint32_t type, uint32_t extra, GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_boot_FactoryItemsGetRequestTable;
extern "C" const fidl_type_t fuchsia_boot_FactoryItemsGetResponseTable;

// Protocol for retrieving factory boot item payloads.
class FactoryItems final {
  FactoryItems() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.FactoryItems";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo payload;
    uint32_t length;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_FactoryItemsGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct GetRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t extra;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_FactoryItemsGetRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetResponse;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, uint32_t extra);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t extra, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get(uint32_t extra);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _request_buffer, uint32_t extra, ::fidl::BytePart _response_buffer);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    zx_status_t Get_Deprecated(uint32_t extra, ::zx::vmo* out_payload, uint32_t* out_length);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _request_buffer, uint32_t extra, ::fidl::BytePart _response_buffer, ::zx::vmo* out_payload, uint32_t* out_length);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end, uint32_t extra);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t extra, ::fidl::BytePart _response_buffer);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, uint32_t extra, ::zx::vmo* out_payload, uint32_t* out_length);

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t extra, ::fidl::BytePart _response_buffer, ::zx::vmo* out_payload, uint32_t* out_length);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Gets a `payload` for a `ZBI_TYPE_STORAGE_BOOTFS_FACTORY` boot item with
    // extra field set to `extra`.
    //
    // NOTE: We return the `length` of the item, as VMOs must be page-aligned.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = FactoryItems;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::vmo payload, uint32_t length);
      void Reply(::fidl::BytePart _buffer, ::zx::vmo payload, uint32_t length);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(uint32_t extra, GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_boot_RootResourceGetResponseTable;

// Protocol for providing the root resource.
class RootResource final {
  RootResource() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.RootResource";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::resource resource;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_RootResourceGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Get the root |resource|.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get();

    // Get the root |resource|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _response_buffer);

    // Get the root |resource|.
    zx_status_t Get_Deprecated(::zx::resource* out_resource);

    // Get the root |resource|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _response_buffer, ::zx::resource* out_resource);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Get the root |resource|.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end);

    // Get the root |resource|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Get the root |resource|.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, ::zx::resource* out_resource);

    // Get the root |resource|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::resource* out_resource);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Get the root |resource|.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = RootResource;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::resource resource);
      void Reply(::fidl::BytePart _buffer, ::zx::resource resource);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_boot_ArgumentsGetResponseTable;

// Protocol for retrieving boot arguments.
class Arguments final {
  Arguments() = delete;
 public:
  static constexpr char Name[] = "fuchsia.boot.Arguments";

  struct GetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo vmo;
    uint64_t size;

    static constexpr const fidl_type_t* Type = &fuchsia_boot_ArgumentsGetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class Get_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Get_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~Get_Impl() = default;
      Get_Impl(Get_Impl&& other) = default;
      Get_Impl& operator=(Get_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Get = Get_Impl<GetResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Get Get();

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Get Get(::fidl::BytePart _response_buffer);

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    zx_status_t Get_Deprecated(::zx::vmo* out_vmo, uint64_t* out_size);

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetResponse> Get_Deprecated(::fidl::BytePart _response_buffer, ::zx::vmo* out_vmo, uint64_t* out_size);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Get Get(zx::unowned_channel _client_end);

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Get Get(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    static zx_status_t Get_Deprecated(zx::unowned_channel _client_end, ::zx::vmo* out_vmo, uint64_t* out_size);

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetResponse> Get_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::vmo* out_vmo, uint64_t* out_size);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Get a `vmo` containing boot arguments, along with the `size` of the boot
    // arguments contained within.
    static ::fidl::DecodeResult<GetResponse> Get(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Arguments;
    using _Base = ::fidl::CompleterBase;

    class GetCompleterBase : public _Base {
     public:
      void Reply(::zx::vmo vmo, uint64_t size);
      void Reply(::fidl::BytePart _buffer, ::zx::vmo vmo, uint64_t size);
      void Reply(::fidl::DecodedMessage<GetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCompleter = ::fidl::Completer<GetCompleterBase>;

    virtual void Get(GetCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace boot
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::boot::RootJob::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::RootJob::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::RootJob::GetResponse)
    == ::llcpp::fuchsia::boot::RootJob::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::RootJob::GetResponse, job) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::Log::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::Log::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::Log::GetResponse)
    == ::llcpp::fuchsia::boot::Log::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::Log::GetResponse, log) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::Items::GetRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::Items::GetRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::Items::GetRequest)
    == ::llcpp::fuchsia::boot::Items::GetRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::Items::GetRequest, type) == 16);
static_assert(offsetof(::llcpp::fuchsia::boot::Items::GetRequest, extra) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::Items::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::Items::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::Items::GetResponse)
    == ::llcpp::fuchsia::boot::Items::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::Items::GetResponse, payload) == 16);
static_assert(offsetof(::llcpp::fuchsia::boot::Items::GetResponse, length) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::FactoryItems::GetRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::FactoryItems::GetRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::FactoryItems::GetRequest)
    == ::llcpp::fuchsia::boot::FactoryItems::GetRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::FactoryItems::GetRequest, extra) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::FactoryItems::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::FactoryItems::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::FactoryItems::GetResponse)
    == ::llcpp::fuchsia::boot::FactoryItems::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::FactoryItems::GetResponse, payload) == 16);
static_assert(offsetof(::llcpp::fuchsia::boot::FactoryItems::GetResponse, length) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::RootResource::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::RootResource::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::RootResource::GetResponse)
    == ::llcpp::fuchsia::boot::RootResource::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::RootResource::GetResponse, resource) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::boot::Arguments::GetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::boot::Arguments::GetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::boot::Arguments::GetResponse)
    == ::llcpp::fuchsia::boot::Arguments::GetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::boot::Arguments::GetResponse, vmo) == 16);
static_assert(offsetof(::llcpp::fuchsia::boot::Arguments::GetResponse, size) == 24);

}  // namespace fidl
