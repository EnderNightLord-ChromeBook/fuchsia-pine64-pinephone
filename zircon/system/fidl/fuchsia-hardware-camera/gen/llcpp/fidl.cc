// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/hardware/camera/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace camera {

namespace {

[[maybe_unused]]
constexpr uint64_t kDevice_GetChannel_GenOrdinal = 0x762bbdf400000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_DeviceGetChannelRequestTable;

}  // namespace

Device::ResultOf::GetChannel_Impl::GetChannel_Impl(zx::unowned_channel _client_end, ::zx::channel ch) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChannelRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetChannelRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetChannelRequest*>(_write_bytes);
  _request.ch = std::move(ch);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChannelRequest));
  ::fidl::DecodedMessage<GetChannelRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Device::InPlace::GetChannel(std::move(_client_end), std::move(_decoded_request)));
}

Device::ResultOf::GetChannel Device::SyncClient::GetChannel(::zx::channel ch) {
  return ResultOf::GetChannel(zx::unowned_channel(this->channel_), std::move(ch));
}

Device::ResultOf::GetChannel Device::Call::GetChannel(zx::unowned_channel _client_end, ::zx::channel ch) {
  return ResultOf::GetChannel(std::move(_client_end), std::move(ch));
}


Device::UnownedResultOf::GetChannel_Impl::GetChannel_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel ch) {
  if (_request_buffer.capacity() < GetChannelRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, GetChannelRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetChannelRequest*>(_request_buffer.data());
  _request.ch = std::move(ch);
  _request_buffer.set_actual(sizeof(GetChannelRequest));
  ::fidl::DecodedMessage<GetChannelRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Device::InPlace::GetChannel(std::move(_client_end), std::move(_decoded_request)));
}

Device::UnownedResultOf::GetChannel Device::SyncClient::GetChannel(::fidl::BytePart _request_buffer, ::zx::channel ch) {
  return UnownedResultOf::GetChannel(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(ch));
}

Device::UnownedResultOf::GetChannel Device::Call::GetChannel(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel ch) {
  return UnownedResultOf::GetChannel(std::move(_client_end), std::move(_request_buffer), std::move(ch));
}

zx_status_t Device::SyncClient::GetChannel_Deprecated(::zx::channel ch) {
  return Device::Call::GetChannel_Deprecated(zx::unowned_channel(this->channel_), std::move(ch));
}

zx_status_t Device::Call::GetChannel_Deprecated(zx::unowned_channel _client_end, ::zx::channel ch) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChannelRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetChannelRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetChannel_GenOrdinal;
  _request.ch = std::move(ch);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChannelRequest));
  ::fidl::DecodedMessage<GetChannelRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Device::SyncClient::GetChannel_Deprecated(::fidl::BytePart _request_buffer, ::zx::channel ch) {
  return Device::Call::GetChannel_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(ch));
}

zx_status_t Device::Call::GetChannel_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel ch) {
  if (_request_buffer.capacity() < GetChannelRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<GetChannelRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetChannel_GenOrdinal;
  _request.ch = std::move(ch);
  _request_buffer.set_actual(sizeof(GetChannelRequest));
  ::fidl::DecodedMessage<GetChannelRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Device::InPlace::GetChannel(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetChannelRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetChannel_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


bool Device::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kDevice_GetChannel_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetChannelRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetChannel(std::move(message->ch),
        Interface::GetChannelCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Device::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


namespace {

[[maybe_unused]]
constexpr uint64_t kStream_Start_GenOrdinal = 0x7be63a0500000000lu;
[[maybe_unused]]
constexpr uint64_t kStream_Stop_GenOrdinal = 0x6b8b9ce500000000lu;
[[maybe_unused]]
constexpr uint64_t kStream_ReleaseFrame_GenOrdinal = 0x653632e100000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_StreamReleaseFrameRequestTable;
[[maybe_unused]]
constexpr uint64_t kStream_OnFrameAvailable_GenOrdinal = 0x26e2153e00000000lu;

}  // namespace

Stream::ResultOf::Start_Impl::Start_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StartRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, StartRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(StartRequest));
  ::fidl::DecodedMessage<StartRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Stream::InPlace::Start(std::move(_client_end)));
}

Stream::ResultOf::Start Stream::SyncClient::Start() {
  return ResultOf::Start(zx::unowned_channel(this->channel_));
}

Stream::ResultOf::Start Stream::Call::Start(zx::unowned_channel _client_end) {
  return ResultOf::Start(std::move(_client_end));
}

zx_status_t Stream::SyncClient::Start_Deprecated() {
  return Stream::Call::Start_Deprecated(zx::unowned_channel(this->channel_));
}

zx_status_t Stream::Call::Start_Deprecated(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StartRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<StartRequest*>(_write_bytes);
  _request._hdr.ordinal = kStream_Start_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(StartRequest));
  ::fidl::DecodedMessage<StartRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Stream::InPlace::Start(zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(StartRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<StartRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStream_Start_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


Stream::ResultOf::Stop_Impl::Stop_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StopRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, StopRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(StopRequest));
  ::fidl::DecodedMessage<StopRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Stream::InPlace::Stop(std::move(_client_end)));
}

Stream::ResultOf::Stop Stream::SyncClient::Stop() {
  return ResultOf::Stop(zx::unowned_channel(this->channel_));
}

Stream::ResultOf::Stop Stream::Call::Stop(zx::unowned_channel _client_end) {
  return ResultOf::Stop(std::move(_client_end));
}

zx_status_t Stream::SyncClient::Stop_Deprecated() {
  return Stream::Call::Stop_Deprecated(zx::unowned_channel(this->channel_));
}

zx_status_t Stream::Call::Stop_Deprecated(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StopRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<StopRequest*>(_write_bytes);
  _request._hdr.ordinal = kStream_Stop_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(StopRequest));
  ::fidl::DecodedMessage<StopRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Stream::InPlace::Stop(zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(StopRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<StopRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStream_Stop_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


Stream::ResultOf::ReleaseFrame_Impl::ReleaseFrame_Impl(zx::unowned_channel _client_end, uint32_t buffer_id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ReleaseFrameRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, ReleaseFrameRequest::PrimarySize);
  auto& _request = *reinterpret_cast<ReleaseFrameRequest*>(_write_bytes);
  _request.buffer_id = std::move(buffer_id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ReleaseFrameRequest));
  ::fidl::DecodedMessage<ReleaseFrameRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Stream::InPlace::ReleaseFrame(std::move(_client_end), std::move(_decoded_request)));
}

Stream::ResultOf::ReleaseFrame Stream::SyncClient::ReleaseFrame(uint32_t buffer_id) {
  return ResultOf::ReleaseFrame(zx::unowned_channel(this->channel_), std::move(buffer_id));
}

Stream::ResultOf::ReleaseFrame Stream::Call::ReleaseFrame(zx::unowned_channel _client_end, uint32_t buffer_id) {
  return ResultOf::ReleaseFrame(std::move(_client_end), std::move(buffer_id));
}


Stream::UnownedResultOf::ReleaseFrame_Impl::ReleaseFrame_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t buffer_id) {
  if (_request_buffer.capacity() < ReleaseFrameRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, ReleaseFrameRequest::PrimarySize);
  auto& _request = *reinterpret_cast<ReleaseFrameRequest*>(_request_buffer.data());
  _request.buffer_id = std::move(buffer_id);
  _request_buffer.set_actual(sizeof(ReleaseFrameRequest));
  ::fidl::DecodedMessage<ReleaseFrameRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Stream::InPlace::ReleaseFrame(std::move(_client_end), std::move(_decoded_request)));
}

Stream::UnownedResultOf::ReleaseFrame Stream::SyncClient::ReleaseFrame(::fidl::BytePart _request_buffer, uint32_t buffer_id) {
  return UnownedResultOf::ReleaseFrame(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_id));
}

Stream::UnownedResultOf::ReleaseFrame Stream::Call::ReleaseFrame(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t buffer_id) {
  return UnownedResultOf::ReleaseFrame(std::move(_client_end), std::move(_request_buffer), std::move(buffer_id));
}

zx_status_t Stream::SyncClient::ReleaseFrame_Deprecated(uint32_t buffer_id) {
  return Stream::Call::ReleaseFrame_Deprecated(zx::unowned_channel(this->channel_), std::move(buffer_id));
}

zx_status_t Stream::Call::ReleaseFrame_Deprecated(zx::unowned_channel _client_end, uint32_t buffer_id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ReleaseFrameRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<ReleaseFrameRequest*>(_write_bytes);
  _request._hdr.ordinal = kStream_ReleaseFrame_GenOrdinal;
  _request.buffer_id = std::move(buffer_id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ReleaseFrameRequest));
  ::fidl::DecodedMessage<ReleaseFrameRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Stream::SyncClient::ReleaseFrame_Deprecated(::fidl::BytePart _request_buffer, uint32_t buffer_id) {
  return Stream::Call::ReleaseFrame_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_id));
}

zx_status_t Stream::Call::ReleaseFrame_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t buffer_id) {
  if (_request_buffer.capacity() < ReleaseFrameRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<ReleaseFrameRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kStream_ReleaseFrame_GenOrdinal;
  _request.buffer_id = std::move(buffer_id);
  _request_buffer.set_actual(sizeof(ReleaseFrameRequest));
  ::fidl::DecodedMessage<ReleaseFrameRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Stream::InPlace::ReleaseFrame(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ReleaseFrameRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStream_ReleaseFrame_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

zx_status_t Stream::SyncClient::HandleEvents(Stream::EventHandlers handlers) {
  return Stream::Call::HandleEvents(zx::unowned_channel(channel_), std::move(handlers));
}

zx_status_t Stream::Call::HandleEvents(zx::unowned_channel client_end,
                                            Stream::EventHandlers handlers) {
  zx_status_t status = client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                            zx::time::infinite(),
                                            nullptr);
  if (status != ZX_OK) {
    return status;
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<OnFrameAvailableResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<OnFrameAvailableResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (OnFrameAvailableResponse::MaxNumHandles >= x) {
      x = OnFrameAvailableResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  FIDL_ALIGNDECL uint8_t read_bytes[kReadAllocSize];
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD,
                            read_bytes, read_handles,
                            kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new event,
    // whose size exceeds the maximum of known events in the current protocol.
    return handlers.unknown();
  }
  if (status != ZX_OK) {
    return status;
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ZX_ERR_INVALID_ARGS;
  }
  auto msg = fidl_msg_t {
    .bytes = read_bytes,
    .handles = read_handles,
    .num_bytes = actual_bytes,
    .num_handles = actual_handles
  };
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg.bytes);
  switch (hdr->ordinal) {
    case kStream_OnFrameAvailable_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<OnFrameAvailableResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      auto message = result.message.message();
      return handlers.on_frame_available(std::move(message->frame));
    }
    default:
      zx_handle_close_many(read_handles, actual_handles);
      return handlers.unknown();
  }
}

bool Stream::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kStream_Start_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<StartRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Start(
        Interface::StartCompleter::Sync(txn));
      return true;
    }
    case kStream_Stop_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<StopRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Stop(
        Interface::StopCompleter::Sync(txn));
      return true;
    }
    case kStream_ReleaseFrame_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<ReleaseFrameRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->ReleaseFrame(std::move(message->buffer_id),
        Interface::ReleaseFrameCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Stream::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t Stream::SendOnFrameAvailableEvent(::zx::unowned_channel _chan, FrameAvailableEvent frame) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnFrameAvailableResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<OnFrameAvailableResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kStream_OnFrameAvailable_GenOrdinal;
  _response.frame = std::move(frame);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(OnFrameAvailableResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<OnFrameAvailableResponse>(std::move(_response_bytes)));
}

zx_status_t Stream::SendOnFrameAvailableEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, FrameAvailableEvent frame) {
  if (_buffer.capacity() < OnFrameAvailableResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _response = *reinterpret_cast<OnFrameAvailableResponse*>(_buffer.data());
  _response._hdr = {};
  _response._hdr.ordinal = kStream_OnFrameAvailable_GenOrdinal;
  _response.frame = std::move(frame);
  _buffer.set_actual(sizeof(OnFrameAvailableResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<OnFrameAvailableResponse>(std::move(_buffer)));
}

zx_status_t Stream::SendOnFrameAvailableEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<OnFrameAvailableResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStream_OnFrameAvailable_GenOrdinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint64_t kControl_GetFormats_GenOrdinal = 0x9a9a4d000000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlGetFormatsRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlGetFormatsResponseTable;
[[maybe_unused]]
constexpr uint64_t kControl_CreateStream_GenOrdinal = 0x6779a82300000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlCreateStreamRequestTable;
[[maybe_unused]]
constexpr uint64_t kControl_GetDeviceInfo_GenOrdinal = 0x47c292bb00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlGetDeviceInfoResponseTable;

}  // namespace
template <>
Control::ResultOf::GetFormats_Impl<Control::GetFormatsResponse>::GetFormats_Impl(zx::unowned_channel _client_end, uint32_t index) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetFormatsRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_write_bytes);
  _request.index = std::move(index);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetFormats(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Control::ResultOf::GetFormats Control::SyncClient::GetFormats(uint32_t index) {
  return ResultOf::GetFormats(zx::unowned_channel(this->channel_), std::move(index));
}

Control::ResultOf::GetFormats Control::Call::GetFormats(zx::unowned_channel _client_end, uint32_t index) {
  return ResultOf::GetFormats(std::move(_client_end), std::move(index));
}

template <>
Control::UnownedResultOf::GetFormats_Impl<Control::GetFormatsResponse>::GetFormats_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetFormatsRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetFormatsResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetFormatsRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_request_buffer.data());
  _request.index = std::move(index);
  _request_buffer.set_actual(sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetFormats(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetFormats Control::SyncClient::GetFormats(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFormats(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

Control::UnownedResultOf::GetFormats Control::Call::GetFormats(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFormats(std::move(_client_end), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::GetFormats_Deprecated(uint32_t index, ::fidl::Array<VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  return Control::Call::GetFormats_Deprecated(zx::unowned_channel(this->channel_), std::move(index), out_formats, out_total_format_count, out_actual_format_count, out_status);
}

zx_status_t Control::Call::GetFormats_Deprecated(zx::unowned_channel _client_end, uint32_t index, ::fidl::Array<VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_GetFormats_GenOrdinal;
  _request.index = std::move(index);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsResponse, ::fidl::MessageDirection::kReceiving>();
  std::unique_ptr<uint8_t[]> _read_bytes_unique_ptr(new uint8_t[_kReadAllocSize]);
  uint8_t* _read_bytes = _read_bytes_unique_ptr.get();
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_formats = std::move(_response.formats);
  *out_total_format_count = std::move(_response.total_format_count);
  *out_actual_format_count = std::move(_response.actual_format_count);
  *out_status = std::move(_response.status);
  return ZX_OK;
}

::fidl::DecodeResult<Control::GetFormatsResponse> Control::SyncClient::GetFormats_Deprecated(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer, ::fidl::Array<VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  return Control::Call::GetFormats_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(index), std::move(_response_buffer), out_formats, out_total_format_count, out_actual_format_count, out_status);
}

::fidl::DecodeResult<Control::GetFormatsResponse> Control::Call::GetFormats_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer, ::fidl::Array<VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  if (_request_buffer.capacity() < GetFormatsRequest::PrimarySize) {
    return ::fidl::DecodeResult<GetFormatsResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetFormats_GenOrdinal;
  _request.index = std::move(index);
  _request_buffer.set_actual(sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetFormatsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetFormatsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_formats = std::move(_response.formats);
  *out_total_format_count = std::move(_response.total_format_count);
  *out_actual_format_count = std::move(_response.actual_format_count);
  *out_status = std::move(_response.status);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetFormatsResponse> Control::InPlace::GetFormats(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetFormatsRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetFormats_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetFormatsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetFormatsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


Control::ResultOf::CreateStream_Impl::CreateStream_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CreateStreamRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, CreateStreamRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_write_bytes);
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Control::InPlace::CreateStream(std::move(_client_end), std::move(_decoded_request)));
}

Control::ResultOf::CreateStream Control::SyncClient::CreateStream(::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ResultOf::CreateStream(zx::unowned_channel(this->channel_), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

Control::ResultOf::CreateStream Control::Call::CreateStream(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ResultOf::CreateStream(std::move(_client_end), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}


Control::UnownedResultOf::CreateStream_Impl::CreateStream_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  if (_request_buffer.capacity() < CreateStreamRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, CreateStreamRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_request_buffer.data());
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  _request_buffer.set_actual(sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Control::InPlace::CreateStream(std::move(_client_end), std::move(_decoded_request)));
}

Control::UnownedResultOf::CreateStream Control::SyncClient::CreateStream(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return UnownedResultOf::CreateStream(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

Control::UnownedResultOf::CreateStream Control::Call::CreateStream(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return UnownedResultOf::CreateStream(std::move(_client_end), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t Control::SyncClient::CreateStream_Deprecated(::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return Control::Call::CreateStream_Deprecated(zx::unowned_channel(this->channel_), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t Control::Call::CreateStream_Deprecated(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CreateStreamRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_CreateStream_GenOrdinal;
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Control::SyncClient::CreateStream_Deprecated(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return Control::Call::CreateStream_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t Control::Call::CreateStream_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  if (_request_buffer.capacity() < CreateStreamRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_CreateStream_GenOrdinal;
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  _request_buffer.set_actual(sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Control::InPlace::CreateStream(zx::unowned_channel _client_end, ::fidl::DecodedMessage<CreateStreamRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_CreateStream_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

template <>
Control::ResultOf::GetDeviceInfo_Impl<Control::GetDeviceInfoResponse>::GetDeviceInfo_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetDeviceInfoRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Control::InPlace::GetDeviceInfo(std::move(_client_end), Super::response_buffer()));
}

Control::ResultOf::GetDeviceInfo Control::SyncClient::GetDeviceInfo() {
  return ResultOf::GetDeviceInfo(zx::unowned_channel(this->channel_));
}

Control::ResultOf::GetDeviceInfo Control::Call::GetDeviceInfo(zx::unowned_channel _client_end) {
  return ResultOf::GetDeviceInfo(std::move(_client_end));
}

template <>
Control::UnownedResultOf::GetDeviceInfo_Impl<Control::GetDeviceInfoResponse>::GetDeviceInfo_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetDeviceInfoRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetDeviceInfoRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Control::InPlace::GetDeviceInfo(std::move(_client_end), std::move(_response_buffer)));
}

Control::UnownedResultOf::GetDeviceInfo Control::SyncClient::GetDeviceInfo(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetDeviceInfo(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Control::UnownedResultOf::GetDeviceInfo Control::Call::GetDeviceInfo(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetDeviceInfo(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Control::SyncClient::GetDeviceInfo_Deprecated(DeviceInfo* out_device_info) {
  return Control::Call::GetDeviceInfo_Deprecated(zx::unowned_channel(this->channel_), out_device_info);
}

zx_status_t Control::Call::GetDeviceInfo_Deprecated(zx::unowned_channel _client_end, DeviceInfo* out_device_info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetDeviceInfoRequest*>(_write_bytes);
  _request._hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_device_info = std::move(_response.device_info);
  return ZX_OK;
}

::fidl::DecodeResult<Control::GetDeviceInfoResponse> Control::SyncClient::GetDeviceInfo_Deprecated(::fidl::BytePart _response_buffer, DeviceInfo* out_device_info) {
  return Control::Call::GetDeviceInfo_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_device_info);
}

::fidl::DecodeResult<Control::GetDeviceInfoResponse> Control::Call::GetDeviceInfo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, DeviceInfo* out_device_info) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetDeviceInfoRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetDeviceInfoRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetDeviceInfoResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetDeviceInfoResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_device_info = std::move(_response.device_info);
  return _decode_result;
}

::fidl::DecodeResult<Control::GetDeviceInfoResponse> Control::InPlace::GetDeviceInfo(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetDeviceInfoRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetDeviceInfoRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetDeviceInfoResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Control::GetDeviceInfoResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Control::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kControl_GetFormats_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetFormatsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetFormats(std::move(message->index),
        Interface::GetFormatsCompleter::Sync(txn));
      return true;
    }
    case kControl_CreateStream_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<CreateStreamRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->CreateStream(std::move(message->buffer_collection), std::move(message->rate), std::move(message->stream), std::move(message->stream_token),
        Interface::CreateStreamCompleter::Sync(txn));
      return true;
    }
    case kControl_GetDeviceInfo_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetDeviceInfoRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetDeviceInfo(
        Interface::GetDeviceInfoCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Control::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Control::Interface::GetFormatsCompleterBase::Reply(::fidl::Array<VideoFormat, 16> formats, uint32_t total_format_count, uint32_t actual_format_count, int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  auto& _response = *reinterpret_cast<GetFormatsResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_GetFormats_GenOrdinal;
  _response.formats = std::move(formats);
  _response.total_format_count = std::move(total_format_count);
  _response.actual_format_count = std::move(actual_format_count);
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFormatsResponse>(std::move(_response_bytes)));
}

void Control::Interface::GetFormatsCompleterBase::Reply(::fidl::BytePart _buffer, ::fidl::Array<VideoFormat, 16> formats, uint32_t total_format_count, uint32_t actual_format_count, int32_t status) {
  if (_buffer.capacity() < GetFormatsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetFormatsResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_GetFormats_GenOrdinal;
  _response.formats = std::move(formats);
  _response.total_format_count = std::move(total_format_count);
  _response.actual_format_count = std::move(actual_format_count);
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(GetFormatsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFormatsResponse>(std::move(_buffer)));
}

void Control::Interface::GetFormatsCompleterBase::Reply(::fidl::DecodedMessage<GetFormatsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetFormats_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Control::Interface::GetDeviceInfoCompleterBase::Reply(DeviceInfo device_info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetDeviceInfoResponse*>(_write_bytes);
  _response._hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  _response.device_info = std::move(device_info);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetDeviceInfoResponse>(std::move(_response_bytes)));
}

void Control::Interface::GetDeviceInfoCompleterBase::Reply(::fidl::BytePart _buffer, DeviceInfo device_info) {
  if (_buffer.capacity() < GetDeviceInfoResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetDeviceInfoResponse*>(_buffer.data());
  _response._hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  _response.device_info = std::move(device_info);
  _buffer.set_actual(sizeof(GetDeviceInfoResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetDeviceInfoResponse>(std::move(_buffer)));
}

void Control::Interface::GetDeviceInfoCompleterBase::Reply(::fidl::DecodedMessage<GetDeviceInfoResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControl_GetDeviceInfo_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint64_t kControlV2_GetFormats_GenOrdinal = 0x6d106c5d00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlV2GetFormatsRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlV2GetFormatsResponseTable;
[[maybe_unused]]
constexpr uint64_t kControlV2_CreateStream_GenOrdinal = 0x5f68265c00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlV2CreateStreamRequestTable;
[[maybe_unused]]
constexpr uint64_t kControlV2_GetDeviceInfo_GenOrdinal = 0x5bc1df8500000000lu;
extern "C" const fidl_type_t fuchsia_hardware_camera_ControlV2GetDeviceInfoResponseTable;

}  // namespace
template <>
ControlV2::ResultOf::GetFormats_Impl<ControlV2::GetFormatsResponse>::GetFormats_Impl(zx::unowned_channel _client_end, uint32_t index) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetFormatsRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_write_bytes);
  _request.index = std::move(index);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      ControlV2::InPlace::GetFormats(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

ControlV2::ResultOf::GetFormats ControlV2::SyncClient::GetFormats(uint32_t index) {
  return ResultOf::GetFormats(zx::unowned_channel(this->channel_), std::move(index));
}

ControlV2::ResultOf::GetFormats ControlV2::Call::GetFormats(zx::unowned_channel _client_end, uint32_t index) {
  return ResultOf::GetFormats(std::move(_client_end), std::move(index));
}

template <>
ControlV2::UnownedResultOf::GetFormats_Impl<ControlV2::GetFormatsResponse>::GetFormats_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetFormatsRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetFormatsResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetFormatsRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_request_buffer.data());
  _request.index = std::move(index);
  _request_buffer.set_actual(sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      ControlV2::InPlace::GetFormats(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

ControlV2::UnownedResultOf::GetFormats ControlV2::SyncClient::GetFormats(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFormats(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

ControlV2::UnownedResultOf::GetFormats ControlV2::Call::GetFormats(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFormats(std::move(_client_end), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

zx_status_t ControlV2::SyncClient::GetFormats_Deprecated(uint32_t index, ::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  return ControlV2::Call::GetFormats_Deprecated(zx::unowned_channel(this->channel_), std::move(index), out_formats, out_total_format_count, out_actual_format_count, out_status);
}

zx_status_t ControlV2::Call::GetFormats_Deprecated(zx::unowned_channel _client_end, uint32_t index, ::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_write_bytes);
  _request._hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  _request.index = std::move(index);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsResponse, ::fidl::MessageDirection::kReceiving>();
  std::unique_ptr<uint8_t[]> _read_bytes_unique_ptr(new uint8_t[_kReadAllocSize]);
  uint8_t* _read_bytes = _read_bytes_unique_ptr.get();
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_formats = std::move(_response.formats);
  *out_total_format_count = std::move(_response.total_format_count);
  *out_actual_format_count = std::move(_response.actual_format_count);
  *out_status = std::move(_response.status);
  return ZX_OK;
}

::fidl::DecodeResult<ControlV2::GetFormatsResponse> ControlV2::SyncClient::GetFormats_Deprecated(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer, ::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  return ControlV2::Call::GetFormats_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(index), std::move(_response_buffer), out_formats, out_total_format_count, out_actual_format_count, out_status);
}

::fidl::DecodeResult<ControlV2::GetFormatsResponse> ControlV2::Call::GetFormats_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer, ::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16>* out_formats, uint32_t* out_total_format_count, uint32_t* out_actual_format_count, int32_t* out_status) {
  if (_request_buffer.capacity() < GetFormatsRequest::PrimarySize) {
    return ::fidl::DecodeResult<GetFormatsResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<GetFormatsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  _request.index = std::move(index);
  _request_buffer.set_actual(sizeof(GetFormatsRequest));
  ::fidl::DecodedMessage<GetFormatsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetFormatsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetFormatsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_formats = std::move(_response.formats);
  *out_total_format_count = std::move(_response.total_format_count);
  *out_actual_format_count = std::move(_response.actual_format_count);
  *out_status = std::move(_response.status);
  return _decode_result;
}

::fidl::DecodeResult<ControlV2::GetFormatsResponse> ControlV2::InPlace::GetFormats(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetFormatsRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ControlV2::GetFormatsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetFormatsRequest, GetFormatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ControlV2::GetFormatsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


ControlV2::ResultOf::CreateStream_Impl::CreateStream_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CreateStreamRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, CreateStreamRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_write_bytes);
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      ControlV2::InPlace::CreateStream(std::move(_client_end), std::move(_decoded_request)));
}

ControlV2::ResultOf::CreateStream ControlV2::SyncClient::CreateStream(::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ResultOf::CreateStream(zx::unowned_channel(this->channel_), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

ControlV2::ResultOf::CreateStream ControlV2::Call::CreateStream(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ResultOf::CreateStream(std::move(_client_end), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}


ControlV2::UnownedResultOf::CreateStream_Impl::CreateStream_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  if (_request_buffer.capacity() < CreateStreamRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, CreateStreamRequest::PrimarySize);
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_request_buffer.data());
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  _request_buffer.set_actual(sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      ControlV2::InPlace::CreateStream(std::move(_client_end), std::move(_decoded_request)));
}

ControlV2::UnownedResultOf::CreateStream ControlV2::SyncClient::CreateStream(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return UnownedResultOf::CreateStream(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

ControlV2::UnownedResultOf::CreateStream ControlV2::Call::CreateStream(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return UnownedResultOf::CreateStream(std::move(_client_end), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t ControlV2::SyncClient::CreateStream_Deprecated(::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ControlV2::Call::CreateStream_Deprecated(zx::unowned_channel(this->channel_), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t ControlV2::Call::CreateStream_Deprecated(zx::unowned_channel _client_end, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<CreateStreamRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_write_bytes);
  _request._hdr.ordinal = kControlV2_CreateStream_GenOrdinal;
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t ControlV2::SyncClient::CreateStream_Deprecated(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  return ControlV2::Call::CreateStream_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(buffer_collection), std::move(rate), std::move(stream), std::move(stream_token));
}

zx_status_t ControlV2::Call::CreateStream_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::sysmem::BufferCollectionInfo buffer_collection, ::llcpp::fuchsia::camera::common::FrameRate rate, ::zx::channel stream, ::zx::eventpair stream_token) {
  if (_request_buffer.capacity() < CreateStreamRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<CreateStreamRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControlV2_CreateStream_GenOrdinal;
  _request.buffer_collection = std::move(buffer_collection);
  _request.rate = std::move(rate);
  _request.stream = std::move(stream);
  _request.stream_token = std::move(stream_token);
  _request_buffer.set_actual(sizeof(CreateStreamRequest));
  ::fidl::DecodedMessage<CreateStreamRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError ControlV2::InPlace::CreateStream(zx::unowned_channel _client_end, ::fidl::DecodedMessage<CreateStreamRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControlV2_CreateStream_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

template <>
ControlV2::ResultOf::GetDeviceInfo_Impl<ControlV2::GetDeviceInfoResponse>::GetDeviceInfo_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetDeviceInfoRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      ControlV2::InPlace::GetDeviceInfo(std::move(_client_end), Super::response_buffer()));
}

ControlV2::ResultOf::GetDeviceInfo ControlV2::SyncClient::GetDeviceInfo() {
  return ResultOf::GetDeviceInfo(zx::unowned_channel(this->channel_));
}

ControlV2::ResultOf::GetDeviceInfo ControlV2::Call::GetDeviceInfo(zx::unowned_channel _client_end) {
  return ResultOf::GetDeviceInfo(std::move(_client_end));
}

template <>
ControlV2::UnownedResultOf::GetDeviceInfo_Impl<ControlV2::GetDeviceInfoResponse>::GetDeviceInfo_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetDeviceInfoRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetDeviceInfoRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      ControlV2::InPlace::GetDeviceInfo(std::move(_client_end), std::move(_response_buffer)));
}

ControlV2::UnownedResultOf::GetDeviceInfo ControlV2::SyncClient::GetDeviceInfo(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetDeviceInfo(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

ControlV2::UnownedResultOf::GetDeviceInfo ControlV2::Call::GetDeviceInfo(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetDeviceInfo(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t ControlV2::SyncClient::GetDeviceInfo_Deprecated(DeviceInfo* out_device_info) {
  return ControlV2::Call::GetDeviceInfo_Deprecated(zx::unowned_channel(this->channel_), out_device_info);
}

zx_status_t ControlV2::Call::GetDeviceInfo_Deprecated(zx::unowned_channel _client_end, DeviceInfo* out_device_info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetDeviceInfoRequest*>(_write_bytes);
  _request._hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_device_info = std::move(_response.device_info);
  return ZX_OK;
}

::fidl::DecodeResult<ControlV2::GetDeviceInfoResponse> ControlV2::SyncClient::GetDeviceInfo_Deprecated(::fidl::BytePart _response_buffer, DeviceInfo* out_device_info) {
  return ControlV2::Call::GetDeviceInfo_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_device_info);
}

::fidl::DecodeResult<ControlV2::GetDeviceInfoResponse> ControlV2::Call::GetDeviceInfo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, DeviceInfo* out_device_info) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetDeviceInfoRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetDeviceInfoRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetDeviceInfoRequest));
  ::fidl::DecodedMessage<GetDeviceInfoRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetDeviceInfoResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetDeviceInfoResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_device_info = std::move(_response.device_info);
  return _decode_result;
}

::fidl::DecodeResult<ControlV2::GetDeviceInfoResponse> ControlV2::InPlace::GetDeviceInfo(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetDeviceInfoRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetDeviceInfoRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ControlV2::GetDeviceInfoResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetDeviceInfoRequest, GetDeviceInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ControlV2::GetDeviceInfoResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool ControlV2::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kControlV2_GetFormats_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetFormatsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetFormats(std::move(message->index),
        Interface::GetFormatsCompleter::Sync(txn));
      return true;
    }
    case kControlV2_CreateStream_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<CreateStreamRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->CreateStream(std::move(message->buffer_collection), std::move(message->rate), std::move(message->stream), std::move(message->stream_token),
        Interface::CreateStreamCompleter::Sync(txn));
      return true;
    }
    case kControlV2_GetDeviceInfo_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetDeviceInfoRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetDeviceInfo(
        Interface::GetDeviceInfoCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool ControlV2::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void ControlV2::Interface::GetFormatsCompleterBase::Reply(::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16> formats, uint32_t total_format_count, uint32_t actual_format_count, int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFormatsResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  auto& _response = *reinterpret_cast<GetFormatsResponse*>(_write_bytes);
  _response._hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  _response.formats = std::move(formats);
  _response.total_format_count = std::move(total_format_count);
  _response.actual_format_count = std::move(actual_format_count);
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFormatsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFormatsResponse>(std::move(_response_bytes)));
}

void ControlV2::Interface::GetFormatsCompleterBase::Reply(::fidl::BytePart _buffer, ::fidl::Array<::llcpp::fuchsia::camera::common::VideoFormat, 16> formats, uint32_t total_format_count, uint32_t actual_format_count, int32_t status) {
  if (_buffer.capacity() < GetFormatsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetFormatsResponse*>(_buffer.data());
  _response._hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  _response.formats = std::move(formats);
  _response.total_format_count = std::move(total_format_count);
  _response.actual_format_count = std::move(actual_format_count);
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(GetFormatsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFormatsResponse>(std::move(_buffer)));
}

void ControlV2::Interface::GetFormatsCompleterBase::Reply(::fidl::DecodedMessage<GetFormatsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControlV2_GetFormats_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void ControlV2::Interface::GetDeviceInfoCompleterBase::Reply(DeviceInfo device_info) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetDeviceInfoResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetDeviceInfoResponse*>(_write_bytes);
  _response._hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  _response.device_info = std::move(device_info);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetDeviceInfoResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetDeviceInfoResponse>(std::move(_response_bytes)));
}

void ControlV2::Interface::GetDeviceInfoCompleterBase::Reply(::fidl::BytePart _buffer, DeviceInfo device_info) {
  if (_buffer.capacity() < GetDeviceInfoResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetDeviceInfoResponse*>(_buffer.data());
  _response._hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  _response.device_info = std::move(device_info);
  _buffer.set_actual(sizeof(GetDeviceInfoResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetDeviceInfoResponse>(std::move(_buffer)));
}

void ControlV2::Interface::GetDeviceInfoCompleterBase::Reply(::fidl::DecodedMessage<GetDeviceInfoResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kControlV2_GetDeviceInfo_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace camera
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp
