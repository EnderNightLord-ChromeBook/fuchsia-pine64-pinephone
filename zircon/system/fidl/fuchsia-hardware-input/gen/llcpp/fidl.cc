// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/hardware/input/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace input {

namespace {

[[maybe_unused]]
constexpr uint64_t kDevice_GetBootProtocol_GenOrdinal = 0x47ac8ff500000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetBootProtocolResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetReportDescSize_GenOrdinal = 0x312dbbe100000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportDescSizeResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetReportDesc_GenOrdinal = 0x6ae0c2f200000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportDescResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetNumReports_GenOrdinal = 0x79b0ee200000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetNumReportsResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetReportIds_GenOrdinal = 0x74f7d94f00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportIdsResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetReportSize_GenOrdinal = 0x22e76cac00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportSizeRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportSizeResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetMaxInputReportSize_GenOrdinal = 0x4e9ab77400000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetMaxInputReportSizeResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetReport_GenOrdinal = 0x2a267cd000000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceGetReportResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_SetReport_GenOrdinal = 0x14ff63cb00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceSetReportRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceSetReportResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_SetTraceId_GenOrdinal = 0x67de25bb00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_input_DeviceSetTraceIdRequestTable;

}  // namespace
template <>
Device::ResultOf::GetBootProtocol_Impl<Device::GetBootProtocolResponse>::GetBootProtocol_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetBootProtocolRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetBootProtocolRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetBootProtocolRequest));
  ::fidl::DecodedMessage<GetBootProtocolRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetBootProtocol(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetBootProtocol Device::SyncClient::GetBootProtocol() {
  return ResultOf::GetBootProtocol(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetBootProtocol Device::Call::GetBootProtocol(zx::unowned_channel _client_end) {
  return ResultOf::GetBootProtocol(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetBootProtocol_Impl<Device::GetBootProtocolResponse>::GetBootProtocol_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetBootProtocolRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetBootProtocolRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetBootProtocolRequest));
  ::fidl::DecodedMessage<GetBootProtocolRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetBootProtocol(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetBootProtocol Device::SyncClient::GetBootProtocol(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetBootProtocol(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetBootProtocol Device::Call::GetBootProtocol(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetBootProtocol(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetBootProtocol_Deprecated(BootProtocol* out_protocol) {
  return Device::Call::GetBootProtocol_Deprecated(zx::unowned_channel(this->channel_), out_protocol);
}

zx_status_t Device::Call::GetBootProtocol_Deprecated(zx::unowned_channel _client_end, BootProtocol* out_protocol) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetBootProtocolRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetBootProtocolRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetBootProtocolRequest));
  ::fidl::DecodedMessage<GetBootProtocolRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetBootProtocolResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetBootProtocolRequest, GetBootProtocolResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_protocol = std::move(_response.protocol);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetBootProtocolResponse> Device::SyncClient::GetBootProtocol_Deprecated(::fidl::BytePart _response_buffer, BootProtocol* out_protocol) {
  return Device::Call::GetBootProtocol_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_protocol);
}

::fidl::DecodeResult<Device::GetBootProtocolResponse> Device::Call::GetBootProtocol_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, BootProtocol* out_protocol) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetBootProtocolRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetBootProtocolRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetBootProtocolRequest));
  ::fidl::DecodedMessage<GetBootProtocolRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetBootProtocolResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetBootProtocolRequest, GetBootProtocolResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetBootProtocolResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_protocol = std::move(_response.protocol);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetBootProtocolResponse> Device::InPlace::GetBootProtocol(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetBootProtocolRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetBootProtocolRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetBootProtocolResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetBootProtocolRequest, GetBootProtocolResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetBootProtocolResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetReportDescSize_Impl<Device::GetReportDescSizeResponse>::GetReportDescSize_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescSizeRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetReportDescSizeRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportDescSizeRequest));
  ::fidl::DecodedMessage<GetReportDescSizeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetReportDescSize(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetReportDescSize Device::SyncClient::GetReportDescSize() {
  return ResultOf::GetReportDescSize(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetReportDescSize Device::Call::GetReportDescSize(zx::unowned_channel _client_end) {
  return ResultOf::GetReportDescSize(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetReportDescSize_Impl<Device::GetReportDescSizeResponse>::GetReportDescSize_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportDescSizeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetReportDescSizeRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetReportDescSizeRequest));
  ::fidl::DecodedMessage<GetReportDescSizeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetReportDescSize(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetReportDescSize Device::SyncClient::GetReportDescSize(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportDescSize(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetReportDescSize Device::Call::GetReportDescSize(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportDescSize(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetReportDescSize_Deprecated(uint16_t* out_size) {
  return Device::Call::GetReportDescSize_Deprecated(zx::unowned_channel(this->channel_), out_size);
}

zx_status_t Device::Call::GetReportDescSize_Deprecated(zx::unowned_channel _client_end, uint16_t* out_size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescSizeRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetReportDescSizeRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportDescSizeRequest));
  ::fidl::DecodedMessage<GetReportDescSizeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescSizeResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetReportDescSizeRequest, GetReportDescSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_size = std::move(_response.size);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetReportDescSizeResponse> Device::SyncClient::GetReportDescSize_Deprecated(::fidl::BytePart _response_buffer, uint16_t* out_size) {
  return Device::Call::GetReportDescSize_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_size);
}

::fidl::DecodeResult<Device::GetReportDescSizeResponse> Device::Call::GetReportDescSize_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, uint16_t* out_size) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportDescSizeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetReportDescSizeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetReportDescSizeRequest));
  ::fidl::DecodedMessage<GetReportDescSizeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportDescSizeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetReportDescSizeRequest, GetReportDescSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportDescSizeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_size = std::move(_response.size);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetReportDescSizeResponse> Device::InPlace::GetReportDescSize(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetReportDescSizeRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetReportDescSizeRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportDescSizeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetReportDescSizeRequest, GetReportDescSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportDescSizeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetReportDesc_Impl<Device::GetReportDescResponse>::GetReportDesc_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetReportDescRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportDescRequest));
  ::fidl::DecodedMessage<GetReportDescRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetReportDesc(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetReportDesc Device::SyncClient::GetReportDesc() {
  return ResultOf::GetReportDesc(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetReportDesc Device::Call::GetReportDesc(zx::unowned_channel _client_end) {
  return ResultOf::GetReportDesc(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetReportDesc_Impl<Device::GetReportDescResponse>::GetReportDesc_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportDescRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetReportDescRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetReportDescRequest));
  ::fidl::DecodedMessage<GetReportDescRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetReportDesc(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetReportDesc Device::SyncClient::GetReportDesc(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportDesc(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetReportDesc Device::Call::GetReportDesc(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportDesc(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetReportDescResponse> Device::SyncClient::GetReportDesc_Deprecated(::fidl::BytePart _response_buffer, ::fidl::VectorView<uint8_t>* out_desc) {
  return Device::Call::GetReportDesc_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_desc);
}

::fidl::DecodeResult<Device::GetReportDescResponse> Device::Call::GetReportDesc_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::fidl::VectorView<uint8_t>* out_desc) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportDescRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetReportDescRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetReportDesc_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetReportDescRequest));
  ::fidl::DecodedMessage<GetReportDescRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportDescResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetReportDescRequest, GetReportDescResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportDescResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_desc = std::move(_response.desc);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetReportDescResponse> Device::InPlace::GetReportDesc(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetReportDescRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetReportDescRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportDesc_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportDescResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetReportDescRequest, GetReportDescResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportDescResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetNumReports_Impl<Device::GetNumReportsResponse>::GetNumReports_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetNumReportsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetNumReportsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetNumReportsRequest));
  ::fidl::DecodedMessage<GetNumReportsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetNumReports(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetNumReports Device::SyncClient::GetNumReports() {
  return ResultOf::GetNumReports(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetNumReports Device::Call::GetNumReports(zx::unowned_channel _client_end) {
  return ResultOf::GetNumReports(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetNumReports_Impl<Device::GetNumReportsResponse>::GetNumReports_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetNumReportsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetNumReportsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetNumReportsRequest));
  ::fidl::DecodedMessage<GetNumReportsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetNumReports(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetNumReports Device::SyncClient::GetNumReports(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetNumReports(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetNumReports Device::Call::GetNumReports(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetNumReports(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetNumReports_Deprecated(uint16_t* out_count) {
  return Device::Call::GetNumReports_Deprecated(zx::unowned_channel(this->channel_), out_count);
}

zx_status_t Device::Call::GetNumReports_Deprecated(zx::unowned_channel _client_end, uint16_t* out_count) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetNumReportsRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetNumReportsRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetNumReportsRequest));
  ::fidl::DecodedMessage<GetNumReportsRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetNumReportsResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetNumReportsRequest, GetNumReportsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_count = std::move(_response.count);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetNumReportsResponse> Device::SyncClient::GetNumReports_Deprecated(::fidl::BytePart _response_buffer, uint16_t* out_count) {
  return Device::Call::GetNumReports_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_count);
}

::fidl::DecodeResult<Device::GetNumReportsResponse> Device::Call::GetNumReports_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, uint16_t* out_count) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetNumReportsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetNumReportsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetNumReportsRequest));
  ::fidl::DecodedMessage<GetNumReportsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetNumReportsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetNumReportsRequest, GetNumReportsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetNumReportsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_count = std::move(_response.count);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetNumReportsResponse> Device::InPlace::GetNumReports(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetNumReportsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetNumReportsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetNumReportsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetNumReportsRequest, GetNumReportsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetNumReportsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetReportIds_Impl<Device::GetReportIdsResponse>::GetReportIds_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportIdsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetReportIdsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportIdsRequest));
  ::fidl::DecodedMessage<GetReportIdsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetReportIds(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetReportIds Device::SyncClient::GetReportIds() {
  return ResultOf::GetReportIds(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetReportIds Device::Call::GetReportIds(zx::unowned_channel _client_end) {
  return ResultOf::GetReportIds(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetReportIds_Impl<Device::GetReportIdsResponse>::GetReportIds_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportIdsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetReportIdsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetReportIdsRequest));
  ::fidl::DecodedMessage<GetReportIdsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetReportIds(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetReportIds Device::SyncClient::GetReportIds(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportIds(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetReportIds Device::Call::GetReportIds(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportIds(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetReportIdsResponse> Device::SyncClient::GetReportIds_Deprecated(::fidl::BytePart _response_buffer, ::fidl::VectorView<uint8_t>* out_ids) {
  return Device::Call::GetReportIds_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_ids);
}

::fidl::DecodeResult<Device::GetReportIdsResponse> Device::Call::GetReportIds_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::fidl::VectorView<uint8_t>* out_ids) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetReportIdsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetReportIdsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetReportIds_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetReportIdsRequest));
  ::fidl::DecodedMessage<GetReportIdsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportIdsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetReportIdsRequest, GetReportIdsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportIdsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_ids = std::move(_response.ids);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetReportIdsResponse> Device::InPlace::GetReportIds(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetReportIdsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetReportIdsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportIds_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportIdsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetReportIdsRequest, GetReportIdsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportIdsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetReportSize_Impl<Device::GetReportSizeResponse>::GetReportSize_Impl(zx::unowned_channel _client_end, ReportType type, uint8_t id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportSizeRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetReportSizeRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetReportSizeRequest*>(_write_bytes);
  _request.type = std::move(type);
  _request.id = std::move(id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportSizeRequest));
  ::fidl::DecodedMessage<GetReportSizeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetReportSize(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::GetReportSize Device::SyncClient::GetReportSize(ReportType type, uint8_t id) {
  return ResultOf::GetReportSize(zx::unowned_channel(this->channel_), std::move(type), std::move(id));
}

Device::ResultOf::GetReportSize Device::Call::GetReportSize(zx::unowned_channel _client_end, ReportType type, uint8_t id) {
  return ResultOf::GetReportSize(std::move(_client_end), std::move(type), std::move(id));
}

template <>
Device::UnownedResultOf::GetReportSize_Impl<Device::GetReportSizeResponse>::GetReportSize_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetReportSizeRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetReportSizeResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetReportSizeRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetReportSizeRequest*>(_request_buffer.data());
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(GetReportSizeRequest));
  ::fidl::DecodedMessage<GetReportSizeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetReportSize(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetReportSize Device::SyncClient::GetReportSize(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportSize(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer));
}

Device::UnownedResultOf::GetReportSize Device::Call::GetReportSize(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReportSize(std::move(_client_end), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetReportSize_Deprecated(ReportType type, uint8_t id, int32_t* out_status, uint16_t* out_size) {
  return Device::Call::GetReportSize_Deprecated(zx::unowned_channel(this->channel_), std::move(type), std::move(id), out_status, out_size);
}

zx_status_t Device::Call::GetReportSize_Deprecated(zx::unowned_channel _client_end, ReportType type, uint8_t id, int32_t* out_status, uint16_t* out_size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportSizeRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetReportSizeRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  _request.type = std::move(type);
  _request.id = std::move(id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportSizeRequest));
  ::fidl::DecodedMessage<GetReportSizeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetReportSizeResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetReportSizeRequest, GetReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  *out_size = std::move(_response.size);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetReportSizeResponse> Device::SyncClient::GetReportSize_Deprecated(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer, int32_t* out_status, uint16_t* out_size) {
  return Device::Call::GetReportSize_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer), out_status, out_size);
}

::fidl::DecodeResult<Device::GetReportSizeResponse> Device::Call::GetReportSize_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer, int32_t* out_status, uint16_t* out_size) {
  if (_request_buffer.capacity() < GetReportSizeRequest::PrimarySize) {
    return ::fidl::DecodeResult<GetReportSizeResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<GetReportSizeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(GetReportSizeRequest));
  ::fidl::DecodedMessage<GetReportSizeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportSizeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetReportSizeRequest, GetReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportSizeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  *out_size = std::move(_response.size);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetReportSizeResponse> Device::InPlace::GetReportSize(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetReportSizeRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportSizeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetReportSizeRequest, GetReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportSizeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetMaxInputReportSize_Impl<Device::GetMaxInputReportSizeResponse>::GetMaxInputReportSize_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetMaxInputReportSizeRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetMaxInputReportSizeRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetMaxInputReportSizeRequest));
  ::fidl::DecodedMessage<GetMaxInputReportSizeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetMaxInputReportSize(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetMaxInputReportSize Device::SyncClient::GetMaxInputReportSize() {
  return ResultOf::GetMaxInputReportSize(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetMaxInputReportSize Device::Call::GetMaxInputReportSize(zx::unowned_channel _client_end) {
  return ResultOf::GetMaxInputReportSize(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetMaxInputReportSize_Impl<Device::GetMaxInputReportSizeResponse>::GetMaxInputReportSize_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetMaxInputReportSizeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetMaxInputReportSizeRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetMaxInputReportSizeRequest));
  ::fidl::DecodedMessage<GetMaxInputReportSizeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetMaxInputReportSize(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetMaxInputReportSize Device::SyncClient::GetMaxInputReportSize(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMaxInputReportSize(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetMaxInputReportSize Device::Call::GetMaxInputReportSize(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMaxInputReportSize(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetMaxInputReportSize_Deprecated(uint16_t* out_size) {
  return Device::Call::GetMaxInputReportSize_Deprecated(zx::unowned_channel(this->channel_), out_size);
}

zx_status_t Device::Call::GetMaxInputReportSize_Deprecated(zx::unowned_channel _client_end, uint16_t* out_size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetMaxInputReportSizeRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetMaxInputReportSizeRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetMaxInputReportSizeRequest));
  ::fidl::DecodedMessage<GetMaxInputReportSizeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetMaxInputReportSizeResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetMaxInputReportSizeRequest, GetMaxInputReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_size = std::move(_response.size);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetMaxInputReportSizeResponse> Device::SyncClient::GetMaxInputReportSize_Deprecated(::fidl::BytePart _response_buffer, uint16_t* out_size) {
  return Device::Call::GetMaxInputReportSize_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_size);
}

::fidl::DecodeResult<Device::GetMaxInputReportSizeResponse> Device::Call::GetMaxInputReportSize_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, uint16_t* out_size) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetMaxInputReportSizeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetMaxInputReportSizeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetMaxInputReportSizeRequest));
  ::fidl::DecodedMessage<GetMaxInputReportSizeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetMaxInputReportSizeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetMaxInputReportSizeRequest, GetMaxInputReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetMaxInputReportSizeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_size = std::move(_response.size);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetMaxInputReportSizeResponse> Device::InPlace::GetMaxInputReportSize(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetMaxInputReportSizeRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetMaxInputReportSizeRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetMaxInputReportSizeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetMaxInputReportSizeRequest, GetMaxInputReportSizeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetMaxInputReportSizeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetReport_Impl<Device::GetReportResponse>::GetReport_Impl(zx::unowned_channel _client_end, ReportType type, uint8_t id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetReportRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetReportRequest*>(_write_bytes);
  _request.type = std::move(type);
  _request.id = std::move(id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportRequest));
  ::fidl::DecodedMessage<GetReportRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetReport(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::GetReport Device::SyncClient::GetReport(ReportType type, uint8_t id) {
  return ResultOf::GetReport(zx::unowned_channel(this->channel_), std::move(type), std::move(id));
}

Device::ResultOf::GetReport Device::Call::GetReport(zx::unowned_channel _client_end, ReportType type, uint8_t id) {
  return ResultOf::GetReport(std::move(_client_end), std::move(type), std::move(id));
}

template <>
Device::UnownedResultOf::GetReport_Impl<Device::GetReportResponse>::GetReport_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetReportRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetReportResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetReportRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetReportRequest*>(_request_buffer.data());
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(GetReportRequest));
  ::fidl::DecodedMessage<GetReportRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetReport(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetReport Device::SyncClient::GetReport(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReport(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer));
}

Device::UnownedResultOf::GetReport Device::Call::GetReport(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetReport(std::move(_client_end), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetReportResponse> Device::SyncClient::GetReport_Deprecated(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_report) {
  return Device::Call::GetReport_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(_response_buffer), out_status, out_report);
}

::fidl::DecodeResult<Device::GetReportResponse> Device::Call::GetReport_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_report) {
  if (_request_buffer.capacity() < GetReportRequest::PrimarySize) {
    return ::fidl::DecodeResult<GetReportResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<GetReportRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetReport_GenOrdinal;
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(GetReportRequest));
  ::fidl::DecodedMessage<GetReportRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetReportRequest, GetReportResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetReportResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  *out_report = std::move(_response.report);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetReportResponse> Device::InPlace::GetReport(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetReportRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReport_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetReportRequest, GetReportResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetReportResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::SetReport_Impl<Device::SetReportResponse>::SetReport_Impl(zx::unowned_channel _client_end, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetReportRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  SetReportRequest _request = {};
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SetReportRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Device::InPlace::SetReport(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::SetReport Device::SyncClient::SetReport(ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report) {
  return ResultOf::SetReport(zx::unowned_channel(this->channel_), std::move(type), std::move(id), std::move(report));
}

Device::ResultOf::SetReport Device::Call::SetReport(zx::unowned_channel _client_end, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report) {
  return ResultOf::SetReport(std::move(_client_end), std::move(type), std::move(id), std::move(report));
}

template <>
Device::UnownedResultOf::SetReport_Impl<Device::SetReportResponse>::SetReport_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetReportRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetReportResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  SetReportRequest _request = {};
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SetReportRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Device::InPlace::SetReport(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::SetReport Device::SyncClient::SetReport(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetReport(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(report), std::move(_response_buffer));
}

Device::UnownedResultOf::SetReport Device::Call::SetReport(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetReport(std::move(_client_end), std::move(_request_buffer), std::move(type), std::move(id), std::move(report), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::SetReport_Deprecated(ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, int32_t* out_status) {
  return Device::Call::SetReport_Deprecated(zx::unowned_channel(this->channel_), std::move(type), std::move(id), std::move(report), out_status);
}

zx_status_t Device::Call::SetReport_Deprecated(zx::unowned_channel _client_end, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, int32_t* out_status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetReportRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  SetReportRequest _request = {};
  _request._hdr.ordinal = kDevice_SetReport_GenOrdinal;
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<SetReportRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SetReportResponse, ::fidl::MessageDirection::kReceiving>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SetReportRequest, SetReportResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  return ZX_OK;
}

::fidl::DecodeResult<Device::SetReportResponse> Device::SyncClient::SetReport_Deprecated(::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, ::fidl::BytePart _response_buffer, int32_t* out_status) {
  return Device::Call::SetReport_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(type), std::move(id), std::move(report), std::move(_response_buffer), out_status);
}

::fidl::DecodeResult<Device::SetReportResponse> Device::Call::SetReport_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ReportType type, uint8_t id, ::fidl::VectorView<uint8_t> report, ::fidl::BytePart _response_buffer, int32_t* out_status) {
  if (_request_buffer.capacity() < SetReportRequest::PrimarySize) {
    return ::fidl::DecodeResult<SetReportResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  SetReportRequest _request = {};
  _request._hdr.ordinal = kDevice_SetReport_GenOrdinal;
  _request.type = std::move(type);
  _request.id = std::move(id);
  _request.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetReportResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<SetReportRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetReportResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SetReportRequest, SetReportResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetReportResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  return _decode_result;
}

::fidl::DecodeResult<Device::SetReportResponse> Device::InPlace::SetReport(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetReportRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetReport_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetReportResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetReportRequest, SetReportResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetReportResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


Device::ResultOf::SetTraceId_Impl::SetTraceId_Impl(zx::unowned_channel _client_end, uint32_t id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetTraceIdRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetTraceIdRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetTraceIdRequest*>(_write_bytes);
  _request.id = std::move(id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetTraceIdRequest));
  ::fidl::DecodedMessage<SetTraceIdRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Device::InPlace::SetTraceId(std::move(_client_end), std::move(_decoded_request)));
}

Device::ResultOf::SetTraceId Device::SyncClient::SetTraceId(uint32_t id) {
  return ResultOf::SetTraceId(zx::unowned_channel(this->channel_), std::move(id));
}

Device::ResultOf::SetTraceId Device::Call::SetTraceId(zx::unowned_channel _client_end, uint32_t id) {
  return ResultOf::SetTraceId(std::move(_client_end), std::move(id));
}


Device::UnownedResultOf::SetTraceId_Impl::SetTraceId_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t id) {
  if (_request_buffer.capacity() < SetTraceIdRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, SetTraceIdRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetTraceIdRequest*>(_request_buffer.data());
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(SetTraceIdRequest));
  ::fidl::DecodedMessage<SetTraceIdRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Device::InPlace::SetTraceId(std::move(_client_end), std::move(_decoded_request)));
}

Device::UnownedResultOf::SetTraceId Device::SyncClient::SetTraceId(::fidl::BytePart _request_buffer, uint32_t id) {
  return UnownedResultOf::SetTraceId(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(id));
}

Device::UnownedResultOf::SetTraceId Device::Call::SetTraceId(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t id) {
  return UnownedResultOf::SetTraceId(std::move(_client_end), std::move(_request_buffer), std::move(id));
}

zx_status_t Device::SyncClient::SetTraceId_Deprecated(uint32_t id) {
  return Device::Call::SetTraceId_Deprecated(zx::unowned_channel(this->channel_), std::move(id));
}

zx_status_t Device::Call::SetTraceId_Deprecated(zx::unowned_channel _client_end, uint32_t id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetTraceIdRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SetTraceIdRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_SetTraceId_GenOrdinal;
  _request.id = std::move(id);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetTraceIdRequest));
  ::fidl::DecodedMessage<SetTraceIdRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Device::SyncClient::SetTraceId_Deprecated(::fidl::BytePart _request_buffer, uint32_t id) {
  return Device::Call::SetTraceId_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(id));
}

zx_status_t Device::Call::SetTraceId_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t id) {
  if (_request_buffer.capacity() < SetTraceIdRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<SetTraceIdRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_SetTraceId_GenOrdinal;
  _request.id = std::move(id);
  _request_buffer.set_actual(sizeof(SetTraceIdRequest));
  ::fidl::DecodedMessage<SetTraceIdRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Device::InPlace::SetTraceId(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetTraceIdRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetTraceId_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


bool Device::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kDevice_GetBootProtocol_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetBootProtocolRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetBootProtocol(
        Interface::GetBootProtocolCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetReportDescSize_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetReportDescSizeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetReportDescSize(
        Interface::GetReportDescSizeCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetReportDesc_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetReportDescRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetReportDesc(
        Interface::GetReportDescCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetNumReports_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetNumReportsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetNumReports(
        Interface::GetNumReportsCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetReportIds_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetReportIdsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetReportIds(
        Interface::GetReportIdsCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetReportSize_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetReportSizeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetReportSize(std::move(message->type), std::move(message->id),
        Interface::GetReportSizeCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetMaxInputReportSize_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetMaxInputReportSizeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetMaxInputReportSize(
        Interface::GetMaxInputReportSizeCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetReport_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetReportRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetReport(std::move(message->type), std::move(message->id),
        Interface::GetReportCompleter::Sync(txn));
      return true;
    }
    case kDevice_SetReport_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetReportRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetReport(std::move(message->type), std::move(message->id), std::move(message->report),
        Interface::SetReportCompleter::Sync(txn));
      return true;
    }
    case kDevice_SetTraceId_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetTraceIdRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetTraceId(std::move(message->id),
        Interface::SetTraceIdCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Device::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Device::Interface::GetBootProtocolCompleterBase::Reply(BootProtocol protocol) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetBootProtocolResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetBootProtocolResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  _response.protocol = std::move(protocol);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetBootProtocolResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetBootProtocolResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetBootProtocolCompleterBase::Reply(::fidl::BytePart _buffer, BootProtocol protocol) {
  if (_buffer.capacity() < GetBootProtocolResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetBootProtocolResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  _response.protocol = std::move(protocol);
  _buffer.set_actual(sizeof(GetBootProtocolResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetBootProtocolResponse>(std::move(_buffer)));
}

void Device::Interface::GetBootProtocolCompleterBase::Reply(::fidl::DecodedMessage<GetBootProtocolResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetBootProtocol_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetReportDescSizeCompleterBase::Reply(uint16_t size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescSizeResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetReportDescSizeResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  _response.size = std::move(size);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportDescSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetReportDescSizeResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetReportDescSizeCompleterBase::Reply(::fidl::BytePart _buffer, uint16_t size) {
  if (_buffer.capacity() < GetReportDescSizeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetReportDescSizeResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  _response.size = std::move(size);
  _buffer.set_actual(sizeof(GetReportDescSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetReportDescSizeResponse>(std::move(_buffer)));
}

void Device::Interface::GetReportDescSizeCompleterBase::Reply(::fidl::DecodedMessage<GetReportDescSizeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportDescSize_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetReportDescCompleterBase::Reply(::fidl::VectorView<uint8_t> desc) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportDescResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetReportDescResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReportDesc_GenOrdinal;
  _response.desc = std::move(desc);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportDescCompleterBase::Reply(::fidl::BytePart _buffer, ::fidl::VectorView<uint8_t> desc) {
  if (_buffer.capacity() < GetReportDescResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetReportDescResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReportDesc_GenOrdinal;
  _response.desc = std::move(desc);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportDescCompleterBase::Reply(::fidl::DecodedMessage<GetReportDescResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportDesc_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetNumReportsCompleterBase::Reply(uint16_t count) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetNumReportsResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetNumReportsResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  _response.count = std::move(count);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetNumReportsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetNumReportsResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetNumReportsCompleterBase::Reply(::fidl::BytePart _buffer, uint16_t count) {
  if (_buffer.capacity() < GetNumReportsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetNumReportsResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  _response.count = std::move(count);
  _buffer.set_actual(sizeof(GetNumReportsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetNumReportsResponse>(std::move(_buffer)));
}

void Device::Interface::GetNumReportsCompleterBase::Reply(::fidl::DecodedMessage<GetNumReportsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetNumReports_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetReportIdsCompleterBase::Reply(::fidl::VectorView<uint8_t> ids) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportIdsResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize];
  GetReportIdsResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReportIds_GenOrdinal;
  _response.ids = std::move(ids);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportIdsCompleterBase::Reply(::fidl::BytePart _buffer, ::fidl::VectorView<uint8_t> ids) {
  if (_buffer.capacity() < GetReportIdsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetReportIdsResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReportIds_GenOrdinal;
  _response.ids = std::move(ids);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportIdsCompleterBase::Reply(::fidl::DecodedMessage<GetReportIdsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportIds_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetReportSizeCompleterBase::Reply(int32_t status, uint16_t size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportSizeResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetReportSizeResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  _response.status = std::move(status);
  _response.size = std::move(size);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetReportSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetReportSizeResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetReportSizeCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status, uint16_t size) {
  if (_buffer.capacity() < GetReportSizeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetReportSizeResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  _response.status = std::move(status);
  _response.size = std::move(size);
  _buffer.set_actual(sizeof(GetReportSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetReportSizeResponse>(std::move(_buffer)));
}

void Device::Interface::GetReportSizeCompleterBase::Reply(::fidl::DecodedMessage<GetReportSizeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReportSize_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetMaxInputReportSizeCompleterBase::Reply(uint16_t size) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetMaxInputReportSizeResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetMaxInputReportSizeResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  _response.size = std::move(size);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetMaxInputReportSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetMaxInputReportSizeResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetMaxInputReportSizeCompleterBase::Reply(::fidl::BytePart _buffer, uint16_t size) {
  if (_buffer.capacity() < GetMaxInputReportSizeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetMaxInputReportSizeResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  _response.size = std::move(size);
  _buffer.set_actual(sizeof(GetMaxInputReportSizeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetMaxInputReportSizeResponse>(std::move(_buffer)));
}

void Device::Interface::GetMaxInputReportSizeCompleterBase::Reply(::fidl::DecodedMessage<GetMaxInputReportSizeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetMaxInputReportSize_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetReportCompleterBase::Reply(int32_t status, ::fidl::VectorView<uint8_t> report) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetReportResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetReportResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReport_GenOrdinal;
  _response.status = std::move(status);
  _response.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::VectorView<uint8_t> report) {
  if (_buffer.capacity() < GetReportResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetReportResponse _response = {};
  _response._hdr.ordinal = kDevice_GetReport_GenOrdinal;
  _response.status = std::move(status);
  _response.report = std::move(report);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::GetReportCompleterBase::Reply(::fidl::DecodedMessage<GetReportResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetReport_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::SetReportCompleterBase::Reply(int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetReportResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetReportResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_SetReport_GenOrdinal;
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetReportResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetReportResponse>(std::move(_response_bytes)));
}

void Device::Interface::SetReportCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status) {
  if (_buffer.capacity() < SetReportResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetReportResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_SetReport_GenOrdinal;
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(SetReportResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetReportResponse>(std::move(_buffer)));
}

void Device::Interface::SetReportCompleterBase::Reply(::fidl::DecodedMessage<SetReportResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetReport_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace input
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp
