# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("$zx/public/gn/package.gni")
import("$zx/public/gn/test/zbi_test.gni")
import("$zx/public/gn/zbi.gni")

package("bootsvc") {
  deps = [
    ":bin",
  ]
  data_deps = [
    # When this package() is included in a zbi(), the cmdline
    # entry to set userboot.root will be included too.
    ":cmdline",

    # At runtime, bootsvc launches devcoordinator, so it needs to be in the
    # zbi() as well.  Note this is in data_deps of the package() rather
    # than the executable() so that as long as devcoordinator is just an
    # executable() target itself, it will just go into the zbi() and not
    # into this package().  When devcoordinator becomes a package() target
    # itself, then having this on either the package() or the executable()
    # will have the same effect: just include that whole package() in any
    # zbi() that contains this one, but don't include anything related to
    # devcoordinator into this package itself.
    "$zx/system/core/devmgr/devcoordinator",
  ]
}

zbi_input("cmdline") {
  visibility = [ ":*" ]
  type = "cmdline"
  args = [ "--entry=userboot.root=${bootfs_package_prefix}bootsvc" ]
}

executable("bin") {
  output_name = "bootsvc"
  sources = [
    "bootfs-loader-service.cc",
    "bootfs-loader-service.h",
    "bootfs-service.cc",
    "bootfs-service.h",
    "main.cc",
    "svcfs-service.cc",
    "svcfs-service.h",
  ]
  deps = [
    ":util",
    "$zx/system/fidl/fuchsia-boot:c",
    "$zx/system/fidl/fuchsia-io:c",
    "$zx/system/ulib/async:async-cpp",
    "$zx/system/ulib/async:async-default",
    "$zx/system/ulib/async-loop",
    "$zx/system/ulib/async-loop:async-loop-cpp",
    "$zx/system/ulib/bootfs",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fdio",
    "$zx/system/ulib/fidl",
    "$zx/system/ulib/fidl-async",
    "$zx/system/ulib/fs",
    "$zx/system/ulib/launchpad",
    "$zx/system/ulib/loader-service",
    "$zx/system/ulib/memfs:memfs-cpp.static",
    "$zx/system/ulib/memfs:static",
    "$zx/system/ulib/trace",
    "$zx/system/ulib/trace-engine",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zx",
  ]
}

source_set("util") {
  sources = [
    "util.cc",
    "util.h",
  ]
  deps = [
    "$zx/third_party/ulib/safemath",
  ]
  public_deps = [
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fs",
    "$zx/system/ulib/zx",
  ]
}

group("tests") {
  testonly = true
  data_deps = [
    ":bootsvc-unit-test",
    ":bootsvc-integration-tests",
  ]
}

test("bootsvc-unit-test") {
  output_name = "bootsvc-unit-test"
  sources = [
    "unit-test.cc",
  ]
  deps = [
    ":util",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/unittest",
  ]
}

executable("bootsvc-integration-test") {
  testonly = true
  defines = [ "ZBI_TEST_SUCCESS_STRING=\"$zbi_test_success_string\"" ]
  sources = [
    "integration-test.cc",
  ]
  deps = [
    ":util",
    "$zx/system/fidl/fuchsia-boot:c",
    "$zx/system/ulib/fbl",
    "$zx/system/ulib/fdio",
    "$zx/system/ulib/unittest",
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zx",
    "$zx/third_party/ulib/safemath",
  ]
}

# The bootsvc integration tests exercises reading several different kinds of
# entries from the ZBI.  Make sure we include one of each, so that we can test
# that bootsvc is exposing access to them correctly.
zbi_input("integration-test-factory-item") {
  visibility = [ ":*" ]
  type = "BOOTFS_FACTORY"
  args = [ "--entry=IAmAFactoryItemHooray" ]
}

zbi_input("integration-test-crashlog") {
  visibility = [ ":*" ]
  type = "CRASHLOG"
  args = [ "--entry=IAmACrashLogButNotAVeryLongOne" ]
}

# This file must contain a trailing newline, but you can't inline that in a
# shell command with --entry, so generate a file and pass that as the argument
# when building the bootsvc-integration-tests zbi.
generated_file("bootsvc-integration-test-image-arg") {
  outputs = [
    "$target_out_dir/$target_name.txt",
  ]
  contents = "testkey=testvalue$0x0a"  # trailing newline is required!
}

zbi_input("integration-test-image-arg") {
  deps = [
    ":bootsvc-integration-test-image-arg",
  ]
  visibility = [ ":*" ]
  type = "IMAGE_ARGS"
  args = [ "$target_out_dir/bootsvc-integration-test-image-arg.txt" ]
}

zbi_test("bootsvc-integration-tests") {
  assert(current_cpu != "")

  args = [
    "userboot=bin/bootsvc",
    "bootsvc.next=bin/bootsvc-integration-test,testargument",
  ]
  deps = [
    # We need a zircon kernel to get off the ground at all.
    "$zx/kernel",

    # Include bootsvc itself, since that's what we're testing here.
    ":bin",

    # Include the integration test binary, which bootsvc will launch.
    ":bootsvc-integration-test",

    # Include the three additional ZBI items that we test the behavior of in
    # the integration test.
    ":integration-test-crashlog",
    ":integration-test-factory-item",
    ":integration-test-image-arg",

    # Pull in devcoordinator so that we can test requesting libdriver.so
    # from the bootsvc loader service.  This could possibly be smaller, but
    # seems pretty reasonable.
    "$zx/system/core/devmgr/devcoordinator",
  ]

  output_dir = root_build_dir
  output_name = "bootsvc-integration-tests-$current_cpu"
}
