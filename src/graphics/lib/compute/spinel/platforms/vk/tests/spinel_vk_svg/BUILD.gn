# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../../../../gn/build_rules.gni")
if (is_fuchsia) {
  import("//garnet/lib/vulkan/image_pipe_swapchain.gni")
}

#
# spinel_vk_svg: exercise the Spinel API with basic SVGs
#
graphics_compute_vulkan_executable("spinel_vk_svg") {
  #
  # Fails trying to build a Fuchsia executable
  # configs = [
  #  "${graphics_compute_dir}/spinel:spinel_public_config",
  #  ]
  #
  sources = [
    "${graphics_compute_dir}/spinel/ext/color/color.c",
    "${graphics_compute_dir}/spinel/ext/color/color.h",
    "${graphics_compute_dir}/spinel/ext/transform_stack/transform_stack.c",
    "${graphics_compute_dir}/spinel/ext/transform_stack/transform_stack.h",
    "lion_cub.c",
    "main.c",
    "presentation.c",
    "presentation.h",
    "triangle_shaders.h"
  ]
  if (current_toolchain == host_toolchain) {
    defines = [ "SPN_VK_SHADER_INFO_AMD_STATISTICS" ]
  }
  include_dirs = [
    "${graphics_compute_dir}/spinel/include",

    # FIXME(allanmac): these includes are necessary only because we're
    # using a convenient Vulkan allocator defined in Spinel
    "${graphics_compute_dir}/spinel",  # only for suballocator.h
    "${graphics_compute_dir}/spinel/platforms/vk",  # only for allocator_device.h
  ]
  deps = [
    "${graphics_compute_dir}/common",
    "${graphics_compute_dir}/common/vk",
    "${graphics_compute_dir}/spinel:spinel_vk_for_tests",
  ]
  public_deps = [
    "${graphics_compute_dir}/spinel",
  ]
  # Anything that depends on vk_app_state.c for presentation needs this,
  # and there is no way to express this with GN that I know of :-/
  if (is_fuchsia) {
    public_deps += image_pipe_swapchain_fb.public_deps
    loadable_modules = image_pipe_swapchain_fb.loadable_modules
    resources = image_pipe_swapchain_fb.resources
  }
}
