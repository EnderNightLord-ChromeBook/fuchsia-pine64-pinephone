# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

###############################################################################
# AGGREGATE LIBRARIES

source_set("lib") {
}

source_set("tests") {
  testonly = true
  deps = []

  if (!is_fuchsia) {
    deps += [ ":stream_socket_link_test" ]
  }
}

###############################################################################

source_set("host_reactor") {
  sources = [
    "host_reactor.cc",
    "host_reactor.h",
  ]
  deps = [
    "//src/connectivity/overnet/deprecated/lib/environment:timer",
    "//src/connectivity/overnet/deprecated/lib/environment:trace",
  ]
}

source_set("channel") {
  sources = [
    "decoder.cc",
    "decoder.h",
    "encoder.cc",
    "encoder.h",
    "fidl_channel.cc",
    "fidl_channel.h",
    "zx_channel.cc",
    "zx_channel.h",
  ]
  public_deps = [
    "//sdk/fidl/fuchsia.overnet.protocol",
    "//src/connectivity/overnet/deprecated/lib/endpoint:router_endpoint",
    "//src/connectivity/overnet/deprecated/lib/protocol:coding",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:optional",
    "//zircon/public/lib/fbl",
  ]
}

source_set("zx_socket") {
  sources = [
    "zx_socket.cc",
    "zx_socket.h",
  ]
  public_deps = [
    ":channel",
  ]
}

source_set("runtime") {
  sources = [
    "header.h",
    "implementation.h",
    "to_embedded.h",
  ]
  public_deps = [
    ":channel",
    ":zx_socket",
  ]
}

source_set("basic_embedded") {
  sources = [
    "basic_overnet_embedded.cc",
    "basic_overnet_embedded.h",
  ]
  public_deps = [
    ":host_reactor",
    ":runtime",
    "//sdk/fidl/fuchsia.overnet:fuchsia.overnet_overnet_embedded",
    "//src/connectivity/overnet/deprecated/lib/environment:trace_cout",
  ]
}

source_set("embedded") {
  sources = [
    "overnet_embedded.h",
  ]
  public_deps = [
    ":basic_embedded",
    ":stream_client",
    "//src/connectivity/overnet/deprecated/lib/protocol:reliable_framer",
  ]
}

source_set("omdp_nub") {
  sources = [
    "omdp_nub.cc",
    "omdp_nub.h",
  ]
  public_deps = [
    ":basic_embedded",
    ":udp_nub",
    "//src/connectivity/overnet/deprecated/lib/omdp",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:ip_addr",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
    "//zircon/public/lib/fbl",
  ]
}

source_set("udp_nub") {
  sources = [
    "udp_nub.cc",
    "udp_nub.h",
  ]
  public_deps = [
    ":basic_embedded",
    "//src/connectivity/overnet/deprecated/lib/links:packet_nub",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:ip_addr",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
  ]
}

source_set("stream_socket_link") {
  sources = [
    "stream_socket_link.cc",
    "stream_socket_link.h",
  ]
  deps = [
    ":basic_embedded",
    "//src/connectivity/overnet/deprecated/lib/labels:node_id",
    "//src/connectivity/overnet/deprecated/lib/links:stream_link",
    "//src/connectivity/overnet/deprecated/lib/protocol:fidl",
    "//src/connectivity/overnet/deprecated/lib/protocol:stream_framer",
    "//src/connectivity/overnet/deprecated/lib/protocol:varint",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
  ]
}

source_set("stream_socket_link_test") {
  testonly = true
  sources = [
    "stream_socket_link_test.cc",
  ]
  deps = [
    ":stream_socket_link",
    "//src/connectivity/overnet/deprecated/lib/embedded:basic_embedded",
    "//src/connectivity/overnet/deprecated/lib/environment:trace",
    "//src/connectivity/overnet/deprecated/lib/protocol:fidl",
    "//src/connectivity/overnet/deprecated/lib/protocol:reliable_framer",
    "//src/connectivity/overnet/deprecated/lib/protocol:unreliable_framer",
    "//src/connectivity/overnet/deprecated/lib/testing:flags",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
    "//third_party/googletest:gtest",
  ]
}

source_set("stream_server") {
  sources = [
    "stream_server.cc",
    "stream_server.h",
  ]
  deps = [
    ":basic_embedded",
    ":stream_socket_link",
    "//src/connectivity/overnet/deprecated/lib/protocol:stream_framer",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:ip_addr",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
  ]
}

source_set("stream_client") {
  sources = [
    "stream_client.cc",
    "stream_client.h",
  ]
  deps = [
    ":basic_embedded",
    ":stream_socket_link",
    "//src/connectivity/overnet/deprecated/lib/protocol:stream_framer",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:ip_addr",
    "//src/connectivity/overnet/deprecated/lib/vocabulary:socket",
  ]
}
