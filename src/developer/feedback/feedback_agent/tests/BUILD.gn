# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.

import("//build/config.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

group("tests") {
  testonly = true

  public_deps = [
    ":feedback_agent_tests",
    ":invalid_override_config",
    ":valid_override_config",

    # Packages for the components that we are injecting in the integration tests.
    "//garnet/bin/logger",
    "//garnet/bin/sysmem_connector",
    "//garnet/bin/system-update-checker",
    "//garnet/bin/ui:scenic",
    "//garnet/bin/vulkan_loader",
    "//src/developer/feedback/feedback_agent",
    "//src/developer/feedback/feedback_agent:fake_feedback_agent_invalid_override_config",
    "//src/developer/feedback/feedback_agent:fake_feedback_agent_valid_override_config",
  ]
}

test_package("feedback_agent_tests") {
  deprecated_shell = "//build"

  tests = [
    {
      name = "channel_provider_ptr_unittest"
    },
    {
      name = "data_provider_unittest"
    },
    {
      name = "data_provider_config_unittest"
    },
    {
      name = "log_listener_ptr_unittest"
    },
    {
      name = "feedback_agent_integration_test"

      # We need to also test on real devices as we talk to a real Scenic service.
      environments = basic_envs
    },
    {
      name = "feedback_agent_integration_test_valid_override_config"
    },
    {
      name = "feedback_agent_integration_test_invalid_override_config"
    },
    {
      name = "scenic_ptr_unittest"
    },
  ]

  binaries = [
    # needed for data_provider_unittest
    {
      name = "inspect_exe"
    },
  ]

  meta = [
    {
      path = "meta/inspect_test_app.cmx"
      dest = "inspect_test_app.cmx"
    },
  ]

  resources = [
    # needed for data_provider_unittest
    {
      path = "resources/checkerboard_100.png"
      dest = "checkerboard_100.png"
    },

    # needed for data_provider_config_unittest
    {
      path = "configs/valid.json"
      dest = "valid_config.json"
    },

    # needed for data_provider_config_unittest
    {
      path = "configs/valid_empty_list.json"
      dest = "valid_config_empty_list.json"
    },

    # needed for data_provider_config_unittest
    {
      path = "configs/bad_schema_duplicated_attachment_key.json"
      dest = "bad_schema_duplicated_attachment_key_config.json"
    },

    # needed for data_provider_config_unittest
    {
      path = "configs/bad_schema_spurious_field.json"
      dest = "bad_schema_spurious_field_config.json"
    },

    # needed for data_provider_config_unittest
    {
      path = "configs/bad_schema_missing_required_field.json"
      dest = "bad_schema_missing_required_field_config.json"
    },
  ]

  deps = [
    ":channel_provider_ptr_unittest",
    ":config_unittest",
    ":data_provider_unittest",
    ":feedback_agent_integration_test",
    ":feedback_agent_integration_test_invalid_override_config",
    ":feedback_agent_integration_test_valid_override_config",
    ":inspect_exe",
    ":log_listener_ptr_unittest",
    ":scenic_ptr_unittest",
  ]
}

executable("channel_provider_ptr_unittest") {
  testonly = true

  sources = [
    "channel_provider_ptr_unittest.cc",
  ]

  deps = [
    ":stub_channel_provider",
    "//garnet/public/lib/async_promise",
    "//garnet/public/lib/gtest",
    "//garnet/public/lib/syslog/cpp",
    "//sdk/lib/sys/cpp/testing:unit",
    "//src/developer/feedback/feedback_agent:src",
    "//src/lib/fxl",
    "//src/lib/fxl/test:test_settings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("config_unittest") {
  testonly = true

  output_name = "data_provider_config_unittest"

  sources = [
    "config_unittest.cc",
  ]

  deps = [
    "//garnet/public/lib/syslog/cpp",
    "//src/developer/feedback/feedback_agent:src",
    "//src/lib/fxl/test:test_settings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("data_provider_unittest") {
  testonly = true

  sources = [
    "data_provider_unittest.cc",
  ]

  deps = [
    ":stub_channel_provider",
    ":stub_logger",
    ":stub_scenic",
    "//garnet/public/lib/fostr",
    "//garnet/public/lib/fostr/fidl/fuchsia.math",
    "//garnet/public/lib/fostr/fidl/fuchsia.mem",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/gtest",
    "//garnet/public/lib/syslog/cpp",
    "//sdk/fidl/fuchsia.feedback",
    "//sdk/fidl/fuchsia.math",
    "//sdk/fidl/fuchsia.sys",
    "//sdk/lib/fidl/cpp",
    "//sdk/lib/sys/cpp/testing:integration",
    "//sdk/lib/sys/cpp/testing:unit",
    "//src/developer/feedback/feedback_agent:src",
    "//src/lib/files",
    "//src/lib/fxl",
    "//src/lib/fxl/test:test_settings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//third_party/rapidjson",
    "//zircon/public/lib/zx",
  ]
}

executable("inspect_exe") {
  testonly = true

  sources = [
    "inspect_exe.cc",
  ]

  deps = [
    "//garnet/public/lib/inspect_deprecated:component",
    "//sdk/lib/sys/cpp",
    "//zircon/public/lib/async-loop-cpp",
  ]
}

executable("log_listener_ptr_unittest") {
  testonly = true

  sources = [
    "log_listener_ptr_unittest.cc",
  ]

  deps = [
    ":stub_logger",
    "//garnet/public/lib/async_promise",
    "//garnet/public/lib/fostr/fidl/fuchsia.mem",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/gtest",
    "//garnet/public/lib/syslog/cpp",
    "//sdk/lib/sys/cpp/testing:unit",
    "//src/developer/feedback/feedback_agent:src",
    "//src/lib/fxl",
    "//src/lib/fxl/test:test_settings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/fidl/fuchsia-mem",
    "//zircon/public/lib/zx",
  ]
}

executable("feedback_agent_integration_test") {
  testonly = true

  sources = [
    "feedback_agent_integration_test.cc",
  ]

  deps = [
    ":zx_object_util",
    "//garnet/public/lib/fostr/fidl/fuchsia.feedback",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/gtest",
    "//garnet/public/lib/syslog/cpp",
    "//sdk/fidl/fuchsia.feedback",
    "//sdk/fidl/fuchsia.sys",
    "//sdk/lib/fidl/cpp",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/sys/cpp/testing:integration",
    "//src/lib/fxl/test:gtest_main",
    "//src/ui/lib/escher/test:gtest_vulkan",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/fidl/fuchsia-logger",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/zx",
  ]
}

executable("feedback_agent_integration_test_invalid_override_config") {
  testonly = true

  sources = [
    "feedback_agent_integration_test_invalid_override_config.cc",
  ]

  deps = [
    "//garnet/public/lib/fostr/fidl/fuchsia.feedback",
    "//sdk/fidl/fuchsia.feedback",
    "//sdk/lib/sys/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("feedback_agent_integration_test_valid_override_config") {
  testonly = true

  sources = [
    "feedback_agent_integration_test_valid_override_config.cc",
  ]

  deps = [
    "//garnet/public/lib/fostr/fidl/fuchsia.feedback",
    "//sdk/fidl/fuchsia.feedback",
    "//sdk/lib/sys/cpp",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("scenic_ptr_unittest") {
  testonly = true

  sources = [
    "scenic_ptr_unittest.cc",
  ]

  deps = [
    ":stub_scenic",
    "//garnet/public/lib/async_promise",
    "//garnet/public/lib/gtest",
    "//garnet/public/lib/syslog/cpp",
    "//sdk/fidl/fuchsia.ui.scenic",
    "//sdk/lib/sys/cpp/testing:unit",
    "//src/developer/feedback/feedback_agent:src",
    "//src/lib/fxl",
    "//src/lib/fxl/test:test_settings",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

source_set("stub_channel_provider") {
  sources = [
    "stub_channel_provider.cc",
    "stub_channel_provider.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.update",
    "//sdk/lib/fidl/cpp",
  ]
}

source_set("stub_logger") {
  sources = [
    "stub_logger.cc",
    "stub_logger.h",
  ]

  public_deps = [
    "//garnet/public/lib/syslog/cpp",
    "//sdk/lib/fidl/cpp",
    "//zircon/public/fidl/fuchsia-logger",
    "//zircon/public/lib/zx",
  ]
}

source_set("stub_scenic") {
  sources = [
    "stub_scenic.cc",
    "stub_scenic.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.ui.scenic",
    "//sdk/lib/fidl/cpp",
    "//src/lib/fxl",
  ]

  deps = [
    "//sdk/fidl/fuchsia.images",
    "//zircon/public/lib/zx",
  ]
}

source_set("zx_object_util") {
  sources = [
    "zx_object_util.cc",
    "zx_object_util.h",
  ]

  public_deps = [
    "//src/lib/fxl",
    "//zircon/public/lib/zx",
  ]
}

config_data("valid_override_config") {
  for_pkg = "fake_feedback_agent_valid_override_config"

  sources = [
    "configs/valid_override.json",
  ]

  outputs = [
    "override_config.json",
  ]
}

config_data("invalid_override_config") {
  for_pkg = "fake_feedback_agent_invalid_override_config"

  sources = [
    "configs/invalid_override.json",
  ]

  outputs = [
    "override_config.json",
  ]
}
