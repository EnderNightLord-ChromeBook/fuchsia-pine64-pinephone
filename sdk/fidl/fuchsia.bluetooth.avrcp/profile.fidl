// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.bluetooth.avrcp;

using zx;

[Discoverable]
protocol Avrcp {
    /// Returns a client to a remote target (TG) service at the address specified by |peer_id|.
    /// TODO (BT-305): change peer_id to int.
    GetControllerForTarget(string peer_id, request<Controller> client) -> () error zx.status;
};

/// Event data from incoming target notifications.
table Notification {
    1: zx.time timestamp;

    /// EVENT_PLAYBACK_STATUS_CHANGED event data
    2: PlaybackStatus status;

    /// EVENT_TRACK_CHANGED event data
    3: uint64 track_id;

    /// EVENT_TRACK_POS_CHANGED event data
    4: uint32 pos;

    /// EVENT_BATT_STATUS_CHANGED event data
    5: BatteryStatus battery_status;

    /// EVENT_SYSTEM_STATUS_CHANGED event data
    6: SystemStatus system_status;

    /// EVENT_PLAYER_APPLICATION_SETTINGS_CHANGED event data
    7: PlayerApplicationSettings application_settings;

    /// EVENT_ADDRESSED_PLAYER_CHANGED event data
    8: uint16 player_id;

    /// EVENT_VOLUME_CHANGED event data
    9: uint8 volume;
};

/// Client wrapper for local controller (CT) -> remote target (TG) AVCTP connections between devices.
/// A client is high level construct and does not represent a connection with a device.
/// Connections are internally managed and may be shared by multiple clients.
/// The actual connection may be opened on-demand after any command here is called.
protocol Controller {
    /// Returns the remote PlayerApplicationSettings.
    GetPlayerApplicationSettings() -> (PlayerApplicationSettings settings) error ControllerError;

    /// Returns the currently playing media attributes.
    /// May send either the GetElementAttributes or GetItemAttributes command depending on what
    /// is supported.
    GetMediaAttributes() -> (MediaAttributes attributes) error ControllerError;

    /// Sets the absolute volume on the device. Values can range from 0x00 to 0x7F
    /// (with 100% volume being 0x7F). This is in addition to the relative volume change
    /// commands that can be sent over AV\C. You will get a volume changed notification event
    /// as part of successfully sending this.
    SetAbsoluteVolume(uint8 volume) -> () error ControllerError;

    /// Infrom target of the controller's battery level.
    InformBatteryStatus(BatteryStatus battery_status) -> () error ControllerError;

    /// Incoming events from the target.
    -> OnNotification(Notification notif);

    /// Changes the addressed |player_id| on the target when multiple are supported.
    SetAddressedPlayer(uint16 player_id) -> () error ControllerError;

    /// Send an AV\C passthrough key command. Sends both a key down and key up event.
    SendCommand(AvcPanelCommand command) -> () error ControllerError;
};
