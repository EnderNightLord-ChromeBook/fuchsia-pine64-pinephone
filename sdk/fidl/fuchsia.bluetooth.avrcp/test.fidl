// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.bluetooth.avrcp;

using zx;

[Discoverable]
protocol TestAvrcp {
    /// Sets an implementation of target handler that will vend delegates for each incoming
    /// remote TG -> local CT connections to handle the commands being sent by the remote TG.
    /// If no target handler is set, a default handler will be used internally that will
    /// dispatch to the MediaSession service. This should only be used for debug and testing.
    RegisterIncomingTargetHandler(TargetHandler handler);

    /// Returns a test client to a remote target service at the address specified by |peer_id|.
    /// This client is to be used in conjunction the non test client from the primary Avrcp service.
    /// The test client provides additional methods not exposed by normal client to be used
    /// for debugging and testing purposes.
    /// TODO (BT-305): change peer_id to int.
    GetTestControllerForTarget(string peer_id, request<TestController> client) -> () error zx.status;
};

/// An implementation of this interface is registered with the AvrcpTest service to handle
/// incoming connections.
protocol TargetHandler {
    /// Called when an incoming target is connected. |delegate| should be fulfilled with an
    /// interface that will be used to handle commands from the connected Controller.
    /// TODO (BT-305): change device_id to int.
    ControllerConnected(string peer_id, request<TargetDelegate> delegate);
};

/// Defined by AV\C Panel specification.
enum ResponseCode {
    NOT_IMPLEMENTED = 0x08;
    ACCEPTED = 0x09;
    REJECTED = 0x0A;
    IN_TRANSITION = 0x0B;
    IMPLEMENTED_STABLE = 0x0C;
    CHANGED = 0x0D;
    INTERIM = 0x0F;
};

/// Returned by an implementer of the TargetHandler interface.
/// Handles incoming connection commands by a remote CT device.
protocol TargetDelegate {
    /// Called after Panel key down and up events.
    OnCommand(AvcPanelCommand command) -> (ResponseCode code);
};

/// Provides methods not exposed in `Controller` that are strictly for testing and debug.
protocol TestController {
    /// Returns whether there is an underlying connection open with the remote device currently.
    IsConnected() -> (bool connected);

    /// Queries the target and returns what events are supported for notification.
    /// Sends GetCapabilties(0x03 (EVENTS_SUPPORTED)) command for all events supported by
    /// the negoitated version of AVRCP.
    GetEventsSupported() -> (vector<TargetEvent> events_supported) error ControllerError;

    /// Explicitly connect to the remote device.
    Connect();

    /// Explicitly disconnect the L2CAP channel to the remote.
    /// Be warned that other clients may be sharing this L2CAP connection.
    Disconnect();

    /// Send raw vendor depedent command
    SendRawVendorDependentCommand(uint8 pdu_id, bytes command) -> (bytes response) error ControllerError;
};
