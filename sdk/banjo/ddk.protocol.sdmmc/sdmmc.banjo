// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library ddk.protocol.sdmmc;

using zx;

enum SdmmcVoltage : uint8 {
    V330 = 0;
    V180 = 1;
    MAX = 2;
};

enum SdmmcBusWidth : uint8 {
    ONE = 0;
    FOUR = 1;
    EIGHT = 2;
    MAX = 3;
};

enum SdmmcTiming : uint8 {
    LEGACY = 0;
    HS = 1;
    HSDDR = 2;
    HS200 = 3;
    HS400 = 4;
    SDR12 = 5;
    SDR25 = 6;
    SDR50 = 7;
    SDR104 = 8;
    DDR50 = 9;
    MAX = 10;
};

/// The number of VMOs that may be registered at one time. This is an arbitrary limit set to
/// simplify VMO management by implementers of the protocol.
const uint64 SDMMC_MAX_REGISTERED_VMOS = 16;

union SdmmcBuffer {
    /// The ID of a VMO that was previously registered.
    uint32 vmo_id;
    /// An unregistered VMO of which the protocol implementation does not take ownership. The VMO is
    /// pinned upon entering Request and is unpinned before returning.
    handle<vmo> vmo;
};

enum SdmmcBufferType : uint32 {
    VMO_ID = 1;
    VMO_HANDLE = 2;
};

struct SdmmcBufferRegion {
    SdmmcBuffer buffer;
    SdmmcBufferType type;
    /// Offset into the VMO to start reading or writing. This is relative to the offset passed to
    /// RegisterVmo if type is VMO_ID.
    uint64 offset;
    /// Number of bytes to read from or write to this buffer region.
    uint64 size;
};

struct SdmmcReqNew {
    uint32 cmd_idx;
    uint32 cmd_flags;
    uint32 arg;

    uint32 blockcount;
    uint32 blocksize;

    vector<SdmmcBufferRegion> buffers;
};

/// number of pages per request - 2M per request
/// matches DMA_DESC_COUNT in dev/block/sdhci
/// (PAGE_SIZE / sizeof(zx_paddr_t))
const uint64 SDMMC_PAGES_COUNT = 512;

/// sdmmc requests. one per command
struct SdmmcReq {
    uint32 cmd_idx;
    uint32 cmd_flags;
    uint32 arg;

    /// data command parameters
    uint16 blockcount;
    uint16 blocksize;
    bool use_dma;
    /// Used if use_dma is true
    handle<vmo> dma_vmo;
    /// Used if use_dma is false
    vector<voidptr>? virt;
    /// offset into dma_vmo or virt
    uint64 buf_offset;
    handle pmt;
    bool probe_tuning_cmd;

    /// response data
    array<uint32>:4 response;

    /// status
    zx.status status;
};

enum SdmmcHostCap : uint64 {
    BUS_WIDTH_8 = 0x1;
    DMA = 0x2;
    VOLTAGE_330 = 0x4;
    AUTO_CMD12 = 0x8;
    SDR104 = 0x10;
    SDR50 = 0x20;
    DDR50 = 0x40;
    /// The host does not require tuning for SDR50.
    NO_TUNING_SDR50 = 0x80;
    REQUEST_NEW = 0x100;
};

enum SdmmcHostPrefs : uint64 {
    DISABLE_HS400 = 0x1;
    DISABLE_HS200 = 0x2;
};

struct SdmmcHostInfo {
    /// Controller capabilities
    uint64 caps;
    /// Maximum data request size
    uint64 max_transfer_size;
    uint64 max_transfer_size_non_dma;
    /// Host specific preferences
    uint64 prefs;
};

[Layout = "ddk-interface"]
protocol InBandInterrupt {
    Callback() -> ();
};

[Layout = "ddk-protocol"]
protocol Sdmmc {
    /// Get host info.
    HostInfo() -> (zx.status s, SdmmcHostInfo info);
    /// Set signal voltage.
    SetSignalVoltage(SdmmcVoltage voltage) -> (zx.status s);
    /// Set bus width.
    SetBusWidth(SdmmcBusWidth bus_width) -> (zx.status s);
    /// Set bus frequency, zero means disable the clock to the card.
    SetBusFreq(uint32 bus_freq) -> (zx.status s);
    /// Set mmc timing.
    SetTiming(SdmmcTiming timing) -> (zx.status s);
    /// Issue a hw reset.
    HwReset() -> ();
    /// Perform tuning.
    PerformTuning(uint32 cmd_idx) -> (zx.status s);
    /// Issue a request.
    Request(SdmmcReq? req) -> (zx.status s);
    RegisterInBandInterrupt(InBandInterrupt? interrupt_cb) -> (zx.status s);

    /// In the methods below, vmo_id is used to uniquely identify a VMO that will be passed to
    /// Request in an SdmmcBufferRegion. VMO IDs are chosen by the caller, and may be any uint32
    /// value.

    /// Registers a VMO and transfers ownership to the protocol implementation. The implementation
    /// may map vmo with ZX_VM_PERM_READ and ZX_VM_PERM_WRITE and/or pin it with ZX_BTI_PERM_READ
    /// and ZX_BTI_PERM_WRITE. The implementation may pin vmo during this call or any time it is
    /// used in a request, and may keep it pinned until the VMO is unregistered.
    RegisterVmo(uint32 vmo_id, handle<vmo> vmo, uint64 offset, uint64 size) -> (zx.status status);
    /// The callee unmaps/unpins the VMO and returns ownership to the caller.
    UnregisterVmo(uint32 vmo_id) -> (zx.status status, handle<vmo> vmo);

    /// Perform the request. The protocol implementation chooses whether or not to use DMA depending
    /// on the properties of the request and the capabilities of the controller.
    RequestNew(SdmmcReqNew req) -> (zx.status status, array<uint32>:4 response);
};
