// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/socket.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct WithErrorSyntax_ErrorAsPrimitive_Response;
struct WithErrorSyntax_ErrorAsPrimitive_Result;
struct WithErrorSyntax_ErrorAsEnum_Response;
class KitchenSink;
class ChannelProtocol;
class SocketControlProtocol;
class OvernetInternalProtocol;
class WithAndWithoutRequestResponse;
enum class ErrorEnun : uint32_t {
  ERR_FOO = 1u,
  ERR_BAR = 2u,
};


struct WithErrorSyntax_ErrorAsEnum_Result;
class WithErrorSyntax;



struct WithErrorSyntax_ErrorAsPrimitive_Response {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint8_t __reserved{};
};

extern "C" const fidl_type_t test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTable;

struct WithErrorSyntax_ErrorAsPrimitive_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  WithErrorSyntax_ErrorAsPrimitive_Result();
  ~WithErrorSyntax_ErrorAsPrimitive_Result();

  WithErrorSyntax_ErrorAsPrimitive_Result(WithErrorSyntax_ErrorAsPrimitive_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  WithErrorSyntax_ErrorAsPrimitive_Result& operator=(WithErrorSyntax_ErrorAsPrimitive_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  WithErrorSyntax_ErrorAsPrimitive_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, WithErrorSyntax_ErrorAsPrimitive_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, WithErrorSyntax_ErrorAsPrimitive_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  WithErrorSyntax_ErrorAsPrimitive_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  uint32_t& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  uint32_t const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(WithErrorSyntax_ErrorAsPrimitive_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    WithErrorSyntax_ErrorAsPrimitive_Response response_;
    uint32_t err_;
  };
};



struct WithErrorSyntax_ErrorAsEnum_Response {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint8_t __reserved{};
};

extern "C" const fidl_type_t test_name_KitchenSinkMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_KitchenSinkMutateSocketResponseTable;

class KitchenSink final {
 public:

  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;

    static constexpr const fidl_type_t* Type = &test_name_KitchenSinkMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;

    static constexpr const fidl_type_t* Type = &test_name_KitchenSinkMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MutateSocketResponse;
  };


  struct EventHandlers {
    fit::function<zx_status_t(int64_t a, int64_t b)> event_a;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t MutateSocket(::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t MethodA(zx::unowned_channel _client_end, int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodARequest> params);

    static zx_status_t MethodB(zx::unowned_channel _client_end, int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t MutateSocket(zx::unowned_channel _client_end, ::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = KitchenSink;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

    class MutateSocketCompleterBase : public _Base {
     public:
      void Reply(::zx::socket b);
      void Reply(::fidl::BytePart _buffer, ::zx::socket b);
      void Reply(::fidl::DecodedMessage<MutateSocketResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

    virtual void MutateSocket(::zx::socket a, MutateSocketCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};

extern "C" const fidl_type_t test_name_ChannelProtocolMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMutateSocketResponseTable;

class ChannelProtocol final {
 public:

  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;

    static constexpr const fidl_type_t* Type = &test_name_ChannelProtocolMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;

    static constexpr const fidl_type_t* Type = &test_name_ChannelProtocolMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MutateSocketResponse;
  };


  struct EventHandlers {
    fit::function<zx_status_t(int64_t a, int64_t b)> event_a;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t MutateSocket(::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t MethodA(zx::unowned_channel _client_end, int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodARequest> params);

    static zx_status_t MethodB(zx::unowned_channel _client_end, int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t MutateSocket(zx::unowned_channel _client_end, ::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = ChannelProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

    class MutateSocketCompleterBase : public _Base {
     public:
      void Reply(::zx::socket b);
      void Reply(::fidl::BytePart _buffer, ::zx::socket b);
      void Reply(::fidl::DecodedMessage<MutateSocketResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

    virtual void MutateSocket(::zx::socket a, MutateSocketCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};

extern "C" const fidl_type_t test_name_SocketControlProtocolMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_SocketControlProtocolMutateSocketResponseTable;

class SocketControlProtocol final {
 public:

  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;

    static constexpr const fidl_type_t* Type = &test_name_SocketControlProtocolMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;

    static constexpr const fidl_type_t* Type = &test_name_SocketControlProtocolMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MutateSocketResponse;
  };


  struct EventHandlers {
    fit::function<zx_status_t(int64_t a, int64_t b)> event_a;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t MutateSocket(::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t MethodA(zx::unowned_channel _client_end, int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodARequest> params);

    static zx_status_t MethodB(zx::unowned_channel _client_end, int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t MutateSocket(zx::unowned_channel _client_end, ::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = SocketControlProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

    class MutateSocketCompleterBase : public _Base {
     public:
      void Reply(::zx::socket b);
      void Reply(::fidl::BytePart _buffer, ::zx::socket b);
      void Reply(::fidl::DecodedMessage<MutateSocketResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

    virtual void MutateSocket(::zx::socket a, MutateSocketCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};

extern "C" const fidl_type_t test_name_OvernetInternalProtocolMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMutateSocketResponseTable;

class OvernetInternalProtocol final {
 public:

  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;

    static constexpr const fidl_type_t* Type = &test_name_OvernetInternalProtocolMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;

    static constexpr const fidl_type_t* Type = &test_name_OvernetInternalProtocolMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MutateSocketResponse;
  };


  struct EventHandlers {
    fit::function<zx_status_t(int64_t a, int64_t b)> event_a;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t MutateSocket(::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t MethodA(zx::unowned_channel _client_end, int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    static zx_status_t MethodA(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodARequest> params);

    static zx_status_t MethodB(zx::unowned_channel _client_end, int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MethodBResponse> MethodB(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t MutateSocket(zx::unowned_channel _client_end, ::zx::socket a, ::zx::socket* out_b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::socket a, ::fidl::BytePart _response_buffer, ::zx::socket* out_b);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MutateSocketResponse> MutateSocket(zx::unowned_channel _client_end, ::fidl::DecodedMessage<MutateSocketRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = OvernetInternalProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

    class MutateSocketCompleterBase : public _Base {
     public:
      void Reply(::zx::socket b);
      void Reply(::fidl::BytePart _buffer, ::zx::socket b);
      void Reply(::fidl::DecodedMessage<MutateSocketResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

    virtual void MutateSocket(::zx::socket a, MutateSocketCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};

extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;
extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;
extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;
extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;
extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
extern "C" const fidl_type_t test_name_WithAndWithoutRequestResponseOnWithResponseEventTable;

class WithAndWithoutRequestResponse final {
 public:

  using NoRequestNoResponseRequest = ::fidl::AnyZeroArgMessage;

  using NoRequestEmptyResponseResponse = ::fidl::AnyZeroArgMessage;
  using NoRequestEmptyResponseRequest = ::fidl::AnyZeroArgMessage;

  struct NoRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
  };
  using NoRequestWithResponseRequest = ::fidl::AnyZeroArgMessage;

  struct WithRequestNoResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
  };

  using WithRequestEmptyResponseResponse = ::fidl::AnyZeroArgMessage;
  struct WithRequestEmptyResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
  };

  struct WithRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
  };
  struct WithRequestWithResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    using ResponseType = WithRequestWithResponseResponse;
  };

  using OnEmptyResponseResponse = ::fidl::AnyZeroArgMessage;
  struct OnWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;

    static constexpr const fidl_type_t* Type = &test_name_WithAndWithoutRequestResponseOnWithResponseEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
  };

  struct EventHandlers {
    fit::function<zx_status_t()> on_empty_response;

    fit::function<zx_status_t(::fidl::StringView ret)> on_with_response;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t NoRequestNoResponse();

    zx_status_t NoRequestEmptyResponse();


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<NoRequestWithResponseResponse> NoRequestWithResponse(::fidl::BytePart _response_buffer, ::fidl::StringView* out_ret);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<NoRequestWithResponseResponse> NoRequestWithResponse(::fidl::BytePart response_buffer);

    zx_status_t WithRequestNoResponse(::fidl::StringView arg);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t WithRequestNoResponse(::fidl::BytePart _request_buffer, ::fidl::StringView arg);

    // Messages are encoded and decoded in-place.
    zx_status_t WithRequestNoResponse(::fidl::DecodedMessage<WithRequestNoResponseRequest> params);

    zx_status_t WithRequestEmptyResponse(::fidl::StringView arg);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WithRequestEmptyResponseResponse> WithRequestEmptyResponse(::fidl::BytePart _request_buffer, ::fidl::StringView arg);

    // Messages are encoded and decoded in-place.
    zx_status_t WithRequestEmptyResponse(::fidl::DecodedMessage<WithRequestEmptyResponseRequest> params);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WithRequestWithResponseResponse> WithRequestWithResponse(::fidl::BytePart _request_buffer, ::fidl::StringView arg, ::fidl::BytePart _response_buffer, ::fidl::StringView* out_ret);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WithRequestWithResponseResponse> WithRequestWithResponse(::fidl::DecodedMessage<WithRequestWithResponseRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t NoRequestNoResponse(zx::unowned_channel _client_end);

    static zx_status_t NoRequestEmptyResponse(zx::unowned_channel _client_end);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<NoRequestWithResponseResponse> NoRequestWithResponse(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::fidl::StringView* out_ret);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<NoRequestWithResponseResponse> NoRequestWithResponse(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t WithRequestNoResponse(zx::unowned_channel _client_end, ::fidl::StringView arg);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t WithRequestNoResponse(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView arg);

    // Messages are encoded and decoded in-place.
    static zx_status_t WithRequestNoResponse(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WithRequestNoResponseRequest> params);

    static zx_status_t WithRequestEmptyResponse(zx::unowned_channel _client_end, ::fidl::StringView arg);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WithRequestEmptyResponseResponse> WithRequestEmptyResponse(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView arg);

    // Messages are encoded and decoded in-place.
    static zx_status_t WithRequestEmptyResponse(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WithRequestEmptyResponseRequest> params);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WithRequestWithResponseResponse> WithRequestWithResponse(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView arg, ::fidl::BytePart _response_buffer, ::fidl::StringView* out_ret);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WithRequestWithResponseResponse> WithRequestWithResponse(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WithRequestWithResponseRequest> params, ::fidl::BytePart response_buffer);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = WithAndWithoutRequestResponse;
    using _Base = ::fidl::CompleterBase;

    using NoRequestNoResponseCompleter = ::fidl::Completer<>;

    virtual void NoRequestNoResponse(NoRequestNoResponseCompleter::Sync _completer) = 0;

    class NoRequestEmptyResponseCompleterBase : public _Base {
     public:
      void Reply();

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using NoRequestEmptyResponseCompleter = ::fidl::Completer<NoRequestEmptyResponseCompleterBase>;

    virtual void NoRequestEmptyResponse(NoRequestEmptyResponseCompleter::Sync _completer) = 0;

    class NoRequestWithResponseCompleterBase : public _Base {
     public:
      void Reply(::fidl::StringView ret);
      void Reply(::fidl::BytePart _buffer, ::fidl::StringView ret);
      void Reply(::fidl::DecodedMessage<NoRequestWithResponseResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using NoRequestWithResponseCompleter = ::fidl::Completer<NoRequestWithResponseCompleterBase>;

    virtual void NoRequestWithResponse(NoRequestWithResponseCompleter::Sync _completer) = 0;

    using WithRequestNoResponseCompleter = ::fidl::Completer<>;

    virtual void WithRequestNoResponse(::fidl::StringView arg, WithRequestNoResponseCompleter::Sync _completer) = 0;

    class WithRequestEmptyResponseCompleterBase : public _Base {
     public:
      void Reply();

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WithRequestEmptyResponseCompleter = ::fidl::Completer<WithRequestEmptyResponseCompleterBase>;

    virtual void WithRequestEmptyResponse(::fidl::StringView arg, WithRequestEmptyResponseCompleter::Sync _completer) = 0;

    class WithRequestWithResponseCompleterBase : public _Base {
     public:
      void Reply(::fidl::StringView ret);
      void Reply(::fidl::BytePart _buffer, ::fidl::StringView ret);
      void Reply(::fidl::DecodedMessage<WithRequestWithResponseResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WithRequestWithResponseCompleter = ::fidl::Completer<WithRequestWithResponseCompleterBase>;

    virtual void WithRequestWithResponse(::fidl::StringView arg, WithRequestWithResponseCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendOnEmptyResponseEvent(::zx::unowned_channel _chan);

  static zx_status_t SendOnWithResponseEvent(::zx::unowned_channel _chan, ::fidl::StringView ret);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendOnWithResponseEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, ::fidl::StringView ret);

  // Messages are encoded in-place.
  static zx_status_t SendOnWithResponseEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<OnWithResponseResponse> params);

};

extern "C" const fidl_type_t test_name_WithErrorSyntax_ErrorAsEnum_ResultTable;

struct WithErrorSyntax_ErrorAsEnum_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  WithErrorSyntax_ErrorAsEnum_Result();
  ~WithErrorSyntax_ErrorAsEnum_Result();

  WithErrorSyntax_ErrorAsEnum_Result(WithErrorSyntax_ErrorAsEnum_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  WithErrorSyntax_ErrorAsEnum_Result& operator=(WithErrorSyntax_ErrorAsEnum_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  WithErrorSyntax_ErrorAsEnum_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, WithErrorSyntax_ErrorAsEnum_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, WithErrorSyntax_ErrorAsEnum_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  WithErrorSyntax_ErrorAsEnum_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  ErrorEnun& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ErrorEnun>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ErrorEnun>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  ErrorEnun const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_name_WithErrorSyntax_ErrorAsEnum_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(WithErrorSyntax_ErrorAsEnum_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    WithErrorSyntax_ErrorAsEnum_Response response_;
    ErrorEnun err_;
  };
};

extern "C" const fidl_type_t test_name_WithErrorSyntaxErrorAsPrimitiveResponseTable;
extern "C" const fidl_type_t test_name_WithErrorSyntaxErrorAsEnumResponseTable;

class WithErrorSyntax final {
 public:

  struct ErrorAsPrimitiveResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    WithErrorSyntax_ErrorAsPrimitive_Result result;

    static constexpr const fidl_type_t* Type = &test_name_WithErrorSyntaxErrorAsPrimitiveResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using ErrorAsPrimitiveRequest = ::fidl::AnyZeroArgMessage;

  struct ErrorAsEnumResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    WithErrorSyntax_ErrorAsEnum_Result result;

    static constexpr const fidl_type_t* Type = &test_name_WithErrorSyntaxErrorAsEnumResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using ErrorAsEnumRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t ErrorAsPrimitive(WithErrorSyntax_ErrorAsPrimitive_Result* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ErrorAsPrimitiveResponse> ErrorAsPrimitive(::fidl::BytePart _response_buffer, WithErrorSyntax_ErrorAsPrimitive_Result* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ErrorAsPrimitiveResponse> ErrorAsPrimitive(::fidl::BytePart response_buffer);

    zx_status_t ErrorAsEnum(WithErrorSyntax_ErrorAsEnum_Result* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ErrorAsEnumResponse> ErrorAsEnum(::fidl::BytePart _response_buffer, WithErrorSyntax_ErrorAsEnum_Result* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ErrorAsEnumResponse> ErrorAsEnum(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t ErrorAsPrimitive(zx::unowned_channel _client_end, WithErrorSyntax_ErrorAsPrimitive_Result* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ErrorAsPrimitiveResponse> ErrorAsPrimitive(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, WithErrorSyntax_ErrorAsPrimitive_Result* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ErrorAsPrimitiveResponse> ErrorAsPrimitive(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t ErrorAsEnum(zx::unowned_channel _client_end, WithErrorSyntax_ErrorAsEnum_Result* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ErrorAsEnumResponse> ErrorAsEnum(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, WithErrorSyntax_ErrorAsEnum_Result* out_result);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ErrorAsEnumResponse> ErrorAsEnum(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = WithErrorSyntax;
    using _Base = ::fidl::CompleterBase;

    class ErrorAsPrimitiveCompleterBase : public _Base {
     public:
      void Reply(WithErrorSyntax_ErrorAsPrimitive_Result result);
      void Reply(::fidl::BytePart _buffer, WithErrorSyntax_ErrorAsPrimitive_Result result);
      void Reply(::fidl::DecodedMessage<ErrorAsPrimitiveResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ErrorAsPrimitiveCompleter = ::fidl::Completer<ErrorAsPrimitiveCompleterBase>;

    virtual void ErrorAsPrimitive(ErrorAsPrimitiveCompleter::Sync _completer) = 0;

    class ErrorAsEnumCompleterBase : public _Base {
     public:
      void Reply(WithErrorSyntax_ErrorAsEnum_Result result);
      void Reply(::fidl::BytePart _buffer, WithErrorSyntax_ErrorAsEnum_Result result);
      void Reply(::fidl::DecodedMessage<ErrorAsEnumResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ErrorAsEnumCompleter = ::fidl::Completer<ErrorAsEnumCompleterBase>;

    virtual void ErrorAsEnum(ErrorAsEnumCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>);
static_assert(offsetof(::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response, __reserved) == 0);
static_assert(sizeof(::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response) == ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result>);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>);
static_assert(offsetof(::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response, __reserved) == 0);
static_assert(sizeof(::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response) == ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::MethodARequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::MethodARequest)
    == ::llcpp::test::name::KitchenSink::MethodARequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MethodARequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MethodARequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::EventAResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::EventAResponse)
    == ::llcpp::test::name::KitchenSink::EventAResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::EventAResponse, a) == 16);
static_assert(offsetof(::llcpp::test::name::KitchenSink::EventAResponse, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::MethodBRequest)
    == ::llcpp::test::name::KitchenSink::MethodBRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MethodBRequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::MethodBResponse)
    == ::llcpp::test::name::KitchenSink::MethodBResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::MutateSocketRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::MutateSocketRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::MutateSocketRequest)
    == ::llcpp::test::name::KitchenSink::MutateSocketRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MutateSocketRequest, a) == 16);

template <>
struct IsFidlType<::llcpp::test::name::KitchenSink::MutateSocketResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::KitchenSink::MutateSocketResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::KitchenSink::MutateSocketResponse)
    == ::llcpp::test::name::KitchenSink::MutateSocketResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::KitchenSink::MutateSocketResponse, b) == 16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::MethodARequest)
    == ::llcpp::test::name::ChannelProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::EventAResponse)
    == ::llcpp::test::name::ChannelProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::MethodBRequest)
    == ::llcpp::test::name::ChannelProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::MethodBResponse)
    == ::llcpp::test::name::ChannelProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MutateSocketRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MutateSocketRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::MutateSocketRequest)
    == ::llcpp::test::name::ChannelProtocol::MutateSocketRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MutateSocketRequest, a) == 16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MutateSocketResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MutateSocketResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::ChannelProtocol::MutateSocketResponse)
    == ::llcpp::test::name::ChannelProtocol::MutateSocketResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MutateSocketResponse, b) == 16);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::MethodARequest)
    == ::llcpp::test::name::SocketControlProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::EventAResponse)
    == ::llcpp::test::name::SocketControlProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::MethodBRequest)
    == ::llcpp::test::name::SocketControlProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::MethodBResponse)
    == ::llcpp::test::name::SocketControlProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::MutateSocketRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::MutateSocketRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::MutateSocketRequest)
    == ::llcpp::test::name::SocketControlProtocol::MutateSocketRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MutateSocketRequest, a) == 16);

template <>
struct IsFidlType<::llcpp::test::name::SocketControlProtocol::MutateSocketResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::SocketControlProtocol::MutateSocketResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::SocketControlProtocol::MutateSocketResponse)
    == ::llcpp::test::name::SocketControlProtocol::MutateSocketResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::SocketControlProtocol::MutateSocketResponse, b) == 16);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::MethodARequest)
    == ::llcpp::test::name::OvernetInternalProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::EventAResponse)
    == ::llcpp::test::name::OvernetInternalProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::MethodBRequest)
    == ::llcpp::test::name::OvernetInternalProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::MethodBResponse)
    == ::llcpp::test::name::OvernetInternalProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::MutateSocketRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::MutateSocketRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::MutateSocketRequest)
    == ::llcpp::test::name::OvernetInternalProtocol::MutateSocketRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MutateSocketRequest, a) == 16);

template <>
struct IsFidlType<::llcpp::test::name::OvernetInternalProtocol::MutateSocketResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::OvernetInternalProtocol::MutateSocketResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::OvernetInternalProtocol::MutateSocketResponse)
    == ::llcpp::test::name::OvernetInternalProtocol::MutateSocketResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::OvernetInternalProtocol::MutateSocketResponse, b) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::NoRequestWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::NoRequestWithResponseResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::NoRequestWithResponseResponse)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::NoRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::NoRequestWithResponseResponse, ret) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestNoResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestNoResponseRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestNoResponseRequest)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestNoResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestNoResponseRequest, arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestEmptyResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestEmptyResponseRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestEmptyResponseRequest)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestEmptyResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestEmptyResponseRequest, arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseRequest)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseRequest, arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseResponse)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::WithRequestWithResponseResponse, ret) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse)
    == ::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse, ret) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result>);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse)
    == ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse)
    == ::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse, result) == 16);

}  // namespace fidl
