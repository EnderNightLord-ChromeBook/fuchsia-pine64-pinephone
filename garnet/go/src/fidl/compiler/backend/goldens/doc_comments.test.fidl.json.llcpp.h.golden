// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct Union;
using Table = ::fidl::VectorView<fidl_envelope_t>;
struct Struct;
class Interface;

extern "C" const fidl_type_t test_name_UnionTable;

// union comment #1
//
// union comment #3
struct Union {
  enum class Tag : fidl_union_tag_t {
    kField = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Union();
  ~Union();

  Union(Union&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Union& operator=(Union&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_Field() const { return tag_ == Tag::kField; }

  // union member comment #1
  //
  // union member comment #3
  int32_t& mutable_Field();

  // union member comment #1
  //
  // union member comment #3
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Field(const T& v) {
    mutable_Field() = v;
  }

  // union member comment #1
  //
  // union member comment #3
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Field(T&& v) {
    mutable_Field() = std::move(v);
  }

  // union member comment #1
  //
  // union member comment #3
  int32_t const & Field() const { return Field_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_name_UnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(Union&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    int32_t Field_;
  };
};



// struct comment #1
//
// struct comment #3
struct Struct {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // struct member comment #1
  //
  // struct member comment #3
  int32_t Field{};
};

// interface comment #1
//
// interface comment #3
class Interface final {
 public:

  using MethodRequest = ::fidl::AnyZeroArgMessage;

  using OnEventResponse = ::fidl::AnyZeroArgMessage;

  struct EventHandlers {
    // event comment #1
    //
    // event comment #3
    fit::function<zx_status_t()> on_event;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // method comment #1
    //
    // method comment #3
    zx_status_t Method();

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // method comment #1
    //
    // method comment #3
    static zx_status_t Method(zx::unowned_channel _client_end);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Interface;
    using _Base = ::fidl::CompleterBase;

    using MethodCompleter = ::fidl::Completer<>;

    virtual void Method(MethodCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  // event comment #1
  //
  // event comment #3
  static zx_status_t SendOnEventEvent(::zx::unowned_channel _chan);

};

// const comment #1
//
// const comment #3
constexpr int32_t C = 4u;

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Union> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Union>);

template <>
struct IsFidlType<::llcpp::test::name::Struct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Struct>);
static_assert(offsetof(::llcpp::test::name::Struct, Field) == 0);
static_assert(sizeof(::llcpp::test::name::Struct) == ::llcpp::test::name::Struct::PrimarySize);

}  // namespace fidl
