// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

#ifdef __Fuchsia__
class SwitchingOrdinals;
using SwitchingOrdinalsPtr = ::fidl::InterfacePtr<SwitchingOrdinals>;
class SwitchingOrdinals_Proxy;
class SwitchingOrdinals_Stub;
class SwitchingOrdinals_EventSender;
class SwitchingOrdinals_Sync;
using SwitchingOrdinalsSyncPtr = ::fidl::SynchronousInterfacePtr<SwitchingOrdinals>;
class SwitchingOrdinals_SyncProxy;
namespace internal {
constexpr uint64_t kSwitchingOrdinals_OrdinalFive_GenOrdinal = 0x7784636700000000lu;
constexpr uint64_t kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal = 0x27c9581f00000000lu;
constexpr uint64_t kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal = 0x577495a100000000lu;
constexpr uint64_t kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal = 0x7fec464e00000000lu;

}  // namespace
#endif // __Fuchsia__
#ifdef __Fuchsia__

class SwitchingOrdinals {
 public:
  using Proxy_ = SwitchingOrdinals_Proxy;
  using Stub_ = SwitchingOrdinals_Stub;
  using EventSender_ = SwitchingOrdinals_EventSender;
  using Sync_ = SwitchingOrdinals_Sync;
  virtual ~SwitchingOrdinals();
      
  virtual void OrdinalFive() = 0;
      
  virtual void OnlyGeneratedOrdinal() = 0;
  using EventOrdinalFifteenCallback =
      fit::function<void()>;
  using EventOnlyGeneratedOrdinalCallback =
      fit::function<void()>;
};

class SwitchingOrdinals_RequestEncoder {
 public:
  static ::fidl::Message OrdinalFive(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
  static ::fidl::Message OnlyGeneratedOrdinal(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
};

class SwitchingOrdinals_RequestDecoder {
 public:
  SwitchingOrdinals_RequestDecoder() = default;
  virtual ~SwitchingOrdinals_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  zx_status_t Decode_(::fidl::Message request) {
    bool needs_response;
    const fidl_type_t* request_type = GetType(request.ordinal(), &needs_response);
    if (request_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = request.Decode(request_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(request, request_type, error_msg);
      return status;
    }
    ::fidl::Decoder request_decoder(std::move(request));
    switch (request.ordinal()) {
      case internal::kSwitchingOrdinals_OrdinalFive_GenOrdinal:
      {
        OrdinalFive();
        break;
      }
      case internal::kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal:
      {
        OnlyGeneratedOrdinal();
        break;
      }
      default: {
        status = ZX_ERR_NOT_SUPPORTED;
        break;
      }
    }
    return status;
  }
  virtual void OrdinalFive() = 0;
  virtual void OnlyGeneratedOrdinal() = 0;
};

class SwitchingOrdinals_ResponseEncoder {
 public:
  static ::fidl::Message EventOrdinalFifteen(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
  static ::fidl::Message EventOnlyGeneratedOrdinal(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
};

class SwitchingOrdinals_ResponseDecoder {
 public:
  SwitchingOrdinals_ResponseDecoder() = default;
  virtual ~SwitchingOrdinals_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  zx_status_t Decode_(::fidl::Message response) {
    const fidl_type_t* response_type = GetType(response.ordinal());
    if (response_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = response.Decode(response_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(response, response_type, error_msg);
      return status;
    }
    ::fidl::Decoder response_decoder(std::move(response));
    switch (response.ordinal()) {
      case internal::kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal:
      {
        EventOrdinalFifteen();
        break;
      }
      case internal::kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal:
      {
        EventOnlyGeneratedOrdinal();
        break;
      }
      default: {
        break;
      }
    }
    return ZX_OK;
  }
  virtual void EventOrdinalFifteen() = 0;
  virtual void EventOnlyGeneratedOrdinal() = 0;
};

class SwitchingOrdinals_EventSender {
 public:
  virtual ~SwitchingOrdinals_EventSender();
  virtual void EventOrdinalFifteen() = 0;
  virtual void EventOnlyGeneratedOrdinal() = 0;
};

class SwitchingOrdinals_Sync {
 public:
  using Proxy_ = SwitchingOrdinals_SyncProxy;
  virtual ~SwitchingOrdinals_Sync();
  virtual zx_status_t OrdinalFive() = 0;
  virtual zx_status_t OnlyGeneratedOrdinal() = 0;
};

class SwitchingOrdinals_Proxy final : public ::fidl::internal::Proxy, public SwitchingOrdinals {
 public:
  explicit SwitchingOrdinals_Proxy(::fidl::internal::ProxyController* controller);
  ~SwitchingOrdinals_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void OrdinalFive() override;
  void OnlyGeneratedOrdinal() override;
  EventOrdinalFifteenCallback EventOrdinalFifteen;
  EventOnlyGeneratedOrdinalCallback EventOnlyGeneratedOrdinal;

 private:
  SwitchingOrdinals_Proxy(const SwitchingOrdinals_Proxy&) = delete;
  SwitchingOrdinals_Proxy& operator=(const SwitchingOrdinals_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class SwitchingOrdinals_Stub final : public ::fidl::internal::Stub, public SwitchingOrdinals_EventSender {
 public:
  typedef class ::test::name::SwitchingOrdinals SwitchingOrdinals_clazz;
  explicit SwitchingOrdinals_Stub(SwitchingOrdinals_clazz* impl);
  ~SwitchingOrdinals_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void EventOrdinalFifteen() override;
  void EventOnlyGeneratedOrdinal() override;

 private:
  SwitchingOrdinals_clazz* impl_;
};

class SwitchingOrdinals_SyncProxy : public SwitchingOrdinals_Sync {
 public:
  explicit SwitchingOrdinals_SyncProxy(::zx::channel channel);
  ~SwitchingOrdinals_SyncProxy() override;
  zx_status_t OrdinalFive() override;
  zx_status_t OnlyGeneratedOrdinal() override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<SwitchingOrdinals>;
};
#endif // __Fuchsia__
}  // namespace name
}  // namespace test
namespace fidl {
}  // namespace fidl
