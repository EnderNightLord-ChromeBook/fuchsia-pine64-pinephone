# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <test/name/c/fidl.h>


test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequest {
       hdr fidl_message_header[1906422967]
} [packed]
test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestHandles {
       void void
} [packed]
test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse {
       hdr fidl_message_header[1906422967]
        
} [packed]
test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseHandles {
       void void
} [packed]
test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequest {
       hdr fidl_message_header[962199305]
} [packed]
test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestHandles {
       void void
} [packed]
test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse {
       hdr fidl_message_header[962199305]
        
} [packed]
test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseHandles {
       void void
} [packed]

resource zx_chan_test_name_TestProtocol_client[zx_chan]
resource zx_chan_test_name_TestProtocol_server[zx_chan]

zx_channel_create$test_name_TestProtocol(options const[0], out0 ptr[out, zx_chan_test_name_TestProtocol_client], out1 ptr[out, zx_chan_test_name_TestProtocol_server])
fdio_service_connect$test_name_TestProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_name_TestProtocol_server)
zx_channel_call$test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocated(handle zx_chan_test_name_TestProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequest, test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocated(handle zx_chan_test_name_TestProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequest, test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

