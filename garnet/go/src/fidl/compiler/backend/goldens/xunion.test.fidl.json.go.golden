// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)




type OlderSimpleUnionTag uint32
const (
	OlderSimpleUnion_unknownData = 0  // 0x00000000
	OlderSimpleUnionI = 1026732503 // 0x3d32b1d7
	OlderSimpleUnionF = 1362546558 // 0x5136cf7e
)


type OlderSimpleUnion struct {
	OlderSimpleUnionTag `fidl2:"x,24,8"`
	I_unknownData []byte
	I int64 `fidl:"1026732503" fidl2:"1026732503"`
	F float32 `fidl:"1362546558" fidl2:"1362546558"`
}

func (_m *OlderSimpleUnion) Which() OlderSimpleUnionTag {
	switch _m.OlderSimpleUnionTag {
	case 1026732503:
		return OlderSimpleUnionI
	case 1362546558:
		return OlderSimpleUnionF
	default:
		return OlderSimpleUnion_unknownData
	}
}

func (_m *OlderSimpleUnion) Ordinal() uint32 {
	return uint32(_m.OlderSimpleUnionTag)
}

func (_m *OlderSimpleUnion) SetI(i int64) {
	_m.OlderSimpleUnionTag = OlderSimpleUnionI
	_m.I = i
}

func (_m *OlderSimpleUnion) SetF(f float32) {
	_m.OlderSimpleUnionTag = OlderSimpleUnionF
	_m.F = f
}


type NewerSimpleUnionTag uint32
const (
	NewerSimpleUnion_unknownData = 0  // 0x00000000
	NewerSimpleUnionI = 693944286 // 0x295cbfde
	NewerSimpleUnionS = 473666119 // 0x1c3b9247
	NewerSimpleUnionV = 1815655055 // 0x6c38b28f
)


type NewerSimpleUnion struct {
	NewerSimpleUnionTag `fidl2:"x,24,8"`
	I_unknownData []byte
	I int64 `fidl:"693944286" fidl2:"693944286"`
	S string `fidl:",473666119" fidl2:"473666119,"`
	V []string `fidl:",,1815655055" fidl2:"1815655055,,"`
}

func (_m *NewerSimpleUnion) Which() NewerSimpleUnionTag {
	switch _m.NewerSimpleUnionTag {
	case 693944286:
		return NewerSimpleUnionI
	case 473666119:
		return NewerSimpleUnionS
	case 1815655055:
		return NewerSimpleUnionV
	default:
		return NewerSimpleUnion_unknownData
	}
}

func (_m *NewerSimpleUnion) Ordinal() uint32 {
	return uint32(_m.NewerSimpleUnionTag)
}

func (_m *NewerSimpleUnion) SetI(i int64) {
	_m.NewerSimpleUnionTag = NewerSimpleUnionI
	_m.I = i
}

func (_m *NewerSimpleUnion) SetS(s string) {
	_m.NewerSimpleUnionTag = NewerSimpleUnionS
	_m.S = s
}

func (_m *NewerSimpleUnion) SetV(v []string) {
	_m.NewerSimpleUnionTag = NewerSimpleUnionV
	_m.V = v
}


type StrictSimpleXUnionTag uint32
const (
	StrictSimpleXUnionI = 1851697276 // 0x6e5ea87c
	StrictSimpleXUnionF = 855207063 // 0x32f96c97
	StrictSimpleXUnionS = 850602487 // 0x32b329f7
)


type StrictSimpleXUnion struct {
	StrictSimpleXUnionTag `fidl2:"x!,24,8"`
	I_unknownData []byte
	I int32 `fidl:"1851697276" fidl2:"1851697276"`
	F float32 `fidl:"855207063" fidl2:"855207063"`
	S string `fidl:",850602487" fidl2:"850602487,"`
}

func (_m *StrictSimpleXUnion) Which() StrictSimpleXUnionTag {
	return _m.StrictSimpleXUnionTag
}

func (_m *StrictSimpleXUnion) Ordinal() uint32 {
	return uint32(_m.StrictSimpleXUnionTag)
}

func (_m *StrictSimpleXUnion) SetI(i int32) {
	_m.StrictSimpleXUnionTag = StrictSimpleXUnionI
	_m.I = i
}

func (_m *StrictSimpleXUnion) SetF(f float32) {
	_m.StrictSimpleXUnionTag = StrictSimpleXUnionF
	_m.F = f
}

func (_m *StrictSimpleXUnion) SetS(s string) {
	_m.StrictSimpleXUnionTag = StrictSimpleXUnionS
	_m.S = s
}


type StrictBoundedXUnionTag uint32
const (
	StrictBoundedXUnionV = 2024555624 // 0x78ac4468
)


type StrictBoundedXUnion struct {
	StrictBoundedXUnionTag `fidl2:"x!,24,8"`
	I_unknownData []byte
	V []uint8 `fidl:"10,2024555624" fidl2:"2024555624,10"`
}

func (_m *StrictBoundedXUnion) Which() StrictBoundedXUnionTag {
	return _m.StrictBoundedXUnionTag
}

func (_m *StrictBoundedXUnion) Ordinal() uint32 {
	return uint32(_m.StrictBoundedXUnionTag)
}

func (_m *StrictBoundedXUnion) SetV(v []uint8) {
	_m.StrictBoundedXUnionTag = StrictBoundedXUnionV
	_m.V = v
}


const (
	TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal uint64 = 0x71a1b4b700000000
	TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal uint64 = 0x3959ff0900000000
)

type testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse struct {
	_ struct{} `fidl2:"s,24,0"`
	Xu StrictBoundedXUnion
}

var _mtestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse = _bindings.CreateLazyMarshaler(testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{})

func (msg *testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse) Marshaler() _bindings.Marshaler {
	return _mtestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse
}

type testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse struct {
	_ struct{} `fidl2:"s,24,0"`
	Xu OlderSimpleUnion
}

var _mtestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse = _bindings.CreateLazyMarshaler(testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{})

func (msg *testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse) Marshaler() _bindings.Marshaler {
	return _mtestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse
}

type TestProtocolInterface _bindings.ChannelProxy


func (p *TestProtocolInterface) StrictXUnionHenceResponseMayBeStackAllocated() (StrictBoundedXUnion, error) {
	var req_ _bindings.Message
	resp_ := &testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal, req_, resp_)
	return resp_.Xu, err
}

func (p *TestProtocolInterface) FlexibleXUnionHenceResponseMustBeHeapAllocated() (OlderSimpleUnion, error) {
	var req_ _bindings.Message
	resp_ := &testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal, req_, resp_)
	return resp_.Xu, err
}


type TestProtocol interface {
	StrictXUnionHenceResponseMayBeStackAllocated() (StrictBoundedXUnion, error)
	FlexibleXUnionHenceResponseMustBeHeapAllocated() (OlderSimpleUnion, error)
}

type TestProtocolTransitionalBase struct {}


type TestProtocolInterfaceRequest _bindings.InterfaceRequest

func NewTestProtocolInterfaceRequest() (TestProtocolInterfaceRequest, *TestProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return TestProtocolInterfaceRequest(req), (*TestProtocolInterface)(cli), err
}

type TestProtocolStub struct {
	Impl TestProtocol
}

func (s_ *TestProtocolStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal:
		xu, err_ := s_.Impl.StrictXUnionHenceResponseMayBeStackAllocated()
		out_ := testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{}
		out_.Xu = xu
		return &out_, err_
	case TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal:
		xu, err_ := s_.Impl.FlexibleXUnionHenceResponseMustBeHeapAllocated()
		out_ := testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{}
		out_.Xu = xu
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type TestProtocolService struct {
	_bindings.BindingSet
}

func (s *TestProtocolService) Add(impl TestProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&TestProtocolStub{Impl: impl}, c, onError)
}

func (s *TestProtocolService) EventProxyFor(key _bindings.BindingKey) (*TestProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*TestProtocolEventProxy)(pxy), err
}

type TestProtocolEventProxy _bindings.ChannelProxy



