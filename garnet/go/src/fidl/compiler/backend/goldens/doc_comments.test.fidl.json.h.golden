// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Union;
class Table;
class Struct;
#ifdef __Fuchsia__
class Interface;
using InterfacePtr = ::fidl::InterfacePtr<Interface>;
class Interface_Proxy;
class Interface_Stub;
class Interface_EventSender;
class Interface_Sync;
using InterfaceSyncPtr = ::fidl::SynchronousInterfacePtr<Interface>;
class Interface_SyncProxy;
#endif // __Fuchsia__

// union comment #1
//
// union comment #3
class Union {
 public:
  Union();
  ~Union();

  Union(Union&&);
  Union& operator=(Union&&);

  enum class Tag : fidl_union_tag_t {
    kField = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<Union> New() { return ::std::make_unique<Union>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Union* _value, size_t _offset);
  zx_status_t Clone(Union* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_Field() const { return Which() == Tag(0); }
  
  // union member comment #1
  //
  // union member comment #3
  int32_t& Field() {
    if (!is_Field()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  // union member comment #1
  //
  // union member comment #3
  const int32_t& Field() const { return value_.template get<0 + 1>(); }
  void set_Field(int32_t value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:

  using Variant = fit::internal::variant<fit::internal::monostate, int32_t>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return value.Clone(result);
}

using UnionPtr = ::std::unique_ptr<Union>;

// table comment #1
//
// table comment #3
class Table  {
 public:
  static const fidl_type_t* FidlType;
  // Returns if any table field is set;
  bool IsEmpty() const;
  
  // table field comment #1
  //
  // table field comment #3
  const int32_t& Field() const {
    ZX_ASSERT(has_Field_);
    return Field_value_.value;
  }
  bool has_Field() const {
    return has_Field_;
  }
  
  // table field comment #1
  //
  // table field comment #3
  int32_t* mutable_Field() {
    if (!has_Field_) {
      has_Field_ = true;
      Construct(&Field_value_.value);
    }
    return &Field_value_.value;
  }
  Table& set_Field(int32_t _value) {
    if (!has_Field_) {
      has_Field_ = true;
      Construct(&Field_value_.value, std::move(_value));
    } else {
      Field_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_Field() {
    if (!has_Field_) {
      return;
    }
    has_Field_ = false;
    Destruct(&Field_value_.value);
  }

  Table();
  Table(Table&& other);
  ~Table();
  Table& operator=(Table&& other);

  static inline ::std::unique_ptr<Table> New() { return ::std::make_unique<Table>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Table* _value, size_t _offset);
  zx_status_t Clone(Table* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }
  bool has_Field_ : 1;
  union ValueUnion_Field {
    ValueUnion_Field() {}
    ~ValueUnion_Field() {}

    int32_t value;
  };
  ValueUnion_Field Field_value_;
};

using TablePtr = ::std::unique_ptr<Table>;

// struct comment #1
//
// struct comment #3
class Struct  {
 public:
  static const fidl_type_t* FidlType;
  
  // struct member comment #1
  //
  // struct member comment #3
  int32_t Field{};

  static inline ::std::unique_ptr<Struct> New() { return ::std::make_unique<Struct>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Struct* value, size_t _offset);
  zx_status_t Clone(Struct* result) const;
};

inline zx_status_t Clone(const ::test::name::Struct& _value,
                         ::test::name::Struct* _result) {
  return _value.Clone(_result);
}

using StructPtr = ::std::unique_ptr<Struct>;
#ifdef __Fuchsia__

// interface comment #1
//
// interface comment #3
class Interface {
 public:
  using Proxy_ = Interface_Proxy;
  using Stub_ = Interface_Stub;
  using EventSender_ = Interface_EventSender;
  using Sync_ = Interface_Sync;
  virtual ~Interface();
      
  // method comment #1
  //
  // method comment #3
  virtual void Method() = 0;
  using OnEventCallback =
      fit::function<void()>;
};

class Interface_EventSender {
 public:
  virtual ~Interface_EventSender();
  virtual void OnEvent() = 0;
};

class Interface_Sync {
 public:
  using Proxy_ = Interface_SyncProxy;
  virtual ~Interface_Sync();
  virtual zx_status_t Method() = 0;
};

class Interface_Proxy : public ::fidl::internal::Proxy, public Interface {
 public:
  explicit Interface_Proxy(::fidl::internal::ProxyController* controller);
  ~Interface_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void Method() override;
  OnEventCallback OnEvent;

 private:
  Interface_Proxy(const Interface_Proxy&) = delete;
  Interface_Proxy& operator=(const Interface_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class Interface_Stub : public ::fidl::internal::Stub, public Interface_EventSender {
 public:
  typedef class ::test::name::Interface Interface_clazz;
  explicit Interface_Stub(Interface_clazz* impl);
  ~Interface_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void OnEvent() override;

 private:
  Interface_clazz* impl_;
};

class Interface_SyncProxy : public Interface_Sync {
 public:
  explicit Interface_SyncProxy(::zx::channel channel);
  ~Interface_SyncProxy() override;
  zx_status_t Method() override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<Interface>;
};
#endif // __Fuchsia__

// const comment #1
//
// const comment #3
constexpr int32_t C = 4u;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::Union>
    : public EncodableCodingTraits<::test::name::Union, 8> {};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Union> {
  static inline bool Equals(const ::test::name::Union& _lhs, const ::test::name::Union& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::name::Union::Tag::kField:
	return ::fidl::Equals(_lhs.Field(), _rhs.Field());
      case ::test::name::Union::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::name::Table>
    : public EncodableCodingTraits<::test::name::Table, 16> {};

inline zx_status_t Clone(const ::test::name::Table& _value,
                         ::test::name::Table* result) {
  return _value.Clone(result);
}
template<>
struct Equality<::test::name::Table> {
  static inline bool Equals(const ::test::name::Table& _lhs, const ::test::name::Table& _rhs) {
    if (_lhs.has_Field()) {
      if (!_rhs.has_Field()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.Field(), _rhs.Field())) {
	return false;
      }
    } else if (_rhs.has_Field()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::Struct>
    : public EncodableCodingTraits<::test::name::Struct, 4> {};

inline zx_status_t Clone(const ::test::name::Struct& value,
                         ::test::name::Struct* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Struct> {
  static inline bool Equals(const ::test::name::Struct& _lhs, const ::test::name::Struct& _rhs) {
    if (!::fidl::Equals(_lhs.Field, _rhs.Field)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
