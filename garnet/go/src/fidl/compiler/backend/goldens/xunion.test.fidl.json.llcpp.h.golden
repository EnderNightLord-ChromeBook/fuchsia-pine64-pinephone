// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct StrictSimpleXUnion;
struct StrictBoundedXUnion;
struct OlderSimpleUnion;
class TestProtocol;
struct NewerSimpleUnion;

extern "C" const fidl_type_t test_name_StrictSimpleXUnionTable;

struct StrictSimpleXUnion {
  StrictSimpleXUnion() : ordinal_(Tag::kUnknown), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    kI = 1851697276,  // 0x6e5ea87c
    kF = 855207063,  // 0x32f96c97
    kS = 850602487,  // 0x32b329f7
  };

  bool is_i() const { return ordinal_ == Tag::kI; }

  void set_i(int32_t* elem) {
    ordinal_ = Tag::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& i() const {
    ZX_ASSERT(ordinal_ == Tag::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }

  bool is_f() const { return ordinal_ == Tag::kF; }

  void set_f(float* elem) {
    ordinal_ = Tag::kF;
    envelope_.data = static_cast<void*>(elem);
  }

  float& f() const {
    ZX_ASSERT(ordinal_ == Tag::kF);
    return *static_cast<float*>(envelope_.data);
  }

  bool is_s() const { return ordinal_ == Tag::kS; }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Tag::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal_ == Tag::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  Tag which() const;

  static constexpr const fidl_type_t* Type = &test_name_StrictSimpleXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;

 private:
  static void SizeAndOffsetAssertionHelper();
  Tag ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t test_name_StrictBoundedXUnionTable;

struct StrictBoundedXUnion {
  StrictBoundedXUnion() : ordinal_(Tag::kUnknown), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    kV = 2024555624,  // 0x78ac4468
  };

  bool is_v() const { return ordinal_ == Tag::kV; }

  void set_v(::fidl::VectorView<uint8_t>* elem) {
    ordinal_ = Tag::kV;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::VectorView<uint8_t>& v() const {
    ZX_ASSERT(ordinal_ == Tag::kV);
    return *static_cast<::fidl::VectorView<uint8_t>*>(envelope_.data);
  }

  Tag which() const;

  static constexpr const fidl_type_t* Type = &test_name_StrictBoundedXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 32;

 private:
  static void SizeAndOffsetAssertionHelper();
  Tag ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t test_name_OlderSimpleUnionTable;

struct OlderSimpleUnion {
  OlderSimpleUnion() : ordinal_(Tag::kUnknown), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    kI = 1026732503,  // 0x3d32b1d7
    kF = 1362546558,  // 0x5136cf7e
  };

  bool is_i() const { return ordinal_ == Tag::kI; }

  void set_i(int64_t* elem) {
    ordinal_ = Tag::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int64_t& i() const {
    ZX_ASSERT(ordinal_ == Tag::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }

  bool is_f() const { return ordinal_ == Tag::kF; }

  void set_f(float* elem) {
    ordinal_ = Tag::kF;
    envelope_.data = static_cast<void*>(elem);
  }

  float& f() const {
    ZX_ASSERT(ordinal_ == Tag::kF);
    return *static_cast<float*>(envelope_.data);
  }

  Tag which() const;

  static constexpr const fidl_type_t* Type = &test_name_OlderSimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;

 private:
  static void SizeAndOffsetAssertionHelper();
  Tag ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
extern "C" const fidl_type_t test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;

class TestProtocol final {
  TestProtocol() = delete;
 public:

  struct StrictXUnionHenceResponseMayBeStackAllocatedResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    StrictBoundedXUnion xu;

    static constexpr const fidl_type_t* Type = &test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 32;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using StrictXUnionHenceResponseMayBeStackAllocatedRequest = ::fidl::AnyZeroArgMessage;

  struct FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    OlderSimpleUnion xu;

    static constexpr const fidl_type_t* Type = &test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class StrictXUnionHenceResponseMayBeStackAllocated_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(zx::unowned_channel _client_end);
      ~StrictXUnionHenceResponseMayBeStackAllocated_Impl() = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl& operator=(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(zx::unowned_channel _client_end);
      ~FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl() = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl& operator=(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using StrictXUnionHenceResponseMayBeStackAllocated = StrictXUnionHenceResponseMayBeStackAllocated_Impl<StrictXUnionHenceResponseMayBeStackAllocatedResponse>;
    using FlexibleXUnionHenceResponseMustBeHeapAllocated = FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class StrictXUnionHenceResponseMayBeStackAllocated_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~StrictXUnionHenceResponseMayBeStackAllocated_Impl() = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl& operator=(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl() = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl& operator=(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using StrictXUnionHenceResponseMayBeStackAllocated = StrictXUnionHenceResponseMayBeStackAllocated_Impl<StrictXUnionHenceResponseMayBeStackAllocatedResponse>;
    using FlexibleXUnionHenceResponseMustBeHeapAllocated = FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 88 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(::fidl::BytePart _response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse> StrictXUnionHenceResponseMayBeStackAllocated_Deprecated(::fidl::BytePart _response_buffer, StrictBoundedXUnion* out_xu);

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(::fidl::BytePart _response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> FlexibleXUnionHenceResponseMustBeHeapAllocated_Deprecated(::fidl::BytePart _response_buffer, OlderSimpleUnion* out_xu);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 88 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse> StrictXUnionHenceResponseMayBeStackAllocated_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, StrictBoundedXUnion* out_xu);

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    static ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> FlexibleXUnionHenceResponseMustBeHeapAllocated_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, OlderSimpleUnion* out_xu);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse> StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = TestProtocol;
    using _Base = ::fidl::CompleterBase;

    class StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase : public _Base {
     public:
      void Reply(StrictBoundedXUnion xu);
      void Reply(::fidl::BytePart _buffer, StrictBoundedXUnion xu);
      void Reply(::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using StrictXUnionHenceResponseMayBeStackAllocatedCompleter = ::fidl::Completer<StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase>;

    virtual void StrictXUnionHenceResponseMayBeStackAllocated(StrictXUnionHenceResponseMayBeStackAllocatedCompleter::Sync _completer) = 0;

    class FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase : public _Base {
     public:
      void Reply(OlderSimpleUnion xu);
      void Reply(::fidl::BytePart _buffer, OlderSimpleUnion xu);
      void Reply(::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter = ::fidl::Completer<FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase>;

    virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated(FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t test_name_NewerSimpleUnionTable;

struct NewerSimpleUnion {
  NewerSimpleUnion() : ordinal_(Tag::kUnknown), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    kI = 693944286,  // 0x295cbfde
    kS = 473666119,  // 0x1c3b9247
    kV = 1815655055,  // 0x6c38b28f
  };

  bool is_i() const { return ordinal_ == Tag::kI; }

  void set_i(int64_t* elem) {
    ordinal_ = Tag::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int64_t& i() const {
    ZX_ASSERT(ordinal_ == Tag::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }

  bool is_s() const { return ordinal_ == Tag::kS; }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Tag::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal_ == Tag::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_v() const { return ordinal_ == Tag::kV; }

  void set_v(::fidl::VectorView<::fidl::StringView>* elem) {
    ordinal_ = Tag::kV;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::VectorView<::fidl::StringView>& v() const {
    ZX_ASSERT(ordinal_ == Tag::kV);
    return *static_cast<::fidl::VectorView<::fidl::StringView>*>(envelope_.data);
  }

  Tag which() const;

  static constexpr const fidl_type_t* Type = &test_name_NewerSimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;

 private:
  static void SizeAndOffsetAssertionHelper();
  Tag ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::StrictSimpleXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::StrictSimpleXUnion>);

template <>
struct IsFidlType<::llcpp::test::name::StrictBoundedXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::StrictBoundedXUnion>);

template <>
struct IsFidlType<::llcpp::test::name::OlderSimpleUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::OlderSimpleUnion>);

template <>
struct IsFidlType<::llcpp::test::name::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse)
    == ::llcpp::test::name::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse, xu) == 16);

template <>
struct IsFidlType<::llcpp::test::name::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse)
    == ::llcpp::test::name::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse, xu) == 16);

template <>
struct IsFidlType<::llcpp::test::name::NewerSimpleUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::NewerSimpleUnion>);

}  // namespace fidl
