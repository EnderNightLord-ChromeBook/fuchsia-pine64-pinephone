// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

class SwitchingOrdinals;

class SwitchingOrdinals final {
 public:

  using OrdinalFiveRequest = ::fidl::AnyZeroArgMessage;

  using OnlyGeneratedOrdinalRequest = ::fidl::AnyZeroArgMessage;

  using EventOrdinalFifteenResponse = ::fidl::AnyZeroArgMessage;
  using EventOnlyGeneratedOrdinalResponse = ::fidl::AnyZeroArgMessage;

  struct EventHandlers {
    fit::function<zx_status_t()> event_ordinal_fifteen;

    fit::function<zx_status_t()> event_only_generated_ordinal;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t OrdinalFive();

    zx_status_t OnlyGeneratedOrdinal();

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t OrdinalFive(zx::unowned_channel _client_end);

    static zx_status_t OnlyGeneratedOrdinal(zx::unowned_channel _client_end);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = SwitchingOrdinals;
    using _Base = ::fidl::CompleterBase;

    using OrdinalFiveCompleter = ::fidl::Completer<>;

    virtual void OrdinalFive(OrdinalFiveCompleter::Sync _completer) = 0;

    using OnlyGeneratedOrdinalCompleter = ::fidl::Completer<>;

    virtual void OnlyGeneratedOrdinal(OnlyGeneratedOrdinalCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventOrdinalFifteenEvent(::zx::unowned_channel _chan);

  static zx_status_t SendEventOnlyGeneratedOrdinalEvent(::zx::unowned_channel _chan);

};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

}  // namespace fidl
