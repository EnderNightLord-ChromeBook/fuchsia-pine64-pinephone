// WARNING: This file is machine generated by fidlgen.

#include <ordinal_switch.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace name {

#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t test_name_SwitchingOrdinalsOrdinalFiveRequestTable;

extern "C" const fidl_type_t test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable;

extern "C" const fidl_type_t test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable;

extern "C" const fidl_type_t test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable;

}  // namespace

SwitchingOrdinals::~SwitchingOrdinals() = default;

const fidl_type_t* SwitchingOrdinals_RequestDecoder::GetType(uint64_t ordinal, bool* out_needs_response) {
  switch (ordinal) {
    case internal::kSwitchingOrdinals_OrdinalFive_GenOrdinal:
      *out_needs_response = false;
      return &test_name_SwitchingOrdinalsOrdinalFiveRequestTable;
    case internal::kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal:
      *out_needs_response = false;
      return &test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* SwitchingOrdinals_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal:
      return &test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable;
    case internal::kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal:
      return &test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable;
    default:
      return nullptr;
  }
}

SwitchingOrdinals_EventSender::~SwitchingOrdinals_EventSender() = default;

SwitchingOrdinals_Sync::~SwitchingOrdinals_Sync() = default;

SwitchingOrdinals_Proxy::SwitchingOrdinals_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

SwitchingOrdinals_Proxy::~SwitchingOrdinals_Proxy() = default;

zx_status_t SwitchingOrdinals_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    case internal::kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal:
    {
      if (!EventOrdinalFifteen) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, error_msg);
        break;
      }
      EventOrdinalFifteen();
      break;
    }
    case internal::kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal:
    {
      if (!EventOnlyGeneratedOrdinal) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, error_msg);
        break;
      }
      EventOnlyGeneratedOrdinal();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


void SwitchingOrdinals_Proxy::OrdinalFive() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_OrdinalFive_GenOrdinal);
  controller_->Send(&test_name_SwitchingOrdinalsOrdinalFiveRequestTable, SwitchingOrdinals_RequestEncoder::OrdinalFive(&_encoder), nullptr);
}
void SwitchingOrdinals_Proxy::OnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal);
  controller_->Send(&test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, SwitchingOrdinals_RequestEncoder::OnlyGeneratedOrdinal(&_encoder), nullptr);
}

SwitchingOrdinals_Stub::SwitchingOrdinals_Stub(SwitchingOrdinals_clazz* impl) : impl_(impl) {
  (void)impl_;
}

SwitchingOrdinals_Stub::~SwitchingOrdinals_Stub() = default;

namespace {

}  // namespace

zx_status_t SwitchingOrdinals_Stub::Dispatch_(
    ::fidl::Message message,
    ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type = SwitchingOrdinals_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::kSwitchingOrdinals_OrdinalFive_GenOrdinal:
    {
      impl_->OrdinalFive();
      break;
    }
    case internal::kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal:
    {
      impl_->OnlyGeneratedOrdinal();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void SwitchingOrdinals_Stub::EventOrdinalFifteen() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal);
  sender_()->Send(&test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, SwitchingOrdinals_ResponseEncoder::EventOrdinalFifteen(&_encoder));
}
void SwitchingOrdinals_Stub::EventOnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal);
  sender_()->Send(&test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, SwitchingOrdinals_ResponseEncoder::EventOnlyGeneratedOrdinal(&_encoder));
}

SwitchingOrdinals_SyncProxy::SwitchingOrdinals_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

SwitchingOrdinals_SyncProxy::~SwitchingOrdinals_SyncProxy() = default;

zx_status_t SwitchingOrdinals_SyncProxy::OrdinalFive() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_OrdinalFive_GenOrdinal);
  return proxy_.Send(&test_name_SwitchingOrdinalsOrdinalFiveRequestTable, SwitchingOrdinals_RequestEncoder::OrdinalFive(&_encoder));
}

zx_status_t SwitchingOrdinals_SyncProxy::OnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(internal::kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal);
  return proxy_.Send(&test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, SwitchingOrdinals_RequestEncoder::OnlyGeneratedOrdinal(&_encoder));
}

#endif // __Fuchsia__

}  // namespace name
}  // namespace test

