// WARNING: This file is machine generated by fidlgen.

#include <ordinal_switch.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace name {

#ifdef __Fuchsia__
namespace {
  
constexpr uint64_t kSwitchingOrdinals_OrdinalFive_Ordinal = 2005164903lu << 32;
extern "C" const fidl_type_t test_name_SwitchingOrdinalsOrdinalFiveRequestTable;
  
constexpr uint64_t kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal = 667506719lu << 32;
extern "C" const fidl_type_t test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable;
  
constexpr uint64_t kSwitchingOrdinals_EventOrdinalFifteen_Ordinal = 1467258273lu << 32;
extern "C" const fidl_type_t test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable;
  
constexpr uint64_t kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal = 2146190926lu << 32;
extern "C" const fidl_type_t test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable;

}  // namespace

SwitchingOrdinals::~SwitchingOrdinals() = default;

SwitchingOrdinals_EventSender::~SwitchingOrdinals_EventSender() = default;

SwitchingOrdinals_Sync::~SwitchingOrdinals_Sync() = default;

SwitchingOrdinals_Proxy::SwitchingOrdinals_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

SwitchingOrdinals_Proxy::~SwitchingOrdinals_Proxy() = default;

zx_status_t SwitchingOrdinals_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    case kSwitchingOrdinals_EventOrdinalFifteen_Ordinal: {
      if (!EventOrdinalFifteen) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, error_msg);
        break;
      }
      EventOrdinalFifteen();
      break;
    }
    case kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal: {
      if (!EventOnlyGeneratedOrdinal) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, error_msg);
        break;
      }
      EventOnlyGeneratedOrdinal();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


void SwitchingOrdinals_Proxy::OrdinalFive() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_OrdinalFive_Ordinal);
  controller_->Send(&test_name_SwitchingOrdinalsOrdinalFiveRequestTable, _encoder.GetMessage(), nullptr);
}
void SwitchingOrdinals_Proxy::OnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal);
  controller_->Send(&test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, _encoder.GetMessage(), nullptr);
}

SwitchingOrdinals_Stub::SwitchingOrdinals_Stub(SwitchingOrdinals_clazz* impl) : impl_(impl) {
  (void)impl_;
}

SwitchingOrdinals_Stub::~SwitchingOrdinals_Stub() = default;

namespace {

}  // namespace

zx_status_t SwitchingOrdinals_Stub::Dispatch_(
    ::fidl::Message message,
    ::fidl::internal::PendingResponse response) {
  zx_status_t status = ZX_OK;
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case kSwitchingOrdinals_OrdinalFive_Ordinal: {
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsOrdinalFiveRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsOrdinalFiveRequestTable, error_msg);
        break;
      }
      impl_->OrdinalFive();
      break;
    }
    case kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal: {
      const char* error_msg = nullptr;
      status = message.Decode(&test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, error_msg);
        break;
      }
      impl_->OnlyGeneratedOrdinal();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void SwitchingOrdinals_Stub::EventOrdinalFifteen() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_EventOrdinalFifteen_Ordinal);
  sender_()->Send(&test_name_SwitchingOrdinalsEventOrdinalFifteenEventTable, _encoder.GetMessage());
}
void SwitchingOrdinals_Stub::EventOnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal);
  sender_()->Send(&test_name_SwitchingOrdinalsEventOnlyGeneratedOrdinalEventTable, _encoder.GetMessage());
}

SwitchingOrdinals_SyncProxy::SwitchingOrdinals_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

SwitchingOrdinals_SyncProxy::~SwitchingOrdinals_SyncProxy() = default;
zx_status_t SwitchingOrdinals_SyncProxy::OrdinalFive() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_OrdinalFive_Ordinal);
  return proxy_.Send(&test_name_SwitchingOrdinalsOrdinalFiveRequestTable, _encoder.GetMessage());
}
zx_status_t SwitchingOrdinals_SyncProxy::OnlyGeneratedOrdinal() {
  ::fidl::Encoder _encoder(kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal);
  return proxy_.Send(&test_name_SwitchingOrdinalsOnlyGeneratedOrdinalRequestTable, _encoder.GetMessage());
}

#endif // __Fuchsia__

}  // namespace name
}  // namespace test

