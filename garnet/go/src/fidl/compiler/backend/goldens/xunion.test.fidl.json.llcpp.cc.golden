// WARNING: This file is machine generated by fidlgen.

#include <xunion.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace name {

auto ::llcpp::test::name::StrictSimpleXUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kI:
  case Tag::kF:
  case Tag::kS:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::StrictSimpleXUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictSimpleXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictSimpleXUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictSimpleXUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

auto ::llcpp::test::name::StrictBoundedXUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kV:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::StrictBoundedXUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictBoundedXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictBoundedXUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictBoundedXUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

auto ::llcpp::test::name::OlderSimpleUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kI:
  case Tag::kF:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::OlderSimpleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(OlderSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(OlderSimpleUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(OlderSimpleUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]]
constexpr uint64_t kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal = 0x71a1b4b700000000lu;
extern "C" const fidl_type_t test_name_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
[[maybe_unused]]
constexpr uint64_t kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal = 0x3959ff0900000000lu;
extern "C" const fidl_type_t test_name_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;

}  // namespace
template <>
TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated_Impl<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse>::StrictXUnionHenceResponseMayBeStackAllocated_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StrictXUnionHenceResponseMayBeStackAllocatedRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, StrictXUnionHenceResponseMayBeStackAllocatedRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest));
  ::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      TestProtocol::InPlace::StrictXUnionHenceResponseMayBeStackAllocated(std::move(_client_end), Super::response_buffer()));
}

TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated TestProtocol::SyncClient::StrictXUnionHenceResponseMayBeStackAllocated() {
  return ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel(this->channel_));
}

TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end) {
  return ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(std::move(_client_end));
}

template <>
TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated_Impl<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse>::StrictXUnionHenceResponseMayBeStackAllocated_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, StrictXUnionHenceResponseMayBeStackAllocatedRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest));
  ::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      TestProtocol::InPlace::StrictXUnionHenceResponseMayBeStackAllocated(std::move(_client_end), std::move(_response_buffer)));
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated TestProtocol::SyncClient::StrictXUnionHenceResponseMayBeStackAllocated(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> TestProtocol::SyncClient::StrictXUnionHenceResponseMayBeStackAllocated_Deprecated(::fidl::BytePart _response_buffer, StrictBoundedXUnion* out_xu) {
  return TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_xu);
}

::fidl::DecodeResult<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, StrictBoundedXUnion* out_xu) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<StrictXUnionHenceResponseMayBeStackAllocatedRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal;
  _request_buffer.set_actual(sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest));
  ::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<StrictXUnionHenceResponseMayBeStackAllocatedRequest, StrictXUnionHenceResponseMayBeStackAllocatedResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_xu = std::move(_response.xu);
  return _decode_result;
}

::fidl::DecodeResult<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> TestProtocol::InPlace::StrictXUnionHenceResponseMayBeStackAllocated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<StrictXUnionHenceResponseMayBeStackAllocatedRequest, StrictXUnionHenceResponseMayBeStackAllocatedResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>::FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest));
  ::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      TestProtocol::InPlace::FlexibleXUnionHenceResponseMustBeHeapAllocated(std::move(_client_end), Super::response_buffer()));
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated TestProtocol::SyncClient::FlexibleXUnionHenceResponseMustBeHeapAllocated() {
  return ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel(this->channel_));
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end) {
  return ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(std::move(_client_end));
}

template <>
TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>::FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest));
  ::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      TestProtocol::InPlace::FlexibleXUnionHenceResponseMustBeHeapAllocated(std::move(_client_end), std::move(_response_buffer)));
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated TestProtocol::SyncClient::FlexibleXUnionHenceResponseMustBeHeapAllocated(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> TestProtocol::SyncClient::FlexibleXUnionHenceResponseMustBeHeapAllocated_Deprecated(::fidl::BytePart _response_buffer, OlderSimpleUnion* out_xu) {
  return TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_xu);
}

::fidl::DecodeResult<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, OlderSimpleUnion* out_xu) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal;
  _request_buffer.set_actual(sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest));
  ::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest, FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_xu = std::move(_response.xu);
  return _decode_result;
}

::fidl::DecodeResult<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> TestProtocol::InPlace::FlexibleXUnionHenceResponseMustBeHeapAllocated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest, FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool TestProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<StrictXUnionHenceResponseMayBeStackAllocatedRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->StrictXUnionHenceResponseMayBeStackAllocated(
        Interface::StrictXUnionHenceResponseMayBeStackAllocatedCompleter::Sync(txn));
      return true;
    }
    case kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->FlexibleXUnionHenceResponseMustBeHeapAllocated(
        Interface::FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool TestProtocol::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void TestProtocol::Interface::StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(StrictBoundedXUnion xu) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<StrictXUnionHenceResponseMayBeStackAllocatedResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize];
  StrictXUnionHenceResponseMayBeStackAllocatedResponse _response = {};
  _response._hdr.ordinal = kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal;
  _response.xu = std::move(xu);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void TestProtocol::Interface::StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(::fidl::BytePart _buffer, StrictBoundedXUnion xu) {
  if (_buffer.capacity() < StrictXUnionHenceResponseMayBeStackAllocatedResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  StrictXUnionHenceResponseMayBeStackAllocatedResponse _response = {};
  _response._hdr.ordinal = kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal;
  _response.xu = std::move(xu);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void TestProtocol::Interface::StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void TestProtocol::Interface::FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(OlderSimpleUnion xu) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse _response = {};
  _response._hdr.ordinal = kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal;
  _response.xu = std::move(xu);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void TestProtocol::Interface::FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(::fidl::BytePart _buffer, OlderSimpleUnion xu) {
  if (_buffer.capacity() < FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse _response = {};
  _response._hdr.ordinal = kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal;
  _response.xu = std::move(xu);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void TestProtocol::Interface::FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


auto ::llcpp::test::name::NewerSimpleUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kI:
  case Tag::kS:
  case Tag::kV:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::NewerSimpleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(NewerSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(NewerSimpleUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(NewerSimpleUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
