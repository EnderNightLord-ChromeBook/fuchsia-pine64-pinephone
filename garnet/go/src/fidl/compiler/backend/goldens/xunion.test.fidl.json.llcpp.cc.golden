// WARNING: This file is machine generated by fidlgen.

#include <xunion.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace name {

auto ::llcpp::test::name::OlderSimpleUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kI:
  case Tag::kF:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::OlderSimpleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(OlderSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(OlderSimpleUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(OlderSimpleUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

auto ::llcpp::test::name::NewerSimpleUnion::which() const -> Tag {
  switch (ordinal_) {
  case Tag::kI:
  case Tag::kS:
  case Tag::kV:
    return ordinal_;
  default:
    return Tag::kUnknown;
  }
}

void ::llcpp::test::name::NewerSimpleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(NewerSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(NewerSimpleUnion, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(NewerSimpleUnion, envelope_) == offsetof(fidl_xunion_t, envelope));
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
