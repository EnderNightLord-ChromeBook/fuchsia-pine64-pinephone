
#include <protocols.test.fidl.json.overnet_internal.h>
#include "lib/fidl/cpp/internal/implementation.h"
  namespace test {
  namespace name {
  
  
  
  
      
        
namespace {


constexpr uint64_t kKitchenSink_MethodA_GenOrdinal = 0x1adb443000000000lu;
extern "C" const fidl_type_t test_name_KitchenSinkMethodARequestTable;
constexpr uint64_t kKitchenSink_EventA_GenOrdinal = 0x6b040a1100000000lu;
extern "C" const fidl_type_t test_name_KitchenSinkEventAEventTable;
constexpr uint64_t kKitchenSink_MethodB_GenOrdinal = 0x772dcaa400000000lu;
extern "C" const fidl_type_t test_name_KitchenSinkMethodBRequestTable;
extern "C" const fidl_type_t test_name_KitchenSinkMethodBResponseTable;
constexpr uint64_t kKitchenSink_MutateSocket_GenOrdinal = 0x6e7c00600000000lu;
extern "C" const fidl_type_t test_name_KitchenSinkMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_KitchenSinkMutateSocketResponseTable;

}  // namespace

KitchenSink::~KitchenSink() = default;

KitchenSink_Proxy::~KitchenSink_Proxy() = default;

zx_status_t KitchenSink_Proxy::Dispatch_(::fidl::Message* message) {
  zx_status_t status = ZX_OK;
  switch (message->ordinal()) {
    case kKitchenSink_EventA_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_KitchenSinkEventAEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_KitchenSinkEventAEventTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      EventA(std::move(arg0), std::move(arg1));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


void KitchenSink_Proxy::MethodA(int64_t a, int64_t b) {
  ::fidl::Encoder _encoder(kKitchenSink_MethodA_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage());
}
void KitchenSink_Proxy::MethodB(int64_t a, int64_t b, MethodBCallback callback) {
  ::fidl::Encoder _encoder(kKitchenSink_MethodB_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage(), [callback=std::move(callback)](::fidl::Message message) {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_KitchenSinkMethodBResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_KitchenSinkMethodBResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
    callback(std::move(arg0));
    return ZX_OK;
  });
}
void KitchenSink_Proxy::MutateSocket(::zx::socket a, MutateSocketCallback callback) {
  ::fidl::Encoder _encoder(kKitchenSink_MutateSocket_GenOrdinal);
  _encoder.Alloc(24 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  Send_(_encoder.GetMessage(), [callback=std::move(callback)](::fidl::Message message) {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_KitchenSinkMutateSocketResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_KitchenSinkMutateSocketResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<::zx::socket>(&decoder, 16);
    callback(std::move(arg0));
    return ZX_OK;
  });
}

KitchenSink_Stub::~KitchenSink_Stub() = default;

zx_status_t KitchenSink_Stub::Dispatch_(::fidl::Message* message) {
  zx_status_t status = ZX_OK;
  switch (message->ordinal()) {
    case kKitchenSink_MethodA_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_KitchenSinkMethodARequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_KitchenSinkMethodARequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      MethodA(std::move(arg0), std::move(arg1));
      break;
    }
    case kKitchenSink_MethodB_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_KitchenSinkMethodBRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_KitchenSinkMethodBRequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      MethodB(std::move(arg0), std::move(arg1), [this](int64_t result) {
            ::fidl::Encoder _encoder(kKitchenSink_MethodB_GenOrdinal);
            _encoder.Alloc(24 - sizeof(fidl_message_header_t));
            ::fidl::Encode(&_encoder, &result, 16);
            Send_(_encoder.GetMessage());
          });
      break;
    }
    case kKitchenSink_MutateSocket_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_KitchenSinkMutateSocketRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_KitchenSinkMutateSocketRequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<::zx::socket>(&decoder, 16);
      MutateSocket(std::move(arg0), [this](::zx::socket b) {
            ::fidl::Encoder _encoder(kKitchenSink_MutateSocket_GenOrdinal);
            _encoder.Alloc(24 - sizeof(fidl_message_header_t));
            ::fidl::Encode(&_encoder, &b, 16);
            Send_(_encoder.GetMessage());
          });
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void KitchenSink_Stub::EventA(int64_t a, int64_t b) {
  ::fidl::Encoder _encoder(kKitchenSink_EventA_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage());
}


      
  
      
  
      
        
namespace {


constexpr uint64_t kOvernetInternalProtocol_MethodA_GenOrdinal = 0x76d7408d00000000lu;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMethodARequestTable;
constexpr uint64_t kOvernetInternalProtocol_EventA_GenOrdinal = 0x6811f58c00000000lu;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolEventAEventTable;
constexpr uint64_t kOvernetInternalProtocol_MethodB_GenOrdinal = 0x38c06d4000000000lu;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMethodBRequestTable;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMethodBResponseTable;
constexpr uint64_t kOvernetInternalProtocol_MutateSocket_GenOrdinal = 0x64cdaf6600000000lu;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_OvernetInternalProtocolMutateSocketResponseTable;

}  // namespace

OvernetInternalProtocol::~OvernetInternalProtocol() = default;

OvernetInternalProtocol_Proxy::~OvernetInternalProtocol_Proxy() = default;

zx_status_t OvernetInternalProtocol_Proxy::Dispatch_(::fidl::Message* message) {
  zx_status_t status = ZX_OK;
  switch (message->ordinal()) {
    case kOvernetInternalProtocol_EventA_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_OvernetInternalProtocolEventAEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_OvernetInternalProtocolEventAEventTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      EventA(std::move(arg0), std::move(arg1));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


void OvernetInternalProtocol_Proxy::MethodA(int64_t a, int64_t b) {
  ::fidl::Encoder _encoder(kOvernetInternalProtocol_MethodA_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage());
}
void OvernetInternalProtocol_Proxy::MethodB(int64_t a, int64_t b, MethodBCallback callback) {
  ::fidl::Encoder _encoder(kOvernetInternalProtocol_MethodB_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage(), [callback=std::move(callback)](::fidl::Message message) {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_OvernetInternalProtocolMethodBResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_OvernetInternalProtocolMethodBResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
    callback(std::move(arg0));
    return ZX_OK;
  });
}
void OvernetInternalProtocol_Proxy::MutateSocket(::zx::socket a, MutateSocketCallback callback) {
  ::fidl::Encoder _encoder(kOvernetInternalProtocol_MutateSocket_GenOrdinal);
  _encoder.Alloc(24 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  Send_(_encoder.GetMessage(), [callback=std::move(callback)](::fidl::Message message) {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_OvernetInternalProtocolMutateSocketResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_OvernetInternalProtocolMutateSocketResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<::zx::socket>(&decoder, 16);
    callback(std::move(arg0));
    return ZX_OK;
  });
}

OvernetInternalProtocol_Stub::~OvernetInternalProtocol_Stub() = default;

zx_status_t OvernetInternalProtocol_Stub::Dispatch_(::fidl::Message* message) {
  zx_status_t status = ZX_OK;
  switch (message->ordinal()) {
    case kOvernetInternalProtocol_MethodA_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_OvernetInternalProtocolMethodARequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_OvernetInternalProtocolMethodARequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      MethodA(std::move(arg0), std::move(arg1));
      break;
    }
    case kOvernetInternalProtocol_MethodB_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_OvernetInternalProtocolMethodBRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_OvernetInternalProtocolMethodBRequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<int64_t>(&decoder, 16);
      auto arg1 = ::fidl::DecodeAs<int64_t>(&decoder, 24);
      MethodB(std::move(arg0), std::move(arg1), [this](int64_t result) {
            ::fidl::Encoder _encoder(kOvernetInternalProtocol_MethodB_GenOrdinal);
            _encoder.Alloc(24 - sizeof(fidl_message_header_t));
            ::fidl::Encode(&_encoder, &result, 16);
            Send_(_encoder.GetMessage());
          });
      break;
    }
    case kOvernetInternalProtocol_MutateSocket_GenOrdinal:
    {
      const char* error_msg = nullptr;
      status = message->Decode(&test_name_OvernetInternalProtocolMutateSocketRequestTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(*message, &test_name_OvernetInternalProtocolMutateSocketRequestTable, error_msg);
        ZX_ASSERT(status != ZX_ERR_NOT_SUPPORTED);
        break;
      }
      ::fidl::Decoder decoder(std::move(*message));
      auto arg0 = ::fidl::DecodeAs<::zx::socket>(&decoder, 16);
      MutateSocket(std::move(arg0), [this](::zx::socket b) {
            ::fidl::Encoder _encoder(kOvernetInternalProtocol_MutateSocket_GenOrdinal);
            _encoder.Alloc(24 - sizeof(fidl_message_header_t));
            ::fidl::Encode(&_encoder, &b, 16);
            Send_(_encoder.GetMessage());
          });
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void OvernetInternalProtocol_Stub::EventA(int64_t a, int64_t b) {
  ::fidl::Encoder _encoder(kOvernetInternalProtocol_EventA_GenOrdinal);
  _encoder.Alloc(32 - sizeof(fidl_message_header_t));
  ::fidl::Encode(&_encoder, &a, 16);
  ::fidl::Encode(&_encoder, &b, 24);
  Send_(_encoder.GetMessage());
}


      
  
      
  
  
  
      
  
  }  // namespace name
  }  // namespace test
