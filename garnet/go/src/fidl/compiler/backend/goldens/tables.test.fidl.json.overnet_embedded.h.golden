// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "src/connectivity/overnet/lib/embedded/header.h"

#include <test/name/cpp/fidl.h>

namespace test {
namespace name {
namespace embedded {

class SimpleTable;
class OlderSimpleTable;
class NewerSimpleTable;
class EmptyTable;

class SimpleTable  {
 public:
  static const fidl_type_t* FidlType;
  
  const int64_t& x() const {
    assert(has_x_);
    return x_value_.value;
  }
  bool has_x() const {
    return has_x_;
  }
  
  int64_t* mutable_x() {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value);
    }
    return &x_value_.value;
  }
  void set_x(int64_t _value) {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value, std::move(_value));
    } else {
      x_value_.value = std::move(_value);
    }
  }
  void clear_x() {
    if (!has_x_) {
      return;
    }
    has_x_ = false;
    Destruct(&x_value_.value);
  }
  
  const int64_t& y() const {
    assert(has_y_);
    return y_value_.value;
  }
  bool has_y() const {
    return has_y_;
  }
  
  int64_t* mutable_y() {
    if (!has_y_) {
      has_y_ = true;
      Construct(&y_value_.value);
    }
    return &y_value_.value;
  }
  void set_y(int64_t _value) {
    if (!has_y_) {
      has_y_ = true;
      Construct(&y_value_.value, std::move(_value));
    } else {
      y_value_.value = std::move(_value);
    }
  }
  void clear_y() {
    if (!has_y_) {
      return;
    }
    has_y_ = false;
    Destruct(&y_value_.value);
  }

  SimpleTable();
  SimpleTable(SimpleTable&& other);
  ~SimpleTable();
  SimpleTable& operator=(SimpleTable&& other);

  static inline ::std::unique_ptr<SimpleTable> New() { return ::std::make_unique<SimpleTable>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, SimpleTable* _value, size_t _offset);
  zx_status_t Clone(SimpleTable* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }
  bool has_x_ : 1;
  bool has_y_ : 1;
  union ValueUnion_x {
    ValueUnion_x() {}
    ~ValueUnion_x() {}

    int64_t value;
  };
  ValueUnion_x x_value_;
  union ValueUnion_y {
    ValueUnion_y() {}
    ~ValueUnion_y() {}

    int64_t value;
  };
  ValueUnion_y y_value_;
};


using SimpleTablePtr = ::std::unique_ptr<SimpleTable>;

class OlderSimpleTable  {
 public:
  static const fidl_type_t* FidlType;
  
  const int64_t& x() const {
    assert(has_x_);
    return x_value_.value;
  }
  bool has_x() const {
    return has_x_;
  }
  
  int64_t* mutable_x() {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value);
    }
    return &x_value_.value;
  }
  void set_x(int64_t _value) {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value, std::move(_value));
    } else {
      x_value_.value = std::move(_value);
    }
  }
  void clear_x() {
    if (!has_x_) {
      return;
    }
    has_x_ = false;
    Destruct(&x_value_.value);
  }

  OlderSimpleTable();
  OlderSimpleTable(OlderSimpleTable&& other);
  ~OlderSimpleTable();
  OlderSimpleTable& operator=(OlderSimpleTable&& other);

  static inline ::std::unique_ptr<OlderSimpleTable> New() { return ::std::make_unique<OlderSimpleTable>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, OlderSimpleTable* _value, size_t _offset);
  zx_status_t Clone(OlderSimpleTable* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }
  bool has_x_ : 1;
  union ValueUnion_x {
    ValueUnion_x() {}
    ~ValueUnion_x() {}

    int64_t value;
  };
  ValueUnion_x x_value_;
};


using OlderSimpleTablePtr = ::std::unique_ptr<OlderSimpleTable>;

class NewerSimpleTable  {
 public:
  static const fidl_type_t* FidlType;
  
  const int64_t& x() const {
    assert(has_x_);
    return x_value_.value;
  }
  bool has_x() const {
    return has_x_;
  }
  
  int64_t* mutable_x() {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value);
    }
    return &x_value_.value;
  }
  void set_x(int64_t _value) {
    if (!has_x_) {
      has_x_ = true;
      Construct(&x_value_.value, std::move(_value));
    } else {
      x_value_.value = std::move(_value);
    }
  }
  void clear_x() {
    if (!has_x_) {
      return;
    }
    has_x_ = false;
    Destruct(&x_value_.value);
  }
  
  const int64_t& y() const {
    assert(has_y_);
    return y_value_.value;
  }
  bool has_y() const {
    return has_y_;
  }
  
  int64_t* mutable_y() {
    if (!has_y_) {
      has_y_ = true;
      Construct(&y_value_.value);
    }
    return &y_value_.value;
  }
  void set_y(int64_t _value) {
    if (!has_y_) {
      has_y_ = true;
      Construct(&y_value_.value, std::move(_value));
    } else {
      y_value_.value = std::move(_value);
    }
  }
  void clear_y() {
    if (!has_y_) {
      return;
    }
    has_y_ = false;
    Destruct(&y_value_.value);
  }
  
  const int64_t& z() const {
    assert(has_z_);
    return z_value_.value;
  }
  bool has_z() const {
    return has_z_;
  }
  
  int64_t* mutable_z() {
    if (!has_z_) {
      has_z_ = true;
      Construct(&z_value_.value);
    }
    return &z_value_.value;
  }
  void set_z(int64_t _value) {
    if (!has_z_) {
      has_z_ = true;
      Construct(&z_value_.value, std::move(_value));
    } else {
      z_value_.value = std::move(_value);
    }
  }
  void clear_z() {
    if (!has_z_) {
      return;
    }
    has_z_ = false;
    Destruct(&z_value_.value);
  }

  NewerSimpleTable();
  NewerSimpleTable(NewerSimpleTable&& other);
  ~NewerSimpleTable();
  NewerSimpleTable& operator=(NewerSimpleTable&& other);

  static inline ::std::unique_ptr<NewerSimpleTable> New() { return ::std::make_unique<NewerSimpleTable>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, NewerSimpleTable* _value, size_t _offset);
  zx_status_t Clone(NewerSimpleTable* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }
  bool has_x_ : 1;
  bool has_y_ : 1;
  bool has_z_ : 1;
  union ValueUnion_x {
    ValueUnion_x() {}
    ~ValueUnion_x() {}

    int64_t value;
  };
  ValueUnion_x x_value_;
  union ValueUnion_y {
    ValueUnion_y() {}
    ~ValueUnion_y() {}

    int64_t value;
  };
  ValueUnion_y y_value_;
  union ValueUnion_z {
    ValueUnion_z() {}
    ~ValueUnion_z() {}

    int64_t value;
  };
  ValueUnion_z z_value_;
};


using NewerSimpleTablePtr = ::std::unique_ptr<NewerSimpleTable>;

class EmptyTable  {
 public:
  static const fidl_type_t* FidlType;

  EmptyTable();
  EmptyTable(EmptyTable&& other);
  ~EmptyTable();
  EmptyTable& operator=(EmptyTable&& other);

  static inline ::std::unique_ptr<EmptyTable> New() { return ::std::make_unique<EmptyTable>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, EmptyTable* _value, size_t _offset);
  zx_status_t Clone(EmptyTable* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }
};


using EmptyTablePtr = ::std::unique_ptr<EmptyTable>;

}  // namespace embedded
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::embedded::SimpleTable>
    : public EncodableCodingTraits<::test::name::embedded::SimpleTable, 16> {};

inline zx_status_t Clone(const ::test::name::embedded::SimpleTable& _value,
                         ::test::name::embedded::SimpleTable* result) {
  return _value.Clone(result);
}

template <>
struct ToEmbeddedTraits<::test::name::SimpleTable> {
  static ::test::name::embedded::SimpleTable Lift(const ::test::name::SimpleTable& _value) {
    ::test::name::embedded::SimpleTable _out;
    if (_value.has_x()) {
      *_out.mutable_x() = ToEmbedded(_value.x());
    }
    if (_value.has_y()) {
      *_out.mutable_y() = ToEmbedded(_value.y());
    }
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::SimpleTable> {
  static inline bool Equals(const ::test::name::embedded::SimpleTable& _lhs, const ::test::name::embedded::SimpleTable& _rhs) {
    if (_lhs.has_x()) {
      if (!_rhs.has_x()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.x(), _rhs.x())) {
	return false;
      }
    } else if (_rhs.has_x()) {
      return false;
    }
    if (_lhs.has_y()) {
      if (!_rhs.has_y()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.y(), _rhs.y())) {
	return false;
      }
    } else if (_rhs.has_y()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::embedded::OlderSimpleTable>
    : public EncodableCodingTraits<::test::name::embedded::OlderSimpleTable, 16> {};

inline zx_status_t Clone(const ::test::name::embedded::OlderSimpleTable& _value,
                         ::test::name::embedded::OlderSimpleTable* result) {
  return _value.Clone(result);
}

template <>
struct ToEmbeddedTraits<::test::name::OlderSimpleTable> {
  static ::test::name::embedded::OlderSimpleTable Lift(const ::test::name::OlderSimpleTable& _value) {
    ::test::name::embedded::OlderSimpleTable _out;
    if (_value.has_x()) {
      *_out.mutable_x() = ToEmbedded(_value.x());
    }
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::OlderSimpleTable> {
  static inline bool Equals(const ::test::name::embedded::OlderSimpleTable& _lhs, const ::test::name::embedded::OlderSimpleTable& _rhs) {
    if (_lhs.has_x()) {
      if (!_rhs.has_x()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.x(), _rhs.x())) {
	return false;
      }
    } else if (_rhs.has_x()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::embedded::NewerSimpleTable>
    : public EncodableCodingTraits<::test::name::embedded::NewerSimpleTable, 16> {};

inline zx_status_t Clone(const ::test::name::embedded::NewerSimpleTable& _value,
                         ::test::name::embedded::NewerSimpleTable* result) {
  return _value.Clone(result);
}

template <>
struct ToEmbeddedTraits<::test::name::NewerSimpleTable> {
  static ::test::name::embedded::NewerSimpleTable Lift(const ::test::name::NewerSimpleTable& _value) {
    ::test::name::embedded::NewerSimpleTable _out;
    if (_value.has_x()) {
      *_out.mutable_x() = ToEmbedded(_value.x());
    }
    if (_value.has_y()) {
      *_out.mutable_y() = ToEmbedded(_value.y());
    }
    if (_value.has_z()) {
      *_out.mutable_z() = ToEmbedded(_value.z());
    }
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::NewerSimpleTable> {
  static inline bool Equals(const ::test::name::embedded::NewerSimpleTable& _lhs, const ::test::name::embedded::NewerSimpleTable& _rhs) {
    if (_lhs.has_x()) {
      if (!_rhs.has_x()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.x(), _rhs.x())) {
	return false;
      }
    } else if (_rhs.has_x()) {
      return false;
    }
    if (_lhs.has_y()) {
      if (!_rhs.has_y()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.y(), _rhs.y())) {
	return false;
      }
    } else if (_rhs.has_y()) {
      return false;
    }
    if (_lhs.has_z()) {
      if (!_rhs.has_z()) {
	return false;
      }
      if (!::fidl::Equals(_lhs.z(), _rhs.z())) {
	return false;
      }
    } else if (_rhs.has_z()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::embedded::EmptyTable>
    : public EncodableCodingTraits<::test::name::embedded::EmptyTable, 16> {};

inline zx_status_t Clone(const ::test::name::embedded::EmptyTable& _value,
                         ::test::name::embedded::EmptyTable* result) {
  return _value.Clone(result);
}

template <>
struct ToEmbeddedTraits<::test::name::EmptyTable> {
  static ::test::name::embedded::EmptyTable Lift(const ::test::name::EmptyTable& _value) {
    ::test::name::embedded::EmptyTable _out;
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::EmptyTable> {
  static inline bool Equals(const ::test::name::embedded::EmptyTable& _lhs, const ::test::name::embedded::EmptyTable& _rhs) {
    return true;
  }
};}  // namespace fidl
