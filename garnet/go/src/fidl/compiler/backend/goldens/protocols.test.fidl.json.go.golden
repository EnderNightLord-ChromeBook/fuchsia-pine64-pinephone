// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type ErrorEnun uint32
const (
	ErrorEnunErrFoo ErrorEnun = 1
	ErrorEnunErrBar ErrorEnun = 2
)
func (x ErrorEnun) String() string {
	switch x {
	case 1:
		return "ErrFoo"
	case 2:
		return "ErrBar"
	}
	return "Unknown"
}

type WithErrorSyntaxErrorAsPrimitiveResponse struct {
	_ struct{} `fidl2:"s,1,1"`
}

var _mWithErrorSyntaxErrorAsPrimitiveResponse = _bindings.CreateLazyMarshaler(WithErrorSyntaxErrorAsPrimitiveResponse{})

func (msg *WithErrorSyntaxErrorAsPrimitiveResponse) Marshaler() _bindings.Marshaler {
	return _mWithErrorSyntaxErrorAsPrimitiveResponse
}

type WithErrorSyntaxErrorAsEnumResponse struct {
	_ struct{} `fidl2:"s,1,1"`
}

var _mWithErrorSyntaxErrorAsEnumResponse = _bindings.CreateLazyMarshaler(WithErrorSyntaxErrorAsEnumResponse{})

func (msg *WithErrorSyntaxErrorAsEnumResponse) Marshaler() _bindings.Marshaler {
	return _mWithErrorSyntaxErrorAsEnumResponse
}
type WithErrorSyntaxErrorAsPrimitiveResultTag uint32
const (
	_ WithErrorSyntaxErrorAsPrimitiveResultTag = iota
	WithErrorSyntaxErrorAsPrimitiveResultResponse
	WithErrorSyntaxErrorAsPrimitiveResultErr
)


type WithErrorSyntaxErrorAsPrimitiveResult struct {
	WithErrorSyntaxErrorAsPrimitiveResultTag `fidl:"tag" fidl2:"u,8,4"`
	Response WithErrorSyntaxErrorAsPrimitiveResponse 
	Err uint32 
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) Which() WithErrorSyntaxErrorAsPrimitiveResultTag {
	return u.WithErrorSyntaxErrorAsPrimitiveResultTag
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) SetResponse(response WithErrorSyntaxErrorAsPrimitiveResponse) {
	u.WithErrorSyntaxErrorAsPrimitiveResultTag = WithErrorSyntaxErrorAsPrimitiveResultResponse
	u.Response = response
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) SetErr(err uint32) {
	u.WithErrorSyntaxErrorAsPrimitiveResultTag = WithErrorSyntaxErrorAsPrimitiveResultErr
	u.Err = err
}
type WithErrorSyntaxErrorAsEnumResultTag uint32
const (
	_ WithErrorSyntaxErrorAsEnumResultTag = iota
	WithErrorSyntaxErrorAsEnumResultResponse
	WithErrorSyntaxErrorAsEnumResultErr
)


type WithErrorSyntaxErrorAsEnumResult struct {
	WithErrorSyntaxErrorAsEnumResultTag `fidl:"tag" fidl2:"u,8,4"`
	Response WithErrorSyntaxErrorAsEnumResponse 
	Err ErrorEnun 
}

func (u *WithErrorSyntaxErrorAsEnumResult) Which() WithErrorSyntaxErrorAsEnumResultTag {
	return u.WithErrorSyntaxErrorAsEnumResultTag
}

func (u *WithErrorSyntaxErrorAsEnumResult) SetResponse(response WithErrorSyntaxErrorAsEnumResponse) {
	u.WithErrorSyntaxErrorAsEnumResultTag = WithErrorSyntaxErrorAsEnumResultResponse
	u.Response = response
}

func (u *WithErrorSyntaxErrorAsEnumResult) SetErr(err ErrorEnun) {
	u.WithErrorSyntaxErrorAsEnumResultTag = WithErrorSyntaxErrorAsEnumResultErr
	u.Err = err
}
const (
	WithAndWithoutRequestResponseNoRequestNoResponseGenOrdinal uint64 = 0x1e03f87500000000
	WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal uint64 = 0x4df6dbd500000000
	WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal uint64 = 0x668d7f800000000
	WithAndWithoutRequestResponseWithRequestNoResponseGenOrdinal uint64 = 0x19c2137100000000
	WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal uint64 = 0x76f2397300000000
	WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal uint64 = 0x1973292000000000
	WithAndWithoutRequestResponseOnEmptyResponseGenOrdinal uint64 = 0x697fd73200000000
	WithAndWithoutRequestResponseOnWithResponseGenOrdinal uint64 = 0x7a47120700000000
)

type withAndWithoutRequestResponseNoRequestWithResponseResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	Ret string
}

var _mwithAndWithoutRequestResponseNoRequestWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseNoRequestWithResponseResponse{})

func (msg *withAndWithoutRequestResponseNoRequestWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseNoRequestWithResponseResponse
}

type withAndWithoutRequestResponseWithRequestNoResponseRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	Arg string
}

var _mwithAndWithoutRequestResponseWithRequestNoResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestNoResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestNoResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestNoResponseRequest
}

type withAndWithoutRequestResponseWithRequestEmptyResponseRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	Arg string
}

var _mwithAndWithoutRequestResponseWithRequestEmptyResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestEmptyResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestEmptyResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestEmptyResponseRequest
}

type withAndWithoutRequestResponseWithRequestWithResponseRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	Arg string
}

var _mwithAndWithoutRequestResponseWithRequestWithResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestWithResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestWithResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestWithResponseRequest
}

type withAndWithoutRequestResponseWithRequestWithResponseResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	Ret string
}

var _mwithAndWithoutRequestResponseWithRequestWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestWithResponseResponse{})

func (msg *withAndWithoutRequestResponseWithRequestWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestWithResponseResponse
}

type withAndWithoutRequestResponseOnWithResponseResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	Ret string
}

var _mwithAndWithoutRequestResponseOnWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseOnWithResponseResponse{})

func (msg *withAndWithoutRequestResponseOnWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseOnWithResponseResponse
}

type WithAndWithoutRequestResponseInterface _bindings.ChannelProxy


func (p *WithAndWithoutRequestResponseInterface) NoRequestNoResponse() error {
	var req_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseNoRequestNoResponseGenOrdinal, req_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) NoRequestEmptyResponse() error {
	var req_ _bindings.Message
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal, req_, resp_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) NoRequestWithResponse() (string, error) {
	var req_ _bindings.Message
	resp_ := &withAndWithoutRequestResponseNoRequestWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal, req_, resp_)
	return resp_.Ret, err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestNoResponse(arg string) error {
	req_ := &withAndWithoutRequestResponseWithRequestNoResponseRequest{
		Arg: arg,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseWithRequestNoResponseGenOrdinal, req_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestEmptyResponse(arg string) error {
	req_ := &withAndWithoutRequestResponseWithRequestEmptyResponseRequest{
		Arg: arg,
	}
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal, req_, resp_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestWithResponse(arg string) (string, error) {
	req_ := &withAndWithoutRequestResponseWithRequestWithResponseRequest{
		Arg: arg,
	}
	resp_ := &withAndWithoutRequestResponseWithRequestWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal, req_, resp_)
	return resp_.Ret, err
}

func (p *WithAndWithoutRequestResponseInterface) ExpectOnEmptyResponse() error {
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Recv(WithAndWithoutRequestResponseOnEmptyResponseGenOrdinal, resp_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) ExpectOnWithResponse() (string, error) {
	resp_ := &withAndWithoutRequestResponseOnWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(WithAndWithoutRequestResponseOnWithResponseGenOrdinal, resp_)
	return resp_.Ret, err
}


type WithAndWithoutRequestResponse interface {
	NoRequestNoResponse() error
	NoRequestEmptyResponse() error
	NoRequestWithResponse() (string, error)
	WithRequestNoResponse(arg string) error
	WithRequestEmptyResponse(arg string) error
	WithRequestWithResponse(arg string) (string, error)
}

type WithAndWithoutRequestResponseTransitionalBase struct {}


type WithAndWithoutRequestResponseInterfaceRequest _bindings.InterfaceRequest

func NewWithAndWithoutRequestResponseInterfaceRequest() (WithAndWithoutRequestResponseInterfaceRequest, *WithAndWithoutRequestResponseInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return WithAndWithoutRequestResponseInterfaceRequest(req), (*WithAndWithoutRequestResponseInterface)(cli), err
}

type WithAndWithoutRequestResponseStub struct {
	Impl WithAndWithoutRequestResponse
}

func (s_ *WithAndWithoutRequestResponseStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case WithAndWithoutRequestResponseNoRequestNoResponseGenOrdinal:
		err_ := s_.Impl.NoRequestNoResponse()
		return nil, err_
	case WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal:
		err_ := s_.Impl.NoRequestEmptyResponse()
		return nil, err_
	case WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal:
		ret, err_ := s_.Impl.NoRequestWithResponse()
		out_ := withAndWithoutRequestResponseNoRequestWithResponseResponse{}
		out_.Ret = ret
		return &out_, err_
	case WithAndWithoutRequestResponseWithRequestNoResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestNoResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.WithRequestNoResponse(in_.Arg)
		return nil, err_
	case WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestEmptyResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.WithRequestEmptyResponse(in_.Arg)
		return nil, err_
	case WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestWithResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		ret, err_ := s_.Impl.WithRequestWithResponse(in_.Arg)
		out_ := withAndWithoutRequestResponseWithRequestWithResponseResponse{}
		out_.Ret = ret
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type WithAndWithoutRequestResponseService struct {
	_bindings.BindingSet
}

func (s *WithAndWithoutRequestResponseService) Add(impl WithAndWithoutRequestResponse, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&WithAndWithoutRequestResponseStub{Impl: impl}, c, onError)
}

func (s *WithAndWithoutRequestResponseService) EventProxyFor(key _bindings.BindingKey) (*WithAndWithoutRequestResponseEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*WithAndWithoutRequestResponseEventProxy)(pxy), err
}

type WithAndWithoutRequestResponseEventProxy _bindings.ChannelProxy

func (p *WithAndWithoutRequestResponseEventProxy) OnEmptyResponse() error {
	var event_ _bindings.Message
	return ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseOnEmptyResponseGenOrdinal, event_)
}
func (p *WithAndWithoutRequestResponseEventProxy) OnWithResponse(ret string) error {
	event_ := &withAndWithoutRequestResponseOnWithResponseResponse{
		Ret: ret,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseOnWithResponseGenOrdinal, event_)
}


const (
	WithErrorSyntaxErrorAsPrimitiveGenOrdinal uint64 = 0x7b58113900000000
	WithErrorSyntaxErrorAsEnumGenOrdinal uint64 = 0x4c95de1f00000000
)

type withErrorSyntaxErrorAsPrimitiveResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result WithErrorSyntaxErrorAsPrimitiveResult
}

var _mwithErrorSyntaxErrorAsPrimitiveResponse = _bindings.CreateLazyMarshaler(withErrorSyntaxErrorAsPrimitiveResponse{})

func (msg *withErrorSyntaxErrorAsPrimitiveResponse) Marshaler() _bindings.Marshaler {
	return _mwithErrorSyntaxErrorAsPrimitiveResponse
}

type withErrorSyntaxErrorAsEnumResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result WithErrorSyntaxErrorAsEnumResult
}

var _mwithErrorSyntaxErrorAsEnumResponse = _bindings.CreateLazyMarshaler(withErrorSyntaxErrorAsEnumResponse{})

func (msg *withErrorSyntaxErrorAsEnumResponse) Marshaler() _bindings.Marshaler {
	return _mwithErrorSyntaxErrorAsEnumResponse
}

type WithErrorSyntaxInterface _bindings.ChannelProxy


func (p *WithErrorSyntaxInterface) ErrorAsPrimitive() (WithErrorSyntaxErrorAsPrimitiveResult, error) {
	var req_ _bindings.Message
	resp_ := &withErrorSyntaxErrorAsPrimitiveResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithErrorSyntaxErrorAsPrimitiveGenOrdinal, req_, resp_)
	return resp_.Result, err
}

func (p *WithErrorSyntaxInterface) ErrorAsEnum() (WithErrorSyntaxErrorAsEnumResult, error) {
	var req_ _bindings.Message
	resp_ := &withErrorSyntaxErrorAsEnumResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithErrorSyntaxErrorAsEnumGenOrdinal, req_, resp_)
	return resp_.Result, err
}


type WithErrorSyntax interface {
	ErrorAsPrimitive() (WithErrorSyntaxErrorAsPrimitiveResult, error)
	ErrorAsEnum() (WithErrorSyntaxErrorAsEnumResult, error)
}

type WithErrorSyntaxTransitionalBase struct {}


type WithErrorSyntaxInterfaceRequest _bindings.InterfaceRequest

func NewWithErrorSyntaxInterfaceRequest() (WithErrorSyntaxInterfaceRequest, *WithErrorSyntaxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return WithErrorSyntaxInterfaceRequest(req), (*WithErrorSyntaxInterface)(cli), err
}

type WithErrorSyntaxStub struct {
	Impl WithErrorSyntax
}

func (s_ *WithErrorSyntaxStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case WithErrorSyntaxErrorAsPrimitiveGenOrdinal:
		result, err_ := s_.Impl.ErrorAsPrimitive()
		out_ := withErrorSyntaxErrorAsPrimitiveResponse{}
		out_.Result = result
		return &out_, err_
	case WithErrorSyntaxErrorAsEnumGenOrdinal:
		result, err_ := s_.Impl.ErrorAsEnum()
		out_ := withErrorSyntaxErrorAsEnumResponse{}
		out_.Result = result
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type WithErrorSyntaxService struct {
	_bindings.BindingSet
}

func (s *WithErrorSyntaxService) Add(impl WithErrorSyntax, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&WithErrorSyntaxStub{Impl: impl}, c, onError)
}

func (s *WithErrorSyntaxService) EventProxyFor(key _bindings.BindingKey) (*WithErrorSyntaxEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*WithErrorSyntaxEventProxy)(pxy), err
}

type WithErrorSyntaxEventProxy _bindings.ChannelProxy



const (
	OvernetInternalProtocolMethodAGenOrdinal uint64 = 0x76d7408d00000000
	OvernetInternalProtocolEventAGenOrdinal uint64 = 0x6811f58c00000000
	OvernetInternalProtocolMethodBGenOrdinal uint64 = 0x38c06d4000000000
	OvernetInternalProtocolMutateSocketGenOrdinal uint64 = 0x64cdaf6600000000
)

type overnetInternalProtocolMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _movernetInternalProtocolMethodARequest = _bindings.CreateLazyMarshaler(overnetInternalProtocolMethodARequest{})

func (msg *overnetInternalProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolMethodARequest
}

type overnetInternalProtocolEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _movernetInternalProtocolEventAResponse = _bindings.CreateLazyMarshaler(overnetInternalProtocolEventAResponse{})

func (msg *overnetInternalProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolEventAResponse
}

type overnetInternalProtocolMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _movernetInternalProtocolMethodBRequest = _bindings.CreateLazyMarshaler(overnetInternalProtocolMethodBRequest{})

func (msg *overnetInternalProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolMethodBRequest
}

type overnetInternalProtocolMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _movernetInternalProtocolMethodBResponse = _bindings.CreateLazyMarshaler(overnetInternalProtocolMethodBResponse{})

func (msg *overnetInternalProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolMethodBResponse
}

type overnetInternalProtocolMutateSocketRequest struct {
	_ struct{} `fidl2:"s,8,0"`
	A _zx.Socket`fidl2:"0"`
}

var _movernetInternalProtocolMutateSocketRequest = _bindings.CreateLazyMarshaler(overnetInternalProtocolMutateSocketRequest{})

func (msg *overnetInternalProtocolMutateSocketRequest) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolMutateSocketRequest
}

type overnetInternalProtocolMutateSocketResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	B _zx.Socket`fidl2:"0"`
}

var _movernetInternalProtocolMutateSocketResponse = _bindings.CreateLazyMarshaler(overnetInternalProtocolMutateSocketResponse{})

func (msg *overnetInternalProtocolMutateSocketResponse) Marshaler() _bindings.Marshaler {
	return _movernetInternalProtocolMutateSocketResponse
}

type OvernetInternalProtocolInterface _bindings.


func (p *OvernetInternalProtocolInterface) MethodA(a int64,b int64) error {
	req_ := &overnetInternalProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.)(p)).Send(OvernetInternalProtocolMethodAGenOrdinal, req_)
	return err
}

func (p *OvernetInternalProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := &overnetInternalProtocolEventAResponse{}
	err := ((*_bindings.)(p)).Recv(OvernetInternalProtocolEventAGenOrdinal, resp_)
	return resp_.A, resp_.B, err
}

func (p *OvernetInternalProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := &overnetInternalProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := &overnetInternalProtocolMethodBResponse{}
	err := ((*_bindings.)(p)).Call(OvernetInternalProtocolMethodBGenOrdinal, req_, resp_)
	return resp_.Result, err
}

func (p *OvernetInternalProtocolInterface) MutateSocket(a _zx.Socket) (_zx.Socket, error) {
	req_ := &overnetInternalProtocolMutateSocketRequest{
		A: a,
	}
	resp_ := &overnetInternalProtocolMutateSocketResponse{}
	err := ((*_bindings.)(p)).Call(OvernetInternalProtocolMutateSocketGenOrdinal, req_, resp_)
	return resp_.B, err
}


type OvernetInternalProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
	MutateSocket(a _zx.Socket) (_zx.Socket, error)
}

type OvernetInternalProtocolTransitionalBase struct {}



type OvernetInternalProtocolStub struct {
	Impl OvernetInternalProtocol
}

func (s_ *OvernetInternalProtocolStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case OvernetInternalProtocolMethodAGenOrdinal:
		in_ := overnetInternalProtocolMethodARequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case OvernetInternalProtocolMethodBGenOrdinal:
		in_ := overnetInternalProtocolMethodBRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		result, err_ := s_.Impl.MethodB(in_.A,in_.B)
		out_ := overnetInternalProtocolMethodBResponse{}
		out_.Result = result
		return &out_, err_
	case OvernetInternalProtocolMutateSocketGenOrdinal:
		in_ := overnetInternalProtocolMutateSocketRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		b, err_ := s_.Impl.MutateSocket(in_.A)
		out_ := overnetInternalProtocolMutateSocketResponse{}
		out_.B = b
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}

type OvernetInternalProtocolEventProxy _bindings.

func (p *OvernetInternalProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := &overnetInternalProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.)(p)).Send(OvernetInternalProtocolEventAGenOrdinal, event_)
}


const (
	ChannelProtocolMethodAGenOrdinal uint64 = 0x556693d200000000
	ChannelProtocolEventAGenOrdinal uint64 = 0x1c78c20200000000
	ChannelProtocolMethodBGenOrdinal uint64 = 0xac6551b00000000
	ChannelProtocolMutateSocketGenOrdinal uint64 = 0x4b02e28600000000
)

type channelProtocolMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mchannelProtocolMethodARequest = _bindings.CreateLazyMarshaler(channelProtocolMethodARequest{})

func (msg *channelProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodARequest
}

type channelProtocolEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mchannelProtocolEventAResponse = _bindings.CreateLazyMarshaler(channelProtocolEventAResponse{})

func (msg *channelProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolEventAResponse
}

type channelProtocolMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mchannelProtocolMethodBRequest = _bindings.CreateLazyMarshaler(channelProtocolMethodBRequest{})

func (msg *channelProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodBRequest
}

type channelProtocolMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mchannelProtocolMethodBResponse = _bindings.CreateLazyMarshaler(channelProtocolMethodBResponse{})

func (msg *channelProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodBResponse
}

type channelProtocolMutateSocketRequest struct {
	_ struct{} `fidl2:"s,8,0"`
	A _zx.Socket`fidl2:"0"`
}

var _mchannelProtocolMutateSocketRequest = _bindings.CreateLazyMarshaler(channelProtocolMutateSocketRequest{})

func (msg *channelProtocolMutateSocketRequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMutateSocketRequest
}

type channelProtocolMutateSocketResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	B _zx.Socket`fidl2:"0"`
}

var _mchannelProtocolMutateSocketResponse = _bindings.CreateLazyMarshaler(channelProtocolMutateSocketResponse{})

func (msg *channelProtocolMutateSocketResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMutateSocketResponse
}

type ChannelProtocolInterface _bindings.ChannelProxy


func (p *ChannelProtocolInterface) MethodA(a int64,b int64) error {
	req_ := &channelProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolMethodAGenOrdinal, req_)
	return err
}

func (p *ChannelProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := &channelProtocolEventAResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(ChannelProtocolEventAGenOrdinal, resp_)
	return resp_.A, resp_.B, err
}

func (p *ChannelProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := &channelProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := &channelProtocolMethodBResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ChannelProtocolMethodBGenOrdinal, req_, resp_)
	return resp_.Result, err
}

func (p *ChannelProtocolInterface) MutateSocket(a _zx.Socket) (_zx.Socket, error) {
	req_ := &channelProtocolMutateSocketRequest{
		A: a,
	}
	resp_ := &channelProtocolMutateSocketResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ChannelProtocolMutateSocketGenOrdinal, req_, resp_)
	return resp_.B, err
}


type ChannelProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
	MutateSocket(a _zx.Socket) (_zx.Socket, error)
}

type ChannelProtocolTransitionalBase struct {}


type ChannelProtocolInterfaceRequest _bindings.InterfaceRequest

func NewChannelProtocolInterfaceRequest() (ChannelProtocolInterfaceRequest, *ChannelProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChannelProtocolInterfaceRequest(req), (*ChannelProtocolInterface)(cli), err
}

type ChannelProtocolStub struct {
	Impl ChannelProtocol
}

func (s_ *ChannelProtocolStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case ChannelProtocolMethodAGenOrdinal:
		in_ := channelProtocolMethodARequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case ChannelProtocolMethodBGenOrdinal:
		in_ := channelProtocolMethodBRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		result, err_ := s_.Impl.MethodB(in_.A,in_.B)
		out_ := channelProtocolMethodBResponse{}
		out_.Result = result
		return &out_, err_
	case ChannelProtocolMutateSocketGenOrdinal:
		in_ := channelProtocolMutateSocketRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		b, err_ := s_.Impl.MutateSocket(in_.A)
		out_ := channelProtocolMutateSocketResponse{}
		out_.B = b
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type ChannelProtocolService struct {
	_bindings.BindingSet
}

func (s *ChannelProtocolService) Add(impl ChannelProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChannelProtocolStub{Impl: impl}, c, onError)
}

func (s *ChannelProtocolService) EventProxyFor(key _bindings.BindingKey) (*ChannelProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChannelProtocolEventProxy)(pxy), err
}

type ChannelProtocolEventProxy _bindings.ChannelProxy

func (p *ChannelProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := &channelProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolEventAGenOrdinal, event_)
}


const (
	KitchenSinkMethodAGenOrdinal uint64 = 0x1adb443000000000
	KitchenSinkEventAGenOrdinal uint64 = 0x6b040a1100000000
	KitchenSinkMethodBGenOrdinal uint64 = 0x772dcaa400000000
	KitchenSinkMutateSocketGenOrdinal uint64 = 0x6e7c00600000000
)

type kitchenSinkMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mkitchenSinkMethodARequest = _bindings.CreateLazyMarshaler(kitchenSinkMethodARequest{})

func (msg *kitchenSinkMethodARequest) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkMethodARequest
}

type kitchenSinkEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mkitchenSinkEventAResponse = _bindings.CreateLazyMarshaler(kitchenSinkEventAResponse{})

func (msg *kitchenSinkEventAResponse) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkEventAResponse
}

type kitchenSinkMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mkitchenSinkMethodBRequest = _bindings.CreateLazyMarshaler(kitchenSinkMethodBRequest{})

func (msg *kitchenSinkMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkMethodBRequest
}

type kitchenSinkMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mkitchenSinkMethodBResponse = _bindings.CreateLazyMarshaler(kitchenSinkMethodBResponse{})

func (msg *kitchenSinkMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkMethodBResponse
}

type kitchenSinkMutateSocketRequest struct {
	_ struct{} `fidl2:"s,8,0"`
	A _zx.Socket`fidl2:"0"`
}

var _mkitchenSinkMutateSocketRequest = _bindings.CreateLazyMarshaler(kitchenSinkMutateSocketRequest{})

func (msg *kitchenSinkMutateSocketRequest) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkMutateSocketRequest
}

type kitchenSinkMutateSocketResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	B _zx.Socket`fidl2:"0"`
}

var _mkitchenSinkMutateSocketResponse = _bindings.CreateLazyMarshaler(kitchenSinkMutateSocketResponse{})

func (msg *kitchenSinkMutateSocketResponse) Marshaler() _bindings.Marshaler {
	return _mkitchenSinkMutateSocketResponse
}

type KitchenSinkInterface _bindings.


func (p *KitchenSinkInterface) MethodA(a int64,b int64) error {
	req_ := &kitchenSinkMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.)(p)).Send(KitchenSinkMethodAGenOrdinal, req_)
	return err
}

func (p *KitchenSinkInterface) ExpectEventA() (int64, int64, error) {
	resp_ := &kitchenSinkEventAResponse{}
	err := ((*_bindings.)(p)).Recv(KitchenSinkEventAGenOrdinal, resp_)
	return resp_.A, resp_.B, err
}

func (p *KitchenSinkInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := &kitchenSinkMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := &kitchenSinkMethodBResponse{}
	err := ((*_bindings.)(p)).Call(KitchenSinkMethodBGenOrdinal, req_, resp_)
	return resp_.Result, err
}

func (p *KitchenSinkInterface) MutateSocket(a _zx.Socket) (_zx.Socket, error) {
	req_ := &kitchenSinkMutateSocketRequest{
		A: a,
	}
	resp_ := &kitchenSinkMutateSocketResponse{}
	err := ((*_bindings.)(p)).Call(KitchenSinkMutateSocketGenOrdinal, req_, resp_)
	return resp_.B, err
}


type KitchenSink interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
	MutateSocket(a _zx.Socket) (_zx.Socket, error)
}

type KitchenSinkTransitionalBase struct {}



type KitchenSinkStub struct {
	Impl KitchenSink
}

func (s_ *KitchenSinkStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case KitchenSinkMethodAGenOrdinal:
		in_ := kitchenSinkMethodARequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case KitchenSinkMethodBGenOrdinal:
		in_ := kitchenSinkMethodBRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		result, err_ := s_.Impl.MethodB(in_.A,in_.B)
		out_ := kitchenSinkMethodBResponse{}
		out_.Result = result
		return &out_, err_
	case KitchenSinkMutateSocketGenOrdinal:
		in_ := kitchenSinkMutateSocketRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		b, err_ := s_.Impl.MutateSocket(in_.A)
		out_ := kitchenSinkMutateSocketResponse{}
		out_.B = b
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}

type KitchenSinkEventProxy _bindings.

func (p *KitchenSinkEventProxy) EventA(a int64,b int64) error {
	event_ := &kitchenSinkEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.)(p)).Send(KitchenSinkEventAGenOrdinal, event_)
}


