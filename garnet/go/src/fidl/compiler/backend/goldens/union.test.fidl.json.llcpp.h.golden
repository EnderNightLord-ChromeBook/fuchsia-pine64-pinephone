// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct Union;

extern "C" const fidl_type_t test_name_UnionTable;

struct Union {
  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    kVectorStringAlsoNeedsConstructor = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Union();
  ~Union();

  Union(Union&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Union& operator=(Union&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_Primitive() const { return tag_ == Tag::kPrimitive; }

  int32_t& mutable_Primitive();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Primitive(const T& v) {
    mutable_Primitive() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Primitive(T&& v) {
    mutable_Primitive() = std::move(v);
  }

  int32_t const & Primitive() const { return Primitive_; }

  bool is_StringNeedsConstructor() const { return tag_ == Tag::kStringNeedsConstructor; }

  ::fidl::StringView& mutable_StringNeedsConstructor();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_copy_assignable<T>::value>
  set_StringNeedsConstructor(const T& v) {
    mutable_StringNeedsConstructor() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_move_assignable<T>::value>
  set_StringNeedsConstructor(T&& v) {
    mutable_StringNeedsConstructor() = std::move(v);
  }

  ::fidl::StringView const & StringNeedsConstructor() const { return StringNeedsConstructor_; }

  bool is_VectorStringAlsoNeedsConstructor() const { return tag_ == Tag::kVectorStringAlsoNeedsConstructor; }

  ::fidl::VectorView<::fidl::StringView>& mutable_VectorStringAlsoNeedsConstructor();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_copy_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(const T& v) {
    mutable_VectorStringAlsoNeedsConstructor() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_move_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(T&& v) {
    mutable_VectorStringAlsoNeedsConstructor() = std::move(v);
  }

  ::fidl::VectorView<::fidl::StringView> const & VectorStringAlsoNeedsConstructor() const { return VectorStringAlsoNeedsConstructor_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_name_UnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;

 private:
  void Destroy();
  void MoveImpl_(Union&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    int32_t Primitive_;
    ::fidl::StringView StringNeedsConstructor_;
    ::fidl::VectorView<::fidl::StringView> VectorStringAlsoNeedsConstructor_;
  };
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Union> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Union>);

}  // namespace fidl
