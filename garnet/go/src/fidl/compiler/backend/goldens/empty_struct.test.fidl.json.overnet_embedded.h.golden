// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "src/connectivity/overnet/deprecated/lib/embedded/header.h"

#include <test/name/cpp/fidl.h>

namespace test {
namespace name {
namespace embedded {

class Empty;

class Empty  {
 public:
  static const fidl_type_t* FidlType;
  
  uint8_t __reserved = 0u;

  static inline ::std::unique_ptr<Empty> New() { return ::std::make_unique<Empty>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, Empty* value, size_t _offset);
  zx_status_t Clone(Empty* result) const;
};

inline zx_status_t Clone(const ::test::name::embedded::Empty& _value,
                         ::test::name::embedded::Empty* _result) {
  return _value.Clone(_result);
}

using EmptyPtr = ::std::unique_ptr<Empty>;

}  // namespace embedded
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::embedded::Empty>
    : public EncodableCodingTraits<::test::name::embedded::Empty, 1> {};

inline zx_status_t Clone(const ::test::name::embedded::Empty& value,
                         ::test::name::embedded::Empty* result) {
  return ::test::name::embedded::Clone(value, result);
}

template <>
struct ToEmbeddedTraits<::test::name::Empty> {
  static ::test::name::embedded::Empty Lift(const ::test::name::Empty& _value) {
    return ::test::name::embedded::Empty {
      ToEmbedded(_value.__reserved),
    };
  }
};

template<>
struct Equality<::test::name::embedded::Empty> {
  static inline bool Equals(const ::test::name::embedded::Empty& _lhs, const ::test::name::embedded::Empty& _rhs) {
    if (!::fidl::Equals(_lhs.__reserved, _rhs.__reserved)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
