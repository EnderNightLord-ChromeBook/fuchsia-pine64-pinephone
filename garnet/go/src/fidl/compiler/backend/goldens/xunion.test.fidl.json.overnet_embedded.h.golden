// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "src/connectivity/overnet/lib/embedded/header.h"

#include <test/name/cpp/fidl.h>

namespace test {
namespace name {
namespace embedded {

class OlderSimpleUnion;
class NewerSimpleUnion;

class OlderSimpleUnion {
 public:
 static const fidl_type_t* FidlType;

  OlderSimpleUnion();
  ~OlderSimpleUnion();

  OlderSimpleUnion(OlderSimpleUnion&&);
  OlderSimpleUnion& operator=(OlderSimpleUnion&&);

  enum Tag : fidl_xunion_tag_t {
    Empty = 0,
    kI = 1026732503,  // 0x3d32b1d7
    kF = 1362546558,  // 0x5136cf7e
  };

  static inline ::std::unique_ptr<OlderSimpleUnion> New() { return ::std::make_unique<OlderSimpleUnion>(); }

  void Encode(::overnet::internal::Encoder* encoder, size_t offset);
  static void Decode(::overnet::internal::Decoder* decoder, OlderSimpleUnion* value, size_t offset);
  zx_status_t Clone(OlderSimpleUnion* result) const;

  bool is_i() const { return tag_ == Tag::kI; }
  
  int64_t& i() {
    EnsureStorageInitialized(Tag::kI);
    return i_;
  }
  
  const int64_t& i() const { return i_; }
  void set_i(int64_t value);

  bool is_f() const { return tag_ == Tag::kF; }
  
  float& f() {
    EnsureStorageInitialized(Tag::kF);
    return f_;
  }
  
  const float& f() const { return f_; }
  void set_f(float value);

  Tag Which() const { return Tag(tag_); }

  friend ::fidl::Equality<::test::name::embedded::OlderSimpleUnion>;

  private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = Tag::Empty;
  union {
    int64_t i_;
    float f_;
  };
};

inline zx_status_t Clone(const ::test::name::embedded::OlderSimpleUnion& value,
                         ::test::name::embedded::OlderSimpleUnion* result) {
  return value.Clone(result);
}

using OlderSimpleUnionPtr = ::std::unique_ptr<OlderSimpleUnion>;

class NewerSimpleUnion {
 public:
 static const fidl_type_t* FidlType;

  NewerSimpleUnion();
  ~NewerSimpleUnion();

  NewerSimpleUnion(NewerSimpleUnion&&);
  NewerSimpleUnion& operator=(NewerSimpleUnion&&);

  enum Tag : fidl_xunion_tag_t {
    Empty = 0,
    kI = 693944286,  // 0x295cbfde
    kS = 473666119,  // 0x1c3b9247
    kV = 1815655055,  // 0x6c38b28f
  };

  static inline ::std::unique_ptr<NewerSimpleUnion> New() { return ::std::make_unique<NewerSimpleUnion>(); }

  void Encode(::overnet::internal::Encoder* encoder, size_t offset);
  static void Decode(::overnet::internal::Decoder* decoder, NewerSimpleUnion* value, size_t offset);
  zx_status_t Clone(NewerSimpleUnion* result) const;

  bool is_i() const { return tag_ == Tag::kI; }
  
  int64_t& i() {
    EnsureStorageInitialized(Tag::kI);
    return i_;
  }
  
  const int64_t& i() const { return i_; }
  void set_i(int64_t value);

  bool is_s() const { return tag_ == Tag::kS; }
  
  ::std::string& s() {
    EnsureStorageInitialized(Tag::kS);
    return s_;
  }
  
  const ::std::string& s() const { return s_; }
  void set_s(::std::string value);

  bool is_v() const { return tag_ == Tag::kV; }
  
  ::std::vector<::std::string>& v() {
    EnsureStorageInitialized(Tag::kV);
    return v_;
  }
  
  const ::std::vector<::std::string>& v() const { return v_; }
  void set_v(::std::vector<::std::string> value);

  Tag Which() const { return Tag(tag_); }

  friend ::fidl::Equality<::test::name::embedded::NewerSimpleUnion>;

  private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = Tag::Empty;
  union {
    int64_t i_;
    ::std::string s_;
    ::std::vector<::std::string> v_;
  };
};

inline zx_status_t Clone(const ::test::name::embedded::NewerSimpleUnion& value,
                         ::test::name::embedded::NewerSimpleUnion* result) {
  return value.Clone(result);
}

using NewerSimpleUnionPtr = ::std::unique_ptr<NewerSimpleUnion>;

}  // namespace embedded
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::embedded::OlderSimpleUnion>
    : public EncodableCodingTraits<::test::name::embedded::OlderSimpleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::embedded::OlderSimpleUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(::overnet::internal::Encoder* encoder, std::unique_ptr<::test::name::embedded::OlderSimpleUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    } else {
      ::test::name::embedded::OlderSimpleUnion empty;
      empty.Encode(encoder, offset);
    }
  }

  static void Decode(::overnet::internal::Decoder* decoder, std::unique_ptr<::test::name::embedded::OlderSimpleUnion>* value, size_t offset) {
    value->reset(new ::test::name::embedded::OlderSimpleUnion);

    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      return;
    }

    ::test::name::embedded::OlderSimpleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::embedded::OlderSimpleUnion& value,
                         ::test::name::embedded::OlderSimpleUnion* result) {
  return ::test::name::embedded::Clone(value, result);
}

template <>
struct ToEmbeddedTraits<::test::name::OlderSimpleUnion> {
  static ::test::name::embedded::OlderSimpleUnion Lift(const ::test::name::OlderSimpleUnion& _value) {
    ::test::name::embedded::OlderSimpleUnion _out;
    switch (_value.Which()) {
      case ::test::name::OlderSimpleUnion::Tag::kI:
        _out.set_i(ToEmbedded(_value.i()));
        break;
      case ::test::name::OlderSimpleUnion::Tag::kF:
        _out.set_f(ToEmbedded(_value.f()));
        break;
      case ::test::name::OlderSimpleUnion::Tag::Empty:
        break;
    }
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::OlderSimpleUnion> {
  static inline bool Equals(const ::test::name::embedded::OlderSimpleUnion& _lhs, const ::test::name::embedded::OlderSimpleUnion& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }

    switch (_lhs.Which()) {
      case ::test::name::embedded::OlderSimpleUnion::Tag::kI:
        return ::fidl::Equals(_lhs.i_, _rhs.i_);
      case ::test::name::embedded::OlderSimpleUnion::Tag::kF:
        return ::fidl::Equals(_lhs.f_, _rhs.f_);
      case ::test::name::embedded::OlderSimpleUnion::Tag::Empty:
        return true;
      default:
        return false;
    }
    }
};
template <>
struct CodingTraits<::test::name::embedded::NewerSimpleUnion>
    : public EncodableCodingTraits<::test::name::embedded::NewerSimpleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::embedded::NewerSimpleUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(::overnet::internal::Encoder* encoder, std::unique_ptr<::test::name::embedded::NewerSimpleUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    } else {
      ::test::name::embedded::NewerSimpleUnion empty;
      empty.Encode(encoder, offset);
    }
  }

  static void Decode(::overnet::internal::Decoder* decoder, std::unique_ptr<::test::name::embedded::NewerSimpleUnion>* value, size_t offset) {
    value->reset(new ::test::name::embedded::NewerSimpleUnion);

    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      return;
    }

    ::test::name::embedded::NewerSimpleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::embedded::NewerSimpleUnion& value,
                         ::test::name::embedded::NewerSimpleUnion* result) {
  return ::test::name::embedded::Clone(value, result);
}

template <>
struct ToEmbeddedTraits<::test::name::NewerSimpleUnion> {
  static ::test::name::embedded::NewerSimpleUnion Lift(const ::test::name::NewerSimpleUnion& _value) {
    ::test::name::embedded::NewerSimpleUnion _out;
    switch (_value.Which()) {
      case ::test::name::NewerSimpleUnion::Tag::kI:
        _out.set_i(ToEmbedded(_value.i()));
        break;
      case ::test::name::NewerSimpleUnion::Tag::kS:
        _out.set_s(ToEmbedded(_value.s()));
        break;
      case ::test::name::NewerSimpleUnion::Tag::kV:
        _out.set_v(ToEmbedded(_value.v()));
        break;
      case ::test::name::NewerSimpleUnion::Tag::Empty:
        break;
    }
    return _out;
  }
};

template<>
struct Equality<::test::name::embedded::NewerSimpleUnion> {
  static inline bool Equals(const ::test::name::embedded::NewerSimpleUnion& _lhs, const ::test::name::embedded::NewerSimpleUnion& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }

    switch (_lhs.Which()) {
      case ::test::name::embedded::NewerSimpleUnion::Tag::kI:
        return ::fidl::Equals(_lhs.i_, _rhs.i_);
      case ::test::name::embedded::NewerSimpleUnion::Tag::kS:
        return ::fidl::Equals(_lhs.s_, _rhs.s_);
      case ::test::name::embedded::NewerSimpleUnion::Tag::kV:
        return ::fidl::Equals(_lhs.v_, _rhs.v_);
      case ::test::name::embedded::NewerSimpleUnion::Tag::Empty:
        return true;
      default:
        return false;
    }
    }
};}  // namespace fidl
