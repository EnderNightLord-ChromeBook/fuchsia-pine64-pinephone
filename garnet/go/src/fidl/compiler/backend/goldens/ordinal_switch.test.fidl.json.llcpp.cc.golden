// WARNING: This file is machine generated by fidlgen.

#include <ordinal_switch.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint64_t kSwitchingOrdinals_OrdinalFive_GenOrdinal = 0x7784636700000000lu;
[[maybe_unused]]
constexpr uint64_t kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal = 0x27c9581f00000000lu;
[[maybe_unused]]
constexpr uint64_t kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal = 0x577495a100000000lu;
[[maybe_unused]]
constexpr uint64_t kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal = 0x7fec464e00000000lu;

}  // namespace

SwitchingOrdinals::ResultOf::OrdinalFive_Impl::OrdinalFive_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OrdinalFiveRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, OrdinalFiveRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OrdinalFiveRequest));
  ::fidl::DecodedMessage<OrdinalFiveRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      SwitchingOrdinals::InPlace::OrdinalFive(std::move(_client_end)));
}

SwitchingOrdinals::ResultOf::OrdinalFive SwitchingOrdinals::SyncClient::OrdinalFive() {
  return ResultOf::OrdinalFive(zx::unowned_channel(this->channel_));
}

SwitchingOrdinals::ResultOf::OrdinalFive SwitchingOrdinals::Call::OrdinalFive(zx::unowned_channel _client_end) {
  return ResultOf::OrdinalFive(std::move(_client_end));
}

zx_status_t SwitchingOrdinals::SyncClient::OrdinalFive_Deprecated() {
  return SwitchingOrdinals::Call::OrdinalFive_Deprecated(zx::unowned_channel(this->channel_));
}

zx_status_t SwitchingOrdinals::Call::OrdinalFive_Deprecated(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OrdinalFiveRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OrdinalFiveRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OrdinalFive_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OrdinalFiveRequest));
  ::fidl::DecodedMessage<OrdinalFiveRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError SwitchingOrdinals::InPlace::OrdinalFive(zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(OrdinalFiveRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<OrdinalFiveRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSwitchingOrdinals_OrdinalFive_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


SwitchingOrdinals::ResultOf::OnlyGeneratedOrdinal_Impl::OnlyGeneratedOrdinal_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnlyGeneratedOrdinalRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, OnlyGeneratedOrdinalRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OnlyGeneratedOrdinalRequest));
  ::fidl::DecodedMessage<OnlyGeneratedOrdinalRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      SwitchingOrdinals::InPlace::OnlyGeneratedOrdinal(std::move(_client_end)));
}

SwitchingOrdinals::ResultOf::OnlyGeneratedOrdinal SwitchingOrdinals::SyncClient::OnlyGeneratedOrdinal() {
  return ResultOf::OnlyGeneratedOrdinal(zx::unowned_channel(this->channel_));
}

SwitchingOrdinals::ResultOf::OnlyGeneratedOrdinal SwitchingOrdinals::Call::OnlyGeneratedOrdinal(zx::unowned_channel _client_end) {
  return ResultOf::OnlyGeneratedOrdinal(std::move(_client_end));
}

zx_status_t SwitchingOrdinals::SyncClient::OnlyGeneratedOrdinal_Deprecated() {
  return SwitchingOrdinals::Call::OnlyGeneratedOrdinal_Deprecated(zx::unowned_channel(this->channel_));
}

zx_status_t SwitchingOrdinals::Call::OnlyGeneratedOrdinal_Deprecated(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnlyGeneratedOrdinalRequest, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OnlyGeneratedOrdinalRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OnlyGeneratedOrdinalRequest));
  ::fidl::DecodedMessage<OnlyGeneratedOrdinalRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError SwitchingOrdinals::InPlace::OnlyGeneratedOrdinal(zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(OnlyGeneratedOrdinalRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<OnlyGeneratedOrdinalRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

zx_status_t SwitchingOrdinals::SyncClient::HandleEvents(SwitchingOrdinals::EventHandlers handlers) {
  return SwitchingOrdinals::Call::HandleEvents(zx::unowned_channel(channel_), std::move(handlers));
}

zx_status_t SwitchingOrdinals::Call::HandleEvents(zx::unowned_channel client_end,
                                            SwitchingOrdinals::EventHandlers handlers) {
  zx_status_t status = client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                                            zx::time::infinite(),
                                            nullptr);
  if (status != ZX_OK) {
    return status;
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<EventOrdinalFifteenResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<EventOrdinalFifteenResponse, ::fidl::MessageDirection::kReceiving>();
    }
    if (::fidl::internal::ClampedMessageSize<EventOnlyGeneratedOrdinalResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<EventOnlyGeneratedOrdinalResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (EventOrdinalFifteenResponse::MaxNumHandles >= x) {
      x = EventOrdinalFifteenResponse::MaxNumHandles;
    }
    if (EventOnlyGeneratedOrdinalResponse::MaxNumHandles >= x) {
      x = EventOnlyGeneratedOrdinalResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  FIDL_ALIGNDECL uint8_t read_bytes[kReadAllocSize];
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD,
                            read_bytes, read_handles,
                            kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new event,
    // whose size exceeds the maximum of known events in the current protocol.
    return handlers.unknown();
  }
  if (status != ZX_OK) {
    return status;
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ZX_ERR_INVALID_ARGS;
  }
  auto msg = fidl_msg_t {
    .bytes = read_bytes,
    .handles = read_handles,
    .num_bytes = actual_bytes,
    .num_handles = actual_handles
  };
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg.bytes);
  switch (hdr->ordinal) {
    case kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<EventOrdinalFifteenResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      return handlers.event_ordinal_fifteen();
    }
    case kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<EventOnlyGeneratedOrdinalResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      return handlers.event_only_generated_ordinal();
    }
    default:
      zx_handle_close_many(read_handles, actual_handles);
      return handlers.unknown();
  }
}

bool SwitchingOrdinals::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kSwitchingOrdinals_OrdinalFive_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<OrdinalFiveRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->OrdinalFive(
        Interface::OrdinalFiveCompleter::Sync(txn));
      return true;
    }
    case kSwitchingOrdinals_OnlyGeneratedOrdinal_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<OnlyGeneratedOrdinalRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->OnlyGeneratedOrdinal(
        Interface::OnlyGeneratedOrdinalCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool SwitchingOrdinals::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t SwitchingOrdinals::SendEventOrdinalFifteenEvent(::zx::unowned_channel _chan) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventOrdinalFifteenResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventOrdinalFifteenResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kSwitchingOrdinals_EventOrdinalFifteen_GenOrdinal;
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventOrdinalFifteenResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventOrdinalFifteenResponse>(std::move(_response_bytes)));
}


zx_status_t SwitchingOrdinals::SendEventOnlyGeneratedOrdinalEvent(::zx::unowned_channel _chan) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventOnlyGeneratedOrdinalResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventOnlyGeneratedOrdinalResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kSwitchingOrdinals_EventOnlyGeneratedOrdinal_GenOrdinal;
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventOnlyGeneratedOrdinalResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventOnlyGeneratedOrdinalResponse>(std::move(_response_bytes)));
}


}  // namespace name
}  // namespace test
}  // namespace llcpp
