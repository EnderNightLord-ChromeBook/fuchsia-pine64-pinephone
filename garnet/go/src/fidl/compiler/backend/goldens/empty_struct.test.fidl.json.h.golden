// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Empty;

class Empty final {
 public:
  static const fidl_type_t* FidlType;
  
  uint8_t __reserved = 0u;

  static inline ::std::unique_ptr<Empty> New() { return ::std::make_unique<Empty>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Empty* value, size_t _offset);
  zx_status_t Clone(Empty* result) const;
};

inline zx_status_t Clone(const ::test::name::Empty& _value,
                         ::test::name::Empty* _result) {
  return _value.Clone(_result);
}

using EmptyPtr = ::std::unique_ptr<Empty>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::Empty>
    : public EncodableCodingTraits<::test::name::Empty, 1> {};

inline zx_status_t Clone(const ::test::name::Empty& value,
                         ::test::name::Empty* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Empty> {
  static inline bool Equals(const ::test::name::Empty& _lhs, const ::test::name::Empty& _rhs) {
    if (!::fidl::Equals(_lhs.__reserved, _rhs.__reserved)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
