// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)



const (
	// const comment #1
	//
	// const comment #3
	C int32 = 4
)



// struct comment #1
//
// struct comment #3
type Struct struct {
	_ struct{} `fidl2:"s,4,4"`
	// struct member comment #1
	//
	// struct member comment #3
	Field int32
}

var _mStruct = _bindings.CreateLazyMarshaler(Struct{})

func (msg *Struct) Marshaler() _bindings.Marshaler {
	return _mStruct
}
type UnionTag uint32
const (
	_ UnionTag = iota
	UnionField
)


// union comment #1
//
// union comment #3
type Union struct {
	UnionTag `fidl:"tag" fidl2:"u,8,4"`
	// union member comment #1
	//
	// union member comment #3
	Field int32 
}

func (u *Union) Which() UnionTag {
	return u.UnionTag
}

func (u *Union) SetField(field int32) {
	u.UnionTag = UnionField
	u.Field = field
}

// table comment #1
//
// table comment #3
type Table struct {
	_ struct{} `fidl2:"t,16,8"`
	// table field comment #1
	//
	// table field comment #3
	Field int32 `fidl:"1" fidl2:"1"`
	FieldPresent bool
}

func (u *Table) SetField(field int32) {
	u.Field = field
	u.FieldPresent = true
}

func (u *Table) GetField() int32 {
	return u.Field
}

func (u *Table) GetFieldWithDefault(_default int32) int32 {
	if !u.HasField() {
		return _default
	}
	return u.Field
}

func (u *Table) HasField() bool {
	return u.FieldPresent
}

func (u *Table) ClearField() {
	u.FieldPresent = false
}
const (
	InterfaceMethodOrdinal uint64 = 1061382220 << 32
	InterfaceMethodGenOrdinal uint64 = 1061382220 << 32
	InterfaceOnEventOrdinal uint64 = 325918733 << 32
	InterfaceOnEventGenOrdinal uint64 = 325918733 << 32
)

type InterfaceInterface _bindings.ChannelProxy


// method comment #1
//
// method comment #3
func (p *InterfaceInterface) Method() error {
	var req_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Send(InterfaceMethodOrdinal, req_)
	return err
}

// event comment #1
//
// event comment #3
func (p *InterfaceInterface) ExpectOnEvent() error {
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Recv(InterfaceOnEventOrdinal, resp_)
	return err
}


// interface comment #1
//
// interface comment #3
type Interface interface {
	// method comment #1
	//
	// method comment #3
	Method() error
	// event comment #1
	//
	// event comment #3
}

type InterfaceTransitionalBase struct {}


type InterfaceInterfaceRequest _bindings.InterfaceRequest

func NewInterfaceInterfaceRequest() (InterfaceInterfaceRequest, *InterfaceInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return InterfaceInterfaceRequest(req), (*InterfaceInterface)(cli), err
}

type InterfaceStub struct {
	Impl Interface
}

func (s_ *InterfaceStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case InterfaceMethodOrdinal:
		err_ := s_.Impl.Method()
		return nil, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type InterfaceService struct {
	_bindings.BindingSet
}

func (s *InterfaceService) Add(impl Interface, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&InterfaceStub{Impl: impl}, c, onError)
}

func (s *InterfaceService) EventProxyFor(key _bindings.BindingKey) (*InterfaceEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*InterfaceEventProxy)(pxy), err
}

type InterfaceEventProxy _bindings.ChannelProxy

func (p *InterfaceEventProxy) OnEvent() error {
	var event_ _bindings.Message
	return ((*_bindings.ChannelProxy)(p)).Send(InterfaceOnEventOrdinal, event_)
}


