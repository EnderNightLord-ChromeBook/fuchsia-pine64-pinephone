// WARNING: This file is machine generated by fidlgen.

#pragma once


namespace test {
namespace name {
namespace testing {

class KitchenSink_TestBase : public KitchenSink {
  public:
  virtual ~KitchenSink_TestBase() { }
  virtual void NotImplemented_(const std::string& name) = 0;
  void MethodA(int64_t a, int64_t b) override {
    NotImplemented_("MethodA");
  }
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override {
    NotImplemented_("MethodB");
  }
  void MutateSocket(::zx::socket a, MutateSocketCallback callback) override {
    NotImplemented_("MutateSocket");
  }

};

class ChannelProtocol_TestBase : public ChannelProtocol {
  public:
  virtual ~ChannelProtocol_TestBase() { }
  virtual void NotImplemented_(const std::string& name) = 0;
  void MethodA(int64_t a, int64_t b) override {
    NotImplemented_("MethodA");
  }
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override {
    NotImplemented_("MethodB");
  }
  void MutateSocket(::zx::socket a, MutateSocketCallback callback) override {
    NotImplemented_("MutateSocket");
  }

};

class OvernetInternalProtocol_TestBase : public OvernetInternalProtocol {
  public:
  virtual ~OvernetInternalProtocol_TestBase() { }
  virtual void NotImplemented_(const std::string& name) = 0;
  void MethodA(int64_t a, int64_t b) override {
    NotImplemented_("MethodA");
  }
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override {
    NotImplemented_("MethodB");
  }
  void MutateSocket(::zx::socket a, MutateSocketCallback callback) override {
    NotImplemented_("MutateSocket");
  }

};

class WithAndWithoutRequestResponse_TestBase : public WithAndWithoutRequestResponse {
  public:
  virtual ~WithAndWithoutRequestResponse_TestBase() { }
  virtual void NotImplemented_(const std::string& name) = 0;
  void NoRequestNoResponse() override {
    NotImplemented_("NoRequestNoResponse");
  }
  void NoRequestEmptyResponse(NoRequestEmptyResponseCallback callback) override {
    NotImplemented_("NoRequestEmptyResponse");
  }
  void NoRequestWithResponse(NoRequestWithResponseCallback callback) override {
    NotImplemented_("NoRequestWithResponse");
  }
  void WithRequestNoResponse(::std::string arg) override {
    NotImplemented_("WithRequestNoResponse");
  }
  void WithRequestEmptyResponse(::std::string arg, WithRequestEmptyResponseCallback callback) override {
    NotImplemented_("WithRequestEmptyResponse");
  }
  void WithRequestWithResponse(::std::string arg, WithRequestWithResponseCallback callback) override {
    NotImplemented_("WithRequestWithResponse");
  }

};

class WithErrorSyntax_TestBase : public WithErrorSyntax {
  public:
  virtual ~WithErrorSyntax_TestBase() { }
  virtual void NotImplemented_(const std::string& name) = 0;
  void ErrorAsPrimitive(ErrorAsPrimitiveCallback callback) override {
    NotImplemented_("ErrorAsPrimitive");
  }
  void ErrorAsEnum(ErrorAsEnumCallback callback) override {
    NotImplemented_("ErrorAsEnum");
  }

};
}  // namespace testing
}  // namespace name
}  // namespace test
