// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class StrictSimpleXUnion;
class StrictBoundedXUnion;
class OlderSimpleUnion;
#ifdef __Fuchsia__
class TestProtocol;
using TestProtocolPtr = ::fidl::InterfacePtr<TestProtocol>;
class TestProtocol_Proxy;
class TestProtocol_Stub;
class TestProtocol_EventSender;
class TestProtocol_Sync;
using TestProtocolSyncPtr = ::fidl::SynchronousInterfacePtr<TestProtocol>;
class TestProtocol_SyncProxy;
namespace internal {
constexpr uint64_t kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal = 0x71a1b4b700000000lu;
constexpr uint64_t kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal = 0x3959ff0900000000lu;

}  // namespace
#endif // __Fuchsia__
class NewerSimpleUnion;

class StrictSimpleXUnion final {
 public:
 static const fidl_type_t* FidlType;

  StrictSimpleXUnion();
  ~StrictSimpleXUnion();

  StrictSimpleXUnion(StrictSimpleXUnion&&);
  StrictSimpleXUnion& operator=(StrictSimpleXUnion&&);

  enum : fidl_xunion_tag_t {
    kEmpty = kFidlXUnionEmptyTag,
  };

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kI = 1851697276,  // 0x6e5ea87c
    kF = 855207063,  // 0x32f96c97
    kS = 850602487,  // 0x32b329f7
  };

  static inline ::std::unique_ptr<StrictSimpleXUnion> New() { return ::std::make_unique<StrictSimpleXUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, StrictSimpleXUnion* value, size_t offset);
  zx_status_t Clone(StrictSimpleXUnion* result) const;

  bool is_i() const { return tag_ == Tag::kI; }
  
  int32_t& i() {
    EnsureStorageInitialized(Tag::kI);
    return i_;
  }
  
  const int32_t& i() const { return i_; }
  StrictSimpleXUnion& set_i(int32_t value);

  bool is_f() const { return tag_ == Tag::kF; }
  
  float& f() {
    EnsureStorageInitialized(Tag::kF);
    return f_;
  }
  
  const float& f() const { return f_; }
  StrictSimpleXUnion& set_f(float value);

  bool is_s() const { return tag_ == Tag::kS; }
  
  ::std::string& s() {
    EnsureStorageInitialized(Tag::kS);
    return s_;
  }
  
  const ::std::string& s() const { return s_; }
  StrictSimpleXUnion& set_s(::std::string value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::StrictSimpleXUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = kEmpty;
  union {
    int32_t i_;
    float f_;
    ::std::string s_;
  };
};

inline zx_status_t Clone(const ::test::name::StrictSimpleXUnion& value,
                         ::test::name::StrictSimpleXUnion* result) {
  return value.Clone(result);
}

using StrictSimpleXUnionPtr = ::std::unique_ptr<StrictSimpleXUnion>;

class StrictBoundedXUnion final {
 public:
 static const fidl_type_t* FidlType;

  StrictBoundedXUnion();
  ~StrictBoundedXUnion();

  StrictBoundedXUnion(StrictBoundedXUnion&&);
  StrictBoundedXUnion& operator=(StrictBoundedXUnion&&);

  enum : fidl_xunion_tag_t {
    kEmpty = kFidlXUnionEmptyTag,
  };

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kV = 2024555624,  // 0x78ac4468
  };

  static inline ::std::unique_ptr<StrictBoundedXUnion> New() { return ::std::make_unique<StrictBoundedXUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, StrictBoundedXUnion* value, size_t offset);
  zx_status_t Clone(StrictBoundedXUnion* result) const;

  bool is_v() const { return tag_ == Tag::kV; }
  
  ::std::vector<uint8_t>& v() {
    EnsureStorageInitialized(Tag::kV);
    return v_;
  }
  
  const ::std::vector<uint8_t>& v() const { return v_; }
  StrictBoundedXUnion& set_v(::std::vector<uint8_t> value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::StrictBoundedXUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = kEmpty;
  union {
    ::std::vector<uint8_t> v_;
  };
};

inline zx_status_t Clone(const ::test::name::StrictBoundedXUnion& value,
                         ::test::name::StrictBoundedXUnion* result) {
  return value.Clone(result);
}

using StrictBoundedXUnionPtr = ::std::unique_ptr<StrictBoundedXUnion>;

class OlderSimpleUnion final {
 public:
 static const fidl_type_t* FidlType;

  OlderSimpleUnion();
  ~OlderSimpleUnion();

  OlderSimpleUnion(OlderSimpleUnion&&);
  OlderSimpleUnion& operator=(OlderSimpleUnion&&);

  enum : fidl_xunion_tag_t {
    kEmpty = kFidlXUnionEmptyTag,
  };

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  kUnknown = 0,
    Empty = kUnknown,  // DEPRECATED: use kUnknown instead.
  
    kI = 1026732503,  // 0x3d32b1d7
    kF = 1362546558,  // 0x5136cf7e
  };

  static inline ::std::unique_ptr<OlderSimpleUnion> New() { return ::std::make_unique<OlderSimpleUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, OlderSimpleUnion* value, size_t offset);
  zx_status_t Clone(OlderSimpleUnion* result) const;

  bool is_i() const { return tag_ == Tag::kI; }
  
  int64_t& i() {
    EnsureStorageInitialized(Tag::kI);
    return i_;
  }
  
  const int64_t& i() const { return i_; }
  OlderSimpleUnion& set_i(int64_t value);

  bool is_f() const { return tag_ == Tag::kF; }
  
  float& f() {
    EnsureStorageInitialized(Tag::kF);
    return f_;
  }
  
  const float& f() const { return f_; }
  OlderSimpleUnion& set_f(float value);

  Tag Which() const {
    
    switch (tag_) {
      case Tag::kI:
      case Tag::kF:
        return Tag(tag_);
      default:
        return Tag::kUnknown;
    }
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    if (Which() != Tag::kUnknown) {
      return nullptr;
    }

    return &unknown_data_;
  }

  friend ::fidl::Equality<::test::name::OlderSimpleUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = kEmpty;
  union {
    int64_t i_;
    float f_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::name::OlderSimpleUnion& value,
                         ::test::name::OlderSimpleUnion* result) {
  return value.Clone(result);
}

using OlderSimpleUnionPtr = ::std::unique_ptr<OlderSimpleUnion>;
#ifdef __Fuchsia__

class TestProtocol {
 public:
  using Proxy_ = TestProtocol_Proxy;
  using Stub_ = TestProtocol_Stub;
  using EventSender_ = TestProtocol_EventSender;
  using Sync_ = TestProtocol_Sync;
  virtual ~TestProtocol();
  using StrictXUnionHenceResponseMayBeStackAllocatedCallback =
      fit::function<void(StrictBoundedXUnion)>;
      
  virtual void StrictXUnionHenceResponseMayBeStackAllocated(StrictXUnionHenceResponseMayBeStackAllocatedCallback callback) = 0;
  using FlexibleXUnionHenceResponseMustBeHeapAllocatedCallback =
      fit::function<void(OlderSimpleUnion)>;
      
  virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated(FlexibleXUnionHenceResponseMustBeHeapAllocatedCallback callback) = 0;
};

class TestProtocol_RequestEncoder {
 public:
  static ::fidl::Message StrictXUnionHenceResponseMayBeStackAllocated(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
  static ::fidl::Message FlexibleXUnionHenceResponseMustBeHeapAllocated(::fidl::Encoder* _encoder) {
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));
    return _encoder->GetMessage();
  }
};

class TestProtocol_RequestDecoder {
 public:
  TestProtocol_RequestDecoder() = default;
  virtual ~TestProtocol_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  zx_status_t Decode_(::fidl::Message request) {
    bool needs_response;
    const fidl_type_t* request_type = GetType(request.ordinal(), &needs_response);
    if (request_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = request.Decode(request_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(request, request_type, error_msg);
      return status;
    }
    ::fidl::Decoder request_decoder(std::move(request));
    switch (request.ordinal()) {
      case internal::kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal:
      {
        StrictXUnionHenceResponseMayBeStackAllocated();
        break;
      }
      case internal::kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal:
      {
        FlexibleXUnionHenceResponseMustBeHeapAllocated();
        break;
      }
      default: {
        status = ZX_ERR_NOT_SUPPORTED;
        break;
      }
    }
    return status;
  }
  virtual void StrictXUnionHenceResponseMayBeStackAllocated() = 0;
  virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated() = 0;
};

class TestProtocol_ResponseEncoder {
 public:
  static ::fidl::Message StrictXUnionHenceResponseMayBeStackAllocated(::fidl::Encoder* _encoder, StrictBoundedXUnion* xu) {
    _encoder->Alloc(40 - sizeof(fidl_message_header_t));
    ::fidl::Encode(_encoder, xu, 16);
    return _encoder->GetMessage();
  }
  static ::fidl::Message FlexibleXUnionHenceResponseMustBeHeapAllocated(::fidl::Encoder* _encoder, OlderSimpleUnion* xu) {
    _encoder->Alloc(40 - sizeof(fidl_message_header_t));
    ::fidl::Encode(_encoder, xu, 16);
    return _encoder->GetMessage();
  }
};

class TestProtocol_ResponseDecoder {
 public:
  TestProtocol_ResponseDecoder() = default;
  virtual ~TestProtocol_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  zx_status_t Decode_(::fidl::Message response) {
    const fidl_type_t* response_type = GetType(response.ordinal());
    if (response_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = response.Decode(response_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(response, response_type, error_msg);
      return status;
    }
    ::fidl::Decoder response_decoder(std::move(response));
    switch (response.ordinal()) {
      case internal::kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_GenOrdinal:
      {
        auto arg0 = ::fidl::DecodeAs<StrictBoundedXUnion>(&response_decoder, 16);
        StrictXUnionHenceResponseMayBeStackAllocated(std::move(arg0));
        break;
      }
      case internal::kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_GenOrdinal:
      {
        auto arg0 = ::fidl::DecodeAs<OlderSimpleUnion>(&response_decoder, 16);
        FlexibleXUnionHenceResponseMustBeHeapAllocated(std::move(arg0));
        break;
      }
      default: {
        break;
      }
    }
    return ZX_OK;
  }
  virtual void StrictXUnionHenceResponseMayBeStackAllocated(StrictBoundedXUnion xu) = 0;
  virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated(OlderSimpleUnion xu) = 0;
};

class TestProtocol_EventSender {
 public:
  virtual ~TestProtocol_EventSender();
};

class TestProtocol_Sync {
 public:
  using Proxy_ = TestProtocol_SyncProxy;
  virtual ~TestProtocol_Sync();
  virtual zx_status_t StrictXUnionHenceResponseMayBeStackAllocated(StrictBoundedXUnion* out_xu) = 0;
  virtual zx_status_t FlexibleXUnionHenceResponseMustBeHeapAllocated(OlderSimpleUnion* out_xu) = 0;
};

class TestProtocol_Proxy final : public ::fidl::internal::Proxy, public TestProtocol {
 public:
  explicit TestProtocol_Proxy(::fidl::internal::ProxyController* controller);
  ~TestProtocol_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void StrictXUnionHenceResponseMayBeStackAllocated(StrictXUnionHenceResponseMayBeStackAllocatedCallback callback) override;
  void FlexibleXUnionHenceResponseMustBeHeapAllocated(FlexibleXUnionHenceResponseMustBeHeapAllocatedCallback callback) override;

 private:
  TestProtocol_Proxy(const TestProtocol_Proxy&) = delete;
  TestProtocol_Proxy& operator=(const TestProtocol_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class TestProtocol_Stub final : public ::fidl::internal::Stub, public TestProtocol_EventSender {
 public:
  typedef class ::test::name::TestProtocol TestProtocol_clazz;
  explicit TestProtocol_Stub(TestProtocol_clazz* impl);
  ~TestProtocol_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  TestProtocol_clazz* impl_;
};

class TestProtocol_SyncProxy : public TestProtocol_Sync {
 public:
  explicit TestProtocol_SyncProxy(::zx::channel channel);
  ~TestProtocol_SyncProxy() override;
  zx_status_t StrictXUnionHenceResponseMayBeStackAllocated(StrictBoundedXUnion* out_xu) override;
  zx_status_t FlexibleXUnionHenceResponseMustBeHeapAllocated(OlderSimpleUnion* out_xu) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<TestProtocol>;
};
#endif // __Fuchsia__

class NewerSimpleUnion final {
 public:
 static const fidl_type_t* FidlType;

  NewerSimpleUnion();
  ~NewerSimpleUnion();

  NewerSimpleUnion(NewerSimpleUnion&&);
  NewerSimpleUnion& operator=(NewerSimpleUnion&&);

  enum : fidl_xunion_tag_t {
    kEmpty = kFidlXUnionEmptyTag,
  };

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  kUnknown = 0,
    Empty = kUnknown,  // DEPRECATED: use kUnknown instead.
  
    kI = 693944286,  // 0x295cbfde
    kS = 473666119,  // 0x1c3b9247
    kV = 1815655055,  // 0x6c38b28f
  };

  static inline ::std::unique_ptr<NewerSimpleUnion> New() { return ::std::make_unique<NewerSimpleUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, NewerSimpleUnion* value, size_t offset);
  zx_status_t Clone(NewerSimpleUnion* result) const;

  bool is_i() const { return tag_ == Tag::kI; }
  
  int64_t& i() {
    EnsureStorageInitialized(Tag::kI);
    return i_;
  }
  
  const int64_t& i() const { return i_; }
  NewerSimpleUnion& set_i(int64_t value);

  bool is_s() const { return tag_ == Tag::kS; }
  
  ::std::string& s() {
    EnsureStorageInitialized(Tag::kS);
    return s_;
  }
  
  const ::std::string& s() const { return s_; }
  NewerSimpleUnion& set_s(::std::string value);

  bool is_v() const { return tag_ == Tag::kV; }
  
  ::std::vector<::std::string>& v() {
    EnsureStorageInitialized(Tag::kV);
    return v_;
  }
  
  const ::std::vector<::std::string>& v() const { return v_; }
  NewerSimpleUnion& set_v(::std::vector<::std::string> value);

  Tag Which() const {
    
    switch (tag_) {
      case Tag::kI:
      case Tag::kS:
      case Tag::kV:
        return Tag(tag_);
      default:
        return Tag::kUnknown;
    }
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    if (Which() != Tag::kUnknown) {
      return nullptr;
    }

    return &unknown_data_;
  }

  friend ::fidl::Equality<::test::name::NewerSimpleUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = kEmpty;
  union {
    int64_t i_;
    ::std::string s_;
    ::std::vector<::std::string> v_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::name::NewerSimpleUnion& value,
                         ::test::name::NewerSimpleUnion* result) {
  return value.Clone(result);
}

using NewerSimpleUnionPtr = ::std::unique_ptr<NewerSimpleUnion>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::StrictSimpleXUnion>
    : public EncodableCodingTraits<::test::name::StrictSimpleXUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::StrictSimpleXUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::StrictSimpleXUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::StrictSimpleXUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::StrictSimpleXUnion);

    ::test::name::StrictSimpleXUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::StrictSimpleXUnion& value,
                         ::test::name::StrictSimpleXUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::StrictSimpleXUnion> {
  static inline bool Equals(const ::test::name::StrictSimpleXUnion& _lhs, const ::test::name::StrictSimpleXUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case ::test::name::StrictSimpleXUnion::kEmpty:
        return true;
      case ::test::name::StrictSimpleXUnion::Tag::kI:
        return ::fidl::Equals(_lhs.i_, _rhs.i_);
      case ::test::name::StrictSimpleXUnion::Tag::kF:
        return ::fidl::Equals(_lhs.f_, _rhs.f_);
      case ::test::name::StrictSimpleXUnion::Tag::kS:
        return ::fidl::Equals(_lhs.s_, _rhs.s_);
      
      default:
        return false;
      }
    }
};
template <>
struct CodingTraits<::test::name::StrictBoundedXUnion>
    : public EncodableCodingTraits<::test::name::StrictBoundedXUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::StrictBoundedXUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::StrictBoundedXUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::StrictBoundedXUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::StrictBoundedXUnion);

    ::test::name::StrictBoundedXUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::StrictBoundedXUnion& value,
                         ::test::name::StrictBoundedXUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::StrictBoundedXUnion> {
  static inline bool Equals(const ::test::name::StrictBoundedXUnion& _lhs, const ::test::name::StrictBoundedXUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case ::test::name::StrictBoundedXUnion::kEmpty:
        return true;
      case ::test::name::StrictBoundedXUnion::Tag::kV:
        return ::fidl::Equals(_lhs.v_, _rhs.v_);
      
      default:
        return false;
      }
    }
};
template <>
struct CodingTraits<::test::name::OlderSimpleUnion>
    : public EncodableCodingTraits<::test::name::OlderSimpleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::OlderSimpleUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::OlderSimpleUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::OlderSimpleUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::OlderSimpleUnion);

    ::test::name::OlderSimpleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::OlderSimpleUnion& value,
                         ::test::name::OlderSimpleUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::OlderSimpleUnion> {
  static inline bool Equals(const ::test::name::OlderSimpleUnion& _lhs, const ::test::name::OlderSimpleUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case ::test::name::OlderSimpleUnion::kEmpty:
        return true;
      case ::test::name::OlderSimpleUnion::Tag::kI:
        return ::fidl::Equals(_lhs.i_, _rhs.i_);
      case ::test::name::OlderSimpleUnion::Tag::kF:
        return ::fidl::Equals(_lhs.f_, _rhs.f_);
      default:
        return *_lhs.UnknownData() == *_rhs.UnknownData();
      }
    }
};
template <>
struct CodingTraits<::test::name::NewerSimpleUnion>
    : public EncodableCodingTraits<::test::name::NewerSimpleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::NewerSimpleUnion>> {
  static constexpr size_t encoded_size = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::NewerSimpleUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::NewerSimpleUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::NewerSimpleUnion);

    ::test::name::NewerSimpleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::NewerSimpleUnion& value,
                         ::test::name::NewerSimpleUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::NewerSimpleUnion> {
  static inline bool Equals(const ::test::name::NewerSimpleUnion& _lhs, const ::test::name::NewerSimpleUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case ::test::name::NewerSimpleUnion::kEmpty:
        return true;
      case ::test::name::NewerSimpleUnion::Tag::kI:
        return ::fidl::Equals(_lhs.i_, _rhs.i_);
      case ::test::name::NewerSimpleUnion::Tag::kS:
        return ::fidl::Equals(_lhs.s_, _rhs.s_);
      case ::test::name::NewerSimpleUnion::Tag::kV:
        return ::fidl::Equals(_lhs.v_, _rhs.v_);
      default:
        return *_lhs.UnknownData() == *_rhs.UnknownData();
      }
    }
};}  // namespace fidl
