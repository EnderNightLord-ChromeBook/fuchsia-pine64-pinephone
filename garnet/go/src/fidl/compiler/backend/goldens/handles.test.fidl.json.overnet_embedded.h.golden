// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "src/connectivity/overnet/deprecated/lib/embedded/header.h"

#include <test/name/cpp/fidl.h>

namespace test {
namespace name {
namespace embedded {

class Handles;

class Handles  {
 public:
  static const fidl_type_t* FidlType;
  
  ::overnet::ClosedPtr<::overnet::ZxHandle> plain_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxBti> bti_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxChannel> channel_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxDebuglog> debuglog_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxEvent> event_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxEventpair> eventpair_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxException> exception_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxFifo> fifo_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxGuest> guest_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxInterrupt> interrupt_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxIommu> iommu_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxJob> job_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxPager> pager_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxPcidevice> pcidevice_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxPmt> pmt_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxPort> port_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxProcess> process_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxProfile> profile_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxResource> resource_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxSocket> socket_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxSuspendtoken> suspendtoken_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxThread> thread_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxTimer> timer_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxVcpu> vcpu_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxVmar> vmar_handle{};
  
  ::overnet::ClosedPtr<::overnet::ZxVmo> vmo_handle{};

  static inline ::std::unique_ptr<Handles> New() { return ::std::make_unique<Handles>(); }

  void Encode(::overnet::internal::Encoder* _encoder, size_t _offset);
  static void Decode(::overnet::internal::Decoder* _decoder, Handles* value, size_t _offset);
  zx_status_t Clone(Handles* result) const;
};

inline zx_status_t Clone(const ::test::name::embedded::Handles& _value,
                         ::test::name::embedded::Handles* _result) {
  return _value.Clone(_result);
}

using HandlesPtr = ::std::unique_ptr<Handles>;

}  // namespace embedded
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::embedded::Handles>
    : public EncodableCodingTraits<::test::name::embedded::Handles, 104> {};

inline zx_status_t Clone(const ::test::name::embedded::Handles& value,
                         ::test::name::embedded::Handles* result) {
  return ::test::name::embedded::Clone(value, result);
}

template <>
struct ToEmbeddedTraits<::test::name::Handles> {
  static ::test::name::embedded::Handles Lift(const ::test::name::Handles& _value) {
    return ::test::name::embedded::Handles {
      ToEmbedded(_value.plain_handle),
      ToEmbedded(_value.bti_handle),
      ToEmbedded(_value.channel_handle),
      ToEmbedded(_value.debuglog_handle),
      ToEmbedded(_value.event_handle),
      ToEmbedded(_value.eventpair_handle),
      ToEmbedded(_value.exception_handle),
      ToEmbedded(_value.fifo_handle),
      ToEmbedded(_value.guest_handle),
      ToEmbedded(_value.interrupt_handle),
      ToEmbedded(_value.iommu_handle),
      ToEmbedded(_value.job_handle),
      ToEmbedded(_value.pager_handle),
      ToEmbedded(_value.pcidevice_handle),
      ToEmbedded(_value.pmt_handle),
      ToEmbedded(_value.port_handle),
      ToEmbedded(_value.process_handle),
      ToEmbedded(_value.profile_handle),
      ToEmbedded(_value.resource_handle),
      ToEmbedded(_value.socket_handle),
      ToEmbedded(_value.suspendtoken_handle),
      ToEmbedded(_value.thread_handle),
      ToEmbedded(_value.timer_handle),
      ToEmbedded(_value.vcpu_handle),
      ToEmbedded(_value.vmar_handle),
      ToEmbedded(_value.vmo_handle),
    };
  }
};

template<>
struct Equality<::test::name::embedded::Handles> {
  static inline bool Equals(const ::test::name::embedded::Handles& _lhs, const ::test::name::embedded::Handles& _rhs) {
    if (!::fidl::Equals(_lhs.plain_handle, _rhs.plain_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.bti_handle, _rhs.bti_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.channel_handle, _rhs.channel_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.debuglog_handle, _rhs.debuglog_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.event_handle, _rhs.event_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.eventpair_handle, _rhs.eventpair_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.exception_handle, _rhs.exception_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.fifo_handle, _rhs.fifo_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.guest_handle, _rhs.guest_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.interrupt_handle, _rhs.interrupt_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.iommu_handle, _rhs.iommu_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.job_handle, _rhs.job_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.pager_handle, _rhs.pager_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.pcidevice_handle, _rhs.pcidevice_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.pmt_handle, _rhs.pmt_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.port_handle, _rhs.port_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.process_handle, _rhs.process_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.profile_handle, _rhs.profile_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.resource_handle, _rhs.resource_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.socket_handle, _rhs.socket_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.suspendtoken_handle, _rhs.suspendtoken_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.thread_handle, _rhs.thread_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.timer_handle, _rhs.timer_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vcpu_handle, _rhs.vcpu_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vmar_handle, _rhs.vmar_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vmo_handle, _rhs.vmo_handle)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
