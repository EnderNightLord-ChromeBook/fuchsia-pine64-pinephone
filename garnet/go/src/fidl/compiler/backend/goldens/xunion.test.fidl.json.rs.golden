// WARNING: This file is machine generated by fidlgen.

#![allow(
	deprecated, // FIDL Impl struct pattern is referenced internally
	unused_parens, // one-element-tuple-case is not a tuple
	unused_mut, // not all args require mutation, but many do
	nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;
#[allow(unused_imports)]
use fidl::{
	fidl_bits,
	fidl_enum,
	fidl_empty_struct,
	fidl_struct,
	fidl_table,
	fidl_union,
	fidl_xunion,
};


fidl_xunion! {
	#[derive(Debug, PartialEq)]
	name: OlderSimpleUnion,
	members: [
		I {
			ty: i64,
			ordinal: 1026732503,
		},
		F {
			ty: f32,
			ordinal: 1362546558,
		},
	],
}

fidl_xunion! {
	#[derive(Debug, PartialEq)]
	name: NewerSimpleUnion,
	members: [
		I {
			ty: i64,
			ordinal: 693944286,
		},
		S {
			ty: String,
			ordinal: 473666119,
		},
		V {
			ty: Vec<String>,
			ordinal: 1815655055,
		},
	],
}

fidl_xunion! {
	#[derive(Debug, PartialEq)]
	name: StrictSimpleXUnion,
	members: [
		I {
			ty: i32,
			ordinal: 1851697276,
		},
		F {
			ty: f32,
			ordinal: 855207063,
		},
		S {
			ty: String,
			ordinal: 850602487,
		},
	],
}

fidl_xunion! {
	#[derive(Debug, PartialEq)]
	name: StrictBoundedXUnion,
	members: [
		V {
			ty: Vec<u8>,
			ordinal: 2024555624,
		},
	],
}


#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct TestProtocolMarker;

impl fidl::endpoints::ServiceMarker for TestProtocolMarker {
	type Proxy = TestProtocolProxy;
	type RequestStream = TestProtocolRequestStream;
	const DEBUG_NAME: &'static str = "(anonymous) TestProtocol";
}

pub trait TestProtocolProxyInterface: Send + Sync {
	type StrictXUnionHenceResponseMayBeStackAllocatedResponseFut: futures::Future<Output = Result<(StrictBoundedXUnion), fidl::Error>> + Send;
	fn strict_x_union_hence_response_may_be_stack_allocated(&self,
	)-> Self::StrictXUnionHenceResponseMayBeStackAllocatedResponseFut;
	type FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseFut: futures::Future<Output = Result<(OlderSimpleUnion), fidl::Error>> + Send;
	fn flexible_x_union_hence_response_must_be_heap_allocated(&self,
	)-> Self::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseFut;
}

#[derive(Debug)]
pub struct TestProtocolSynchronousProxy {
	client: fidl::client::sync::Client,
}

impl TestProtocolSynchronousProxy {
	pub fn new(channel: zx::Channel) -> Self {
		Self { client: fidl::client::sync::Client::new(channel) }
	}

	pub fn into_channel(self) -> zx::Channel {
		self.client.into_channel()
	}
	pub fn strict_x_union_hence_response_may_be_stack_allocated(&mut self,___deadline: zx::Time,) -> Result<(StrictBoundedXUnion), fidl::Error> {self.client.send_query(&mut (),
				0x71a1b4b700000000,
				___deadline,
			)}
	pub fn flexible_x_union_hence_response_must_be_heap_allocated(&mut self,___deadline: zx::Time,) -> Result<(OlderSimpleUnion), fidl::Error> {self.client.send_query(&mut (),
				0x3959ff0900000000,
				___deadline,
			)}
}

#[derive(Debug, Clone)]
pub struct TestProtocolProxy {
	client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for TestProtocolProxy {
	type Service = TestProtocolMarker;
	fn from_channel(inner: ::fuchsia_async::Channel) -> Self {
		Self::new(inner)
	}
}

impl ::std::ops::Deref for TestProtocolProxy {
	type Target = fidl::client::Client;

	fn deref(&self) -> &Self::Target {
		&self.client
	}
}

/// Proxy object for communicating with interface TestProtocol
impl TestProtocolProxy {
	/// Create a new Proxy for TestProtocol
	pub fn new(channel: ::fuchsia_async::Channel) -> Self {
		Self { client: fidl::client::Client::new(channel) }
	}

	/// Attempt to convert the Proxy back into a channel.
	///
	/// This will only succeed if there are no active clones of this Proxy
	/// and no currently-alive EventStream or response futures that came from
	/// this Proxy.
	pub fn into_channel(self) -> Result<::fuchsia_async::Channel, Self> {
		self.client.into_channel().map_err(|client| Self { client })
	}

	/// Get a Stream of events from the remote end of the TestProtocol interface
	pub fn take_event_stream(&self) -> TestProtocolEventStream {
		TestProtocolEventStream {
			event_receiver: self.client.take_event_receiver(),
		}
	}
	pub fn strict_x_union_hence_response_may_be_stack_allocated(&self,
	)-> fidl::client::QueryResponseFut<(StrictBoundedXUnion)> {
		TestProtocolProxyInterface::strict_x_union_hence_response_may_be_stack_allocated(self,
		)
	}
	pub fn flexible_x_union_hence_response_must_be_heap_allocated(&self,
	)-> fidl::client::QueryResponseFut<(OlderSimpleUnion)> {
		TestProtocolProxyInterface::flexible_x_union_hence_response_must_be_heap_allocated(self,
		)
	}
}

impl TestProtocolProxyInterface for TestProtocolProxy {
	type StrictXUnionHenceResponseMayBeStackAllocatedResponseFut = fidl::client::QueryResponseFut<(StrictBoundedXUnion)>;
	fn strict_x_union_hence_response_may_be_stack_allocated(&self,
	)-> Self::StrictXUnionHenceResponseMayBeStackAllocatedResponseFut {
		self.client.send_query(&mut (), 0x71a1b4b700000000)
	}
	type FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseFut = fidl::client::QueryResponseFut<(OlderSimpleUnion)>;
	fn flexible_x_union_hence_response_must_be_heap_allocated(&self,
	)-> Self::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseFut {
		self.client.send_query(&mut (), 0x3959ff0900000000)
	}}

pub struct TestProtocolEventStream {
	event_receiver: fidl::client::EventReceiver,
}

impl ::std::marker::Unpin for TestProtocolEventStream {}

impl futures::stream::FusedStream for TestProtocolEventStream {
	fn is_terminated(&self) -> bool {
		self.event_receiver.is_terminated()
	}
}

impl futures::Stream for TestProtocolEventStream {
	type Item = Result<TestProtocolEvent, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let mut buf = match futures::ready!(
			futures::stream::StreamExt::poll_next_unpin(&mut self.event_receiver, cx)?
		) {
			Some(buf) => buf,
			None => return futures::Poll::Ready(None),
		};
		let (bytes, _handles) = buf.split_mut();
		let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

		#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
		futures::Poll::Ready(Some(match tx_header.ordinal {
			_ => Err(fidl::Error::UnknownOrdinal {
				ordinal: tx_header.ordinal,
				service_name: <TestProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
			})
		}))
	}
}

#[derive(Debug)]
pub enum TestProtocolEvent {
	
	
	}

impl TestProtocolEvent {
}

/// A type which can be used to send events into a borrowed channel.
///
/// Note: this should only be used when the channel must be temporarily
/// borrowed. For a typical sending of events, use the send_ methods
/// on the ControlHandle types, which can be acquired through a
/// RequestStream or Responder type.
pub struct TestProtocolEventSender<'a> {
	// Some protocols don't define events which would render this channel unused.
	#[allow(unused)]
	channel: &'a zx::Channel,
}

impl <'a> TestProtocolEventSender<'a> {
	pub fn new(channel: &'a zx::Channel) -> Self {
		Self { channel }
	}
}

/// A Stream of incoming requests for TestProtocol
pub struct TestProtocolRequestStream {
	inner: ::std::sync::Arc<fidl::ServeInner>,
	is_terminated: bool,
}

impl ::std::marker::Unpin for TestProtocolRequestStream {}

impl futures::stream::FusedStream for TestProtocolRequestStream {
	fn is_terminated(&self) -> bool {
		self.is_terminated
	}
}

impl fidl::endpoints::RequestStream for TestProtocolRequestStream {
	type Service = TestProtocolMarker;

	/// Consume a channel to make a TestProtocolRequestStream
	fn from_channel(channel: ::fuchsia_async::Channel) -> Self {
		Self {
			inner: ::std::sync::Arc::new(fidl::ServeInner::new(channel)),
			is_terminated: false,
		}
	}

	/// ControlHandle for the remote connection
	type ControlHandle = TestProtocolControlHandle;

	/// ControlHandle for the remote connection
	fn control_handle(&self) -> Self::ControlHandle {
		TestProtocolControlHandle { inner: self.inner.clone() }
	}

	fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
		(self.inner, self.is_terminated)
	}

	fn from_inner(inner: ::std::sync::Arc<fidl::ServeInner>, is_terminated: bool)
		-> Self
	{
		Self { inner, is_terminated }
	}
}

impl futures::Stream for TestProtocolRequestStream {
	type Item = Result<TestProtocolRequest, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let this = &mut *self;
		if this.inner.poll_shutdown(cx) {
			this.is_terminated = true;
			return futures::Poll::Ready(None);
		}
		if this.is_terminated {
			panic!("polled TestProtocolRequestStream after completion");
		}
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			match this.inner.channel().read(cx, bytes, handles) {
				futures::Poll::Ready(Ok(())) => {},
				futures::Poll::Pending => return futures::Poll::Pending,
				futures::Poll::Ready(Err(zx::Status::PEER_CLOSED)) => {
					this.is_terminated = true;
					return futures::Poll::Ready(None)
				},
				futures::Poll::Ready(Err(e)) =>
				return futures::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e)))),
			}

			// A message has been received from the channel
			let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

			#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
			futures::Poll::Ready(Some(match header.ordinal {
				0x71a1b4b700000000 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = TestProtocolControlHandle {
						inner: this.inner.clone(),
					};

					Ok(TestProtocolRequest::StrictXUnionHenceResponseMayBeStackAllocated {responder:TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder {
								control_handle: ::std::mem::ManuallyDrop::new(control_handle),
								tx_id: header.tx_id,
								ordinal: header.ordinal,
							},})
				}
				0x3959ff0900000000 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = TestProtocolControlHandle {
						inner: this.inner.clone(),
					};

					Ok(TestProtocolRequest::FlexibleXUnionHenceResponseMustBeHeapAllocated {responder:TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder {
								control_handle: ::std::mem::ManuallyDrop::new(control_handle),
								tx_id: header.tx_id,
								ordinal: header.ordinal,
							},})
				}
				_ => Err(fidl::Error::UnknownOrdinal {
					ordinal: header.ordinal,
					service_name: <TestProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
				}),
			}))
		})
	}
}
#[derive(Debug)]
pub enum TestProtocolRequest {
	StrictXUnionHenceResponseMayBeStackAllocated {
		responder: TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder,},
	FlexibleXUnionHenceResponseMustBeHeapAllocated {
		responder: TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder,},
}

impl TestProtocolRequest {
	#[allow(irrefutable_let_patterns)]
	pub fn into_strict_x_union_hence_response_may_be_stack_allocated(self) -> Option<(TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder
	)> {
		if let TestProtocolRequest::StrictXUnionHenceResponseMayBeStackAllocated {responder,
		} = self {
			Some((responder))
		} else {
			None
		}
	}
	
	#[allow(irrefutable_let_patterns)]
	pub fn into_flexible_x_union_hence_response_must_be_heap_allocated(self) -> Option<(TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder
	)> {
		if let TestProtocolRequest::FlexibleXUnionHenceResponseMustBeHeapAllocated {responder,
		} = self {
			Some((responder))
		} else {
			None
		}
	}
	

        /// Name of the method defined in FIDL
        pub fn method_name(&self) -> &'static str {
          match *self {
                TestProtocolRequest::StrictXUnionHenceResponseMayBeStackAllocated{..} => "strict_x_union_hence_response_may_be_stack_allocated",
                TestProtocolRequest::FlexibleXUnionHenceResponseMustBeHeapAllocated{..} => "flexible_x_union_hence_response_must_be_heap_allocated",
          }
        }
}

pub struct TestProtocolEncoder;
impl TestProtocolEncoder {
	pub fn encode_strict_x_union_hence_response_may_be_stack_allocated_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,
		tx_id: u32,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id,ordinal: 0x71a1b4b700000000,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_strict_x_union_hence_response_may_be_stack_allocated_response<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,
		tx_id: u32,mut in_xu: &mut StrictBoundedXUnion,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id,ordinal: 0x71a1b4b700000000,
		};
		let mut body = (in_xu,);
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_flexible_x_union_hence_response_must_be_heap_allocated_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,
		tx_id: u32,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id,ordinal: 0x3959ff0900000000,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_flexible_x_union_hence_response_must_be_heap_allocated_response<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,
		tx_id: u32,mut in_xu: &mut OlderSimpleUnion,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id,ordinal: 0x3959ff0900000000,
		};
		let mut body = (in_xu,);
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}}

#[derive(Debug, Clone)]
pub struct TestProtocolControlHandle {
	inner: ::std::sync::Arc<fidl::ServeInner>,
}

impl ::std::ops::Deref for TestProtocolControlHandle {
	type Target = ::std::sync::Arc<fidl::ServeInner>;

	fn deref(&self) -> &Self::Target {
		&self.inner
	}
}

impl TestProtocolControlHandle {
	pub fn shutdown(&self) {
		self.inner.shutdown()
	}}

/* beginning of response types */
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder {
	control_handle: ::std::mem::ManuallyDrop<TestProtocolControlHandle>,
	tx_id: u32,
	ordinal: u64,
}

impl ::std::ops::Drop for TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder {
	fn drop(&mut self) {
		// Shutdown the channel if the responder is dropped without sending a response
		// so that the client doesn't hang. To prevent this behavior, some methods
		// call "drop_without_shutdown"
		self.control_handle.shutdown();
		// Safety: drops once, never accessed again
		unsafe { ::std::mem::ManuallyDrop::drop(&mut self.control_handle) };
	}
}

impl TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponder {
	pub fn control_handle(&self) -> &TestProtocolControlHandle {
		&self.control_handle
	}

	/// Drop the Responder without setting the channel to shutdown.
	///
	/// This method shouldn't normally be used-- instead, send a response
	/// to prevent the channel from shutting down.
	pub fn drop_without_shutdown(mut self) {
		// Safety: drops once, never accessed again due to mem::forget
		unsafe { ::std::mem::ManuallyDrop::drop(&mut self.control_handle) };
		// Prevent Drop from running (which would shut down the channel)
		::std::mem::forget(self);
	}

	/// Sends a response to the FIDL transaction.
	///
	/// Sets the channel to shutdown if an error occurs.
	pub fn send(self,mut xu: &mut StrictBoundedXUnion,) -> Result<(), fidl::Error> {
		let r = self.send_raw(xu,);
		if r.is_err() {
			self.control_handle.shutdown();
		}
		self.drop_without_shutdown();
		r
	}

	/// Similar to "send" but does not shutdown the channel if
	/// an error occurs.
	pub fn send_no_shutdown_on_err(self,mut xu: &mut StrictBoundedXUnion,) -> Result<(), fidl::Error> {
		let r = self.send_raw(xu,);
		self.drop_without_shutdown();
		r
	}

	fn send_raw(&self,mut xu: &mut StrictBoundedXUnion,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id: self.tx_id,
			ordinal: self.ordinal,
		};

		let mut response = (xu);

		let mut msg = fidl::encoding::TransactionMessage {
			header,
			body: &mut response,
		};

		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			::fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
			self.control_handle.inner.channel().write(&*bytes, &mut *handles)
				.map_err(fidl::Error::ServerResponseWrite)?;
			Ok(())
		})
	}
}
#[must_use = "FIDL methods require a response to be sent"]
#[derive(Debug)]
pub struct TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder {
	control_handle: ::std::mem::ManuallyDrop<TestProtocolControlHandle>,
	tx_id: u32,
	ordinal: u64,
}

impl ::std::ops::Drop for TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder {
	fn drop(&mut self) {
		// Shutdown the channel if the responder is dropped without sending a response
		// so that the client doesn't hang. To prevent this behavior, some methods
		// call "drop_without_shutdown"
		self.control_handle.shutdown();
		// Safety: drops once, never accessed again
		unsafe { ::std::mem::ManuallyDrop::drop(&mut self.control_handle) };
	}
}

impl TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponder {
	pub fn control_handle(&self) -> &TestProtocolControlHandle {
		&self.control_handle
	}

	/// Drop the Responder without setting the channel to shutdown.
	///
	/// This method shouldn't normally be used-- instead, send a response
	/// to prevent the channel from shutting down.
	pub fn drop_without_shutdown(mut self) {
		// Safety: drops once, never accessed again due to mem::forget
		unsafe { ::std::mem::ManuallyDrop::drop(&mut self.control_handle) };
		// Prevent Drop from running (which would shut down the channel)
		::std::mem::forget(self);
	}

	/// Sends a response to the FIDL transaction.
	///
	/// Sets the channel to shutdown if an error occurs.
	pub fn send(self,mut xu: &mut OlderSimpleUnion,) -> Result<(), fidl::Error> {
		let r = self.send_raw(xu,);
		if r.is_err() {
			self.control_handle.shutdown();
		}
		self.drop_without_shutdown();
		r
	}

	/// Similar to "send" but does not shutdown the channel if
	/// an error occurs.
	pub fn send_no_shutdown_on_err(self,mut xu: &mut OlderSimpleUnion,) -> Result<(), fidl::Error> {
		let r = self.send_raw(xu,);
		self.drop_without_shutdown();
		r
	}

	fn send_raw(&self,mut xu: &mut OlderSimpleUnion,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id: self.tx_id,
			ordinal: self.ordinal,
		};

		let mut response = (xu);

		let mut msg = fidl::encoding::TransactionMessage {
			header,
			body: &mut response,
		};

		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			::fidl::encoding::Encoder::encode(bytes, handles, &mut msg)?;
			self.control_handle.inner.channel().write(&*bytes, &mut *handles)
				.map_err(fidl::Error::ServerResponseWrite)?;
			Ok(())
		})
	}
}
