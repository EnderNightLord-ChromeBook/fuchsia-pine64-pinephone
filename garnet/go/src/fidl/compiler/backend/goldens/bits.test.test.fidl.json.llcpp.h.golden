// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

class MyBits final {
public:
  constexpr MyBits() : value_(0u) {}
  explicit constexpr MyBits(uint32_t value) : value_(value) {}
  const static MyBits MY_FIRST_BIT;
  const static MyBits MY_OTHER_BIT;
  const static MyBits mask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  constexpr inline operator bool() const { return value_; }
  constexpr inline MyBits operator~() const;
  constexpr inline MyBits operator|(const MyBits& other) const;
  constexpr inline MyBits operator&(const MyBits& other) const;
  constexpr inline MyBits operator^(const MyBits& other) const;
  constexpr inline void operator|=(const MyBits& other);
  constexpr inline void operator&=(const MyBits& other);
  constexpr inline void operator^=(const MyBits& other);

private:
  uint32_t value_;
};
constexpr const ::llcpp::test::name::MyBits MyBits::MY_FIRST_BIT = ::llcpp::test::name::MyBits(1u);
constexpr const ::llcpp::test::name::MyBits MyBits::MY_OTHER_BIT = ::llcpp::test::name::MyBits(2u);
constexpr const ::llcpp::test::name::MyBits MyBits::mask = ::llcpp::test::name::MyBits(3u);

constexpr inline ::llcpp::test::name::MyBits MyBits::operator~() const {
  return ::llcpp::test::name::MyBits(static_cast<uint32_t>(~this->value_ & mask.value_));
}

constexpr inline ::llcpp::test::name::MyBits MyBits::operator|(
    const ::llcpp::test::name::MyBits& other) const {
  return ::llcpp::test::name::MyBits(static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::llcpp::test::name::MyBits MyBits::operator&(
    const ::llcpp::test::name::MyBits& other) const {
  return ::llcpp::test::name::MyBits(static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::llcpp::test::name::MyBits MyBits::operator^(
    const ::llcpp::test::name::MyBits& other) const {
  return ::llcpp::test::name::MyBits(static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void MyBits::operator|=(
    const ::llcpp::test::name::MyBits& other) {
  this->value_ |= other.value_;
}

constexpr inline void MyBits::operator&=(
    const ::llcpp::test::name::MyBits& other) {
  this->value_ &= other.value_;
}

constexpr inline void MyBits::operator^=(
    const ::llcpp::test::name::MyBits& other) {
  this->value_ ^= other.value_;
}


}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::MyBits> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::MyBits>);
static_assert(sizeof(::llcpp::test::name::MyBits) == sizeof(uint32_t));

}  // namespace fidl
