// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/bti.h>
#include <lib/zx/channel.h>
#include <lib/zx/debuglog.h>
#include <lib/zx/event.h>
#include <lib/zx/eventpair.h>
#include <lib/zx/exception.h>
#include <lib/zx/fifo.h>
#include <lib/zx/guest.h>
#include <lib/zx/handle.h>
#include <lib/zx/interrupt.h>
#include <lib/zx/iommu.h>
#include <lib/zx/job.h>
#include <lib/zx/pager.h>
#include <lib/zx/pcidevice.h>
#include <lib/zx/pmt.h>
#include <lib/zx/port.h>
#include <lib/zx/process.h>
#include <lib/zx/profile.h>
#include <lib/zx/resource.h>
#include <lib/zx/socket.h>
#include <lib/zx/suspendtoken.h>
#include <lib/zx/thread.h>
#include <lib/zx/timer.h>
#include <lib/zx/vcpu.h>
#include <lib/zx/vmar.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct Handles;

extern "C" const fidl_type_t test_name_HandlesTable;

struct Handles {
  static constexpr const fidl_type_t* Type = &test_name_HandlesTable;
  static constexpr uint32_t MaxNumHandles = 26;
  static constexpr uint32_t PrimarySize = 104;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::zx::handle plain_handle = {};

  ::zx::bti bti_handle = {};

  ::zx::channel channel_handle = {};

  ::zx::debuglog debuglog_handle = {};

  ::zx::event event_handle = {};

  ::zx::eventpair eventpair_handle = {};

  ::zx::exception exception_handle = {};

  ::zx::fifo fifo_handle = {};

  ::zx::guest guest_handle = {};

  ::zx::interrupt interrupt_handle = {};

  ::zx::iommu iommu_handle = {};

  ::zx::job job_handle = {};

  ::zx::pager pager_handle = {};

  ::zx::pcidevice pcidevice_handle = {};

  ::zx::pmt pmt_handle = {};

  ::zx::port port_handle = {};

  ::zx::process process_handle = {};

  ::zx::profile profile_handle = {};

  ::zx::resource resource_handle = {};

  ::zx::socket socket_handle = {};

  ::zx::suspendtoken suspendtoken_handle = {};

  ::zx::thread thread_handle = {};

  ::zx::timer timer_handle = {};

  ::zx::vcpu vcpu_handle = {};

  ::zx::vmar vmar_handle = {};

  ::zx::vmo vmo_handle = {};
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Handles> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Handles>);
static_assert(offsetof(::llcpp::test::name::Handles, plain_handle) == 0);
static_assert(offsetof(::llcpp::test::name::Handles, bti_handle) == 4);
static_assert(offsetof(::llcpp::test::name::Handles, channel_handle) == 8);
static_assert(offsetof(::llcpp::test::name::Handles, debuglog_handle) == 12);
static_assert(offsetof(::llcpp::test::name::Handles, event_handle) == 16);
static_assert(offsetof(::llcpp::test::name::Handles, eventpair_handle) == 20);
static_assert(offsetof(::llcpp::test::name::Handles, exception_handle) == 24);
static_assert(offsetof(::llcpp::test::name::Handles, fifo_handle) == 28);
static_assert(offsetof(::llcpp::test::name::Handles, guest_handle) == 32);
static_assert(offsetof(::llcpp::test::name::Handles, interrupt_handle) == 36);
static_assert(offsetof(::llcpp::test::name::Handles, iommu_handle) == 40);
static_assert(offsetof(::llcpp::test::name::Handles, job_handle) == 44);
static_assert(offsetof(::llcpp::test::name::Handles, pager_handle) == 48);
static_assert(offsetof(::llcpp::test::name::Handles, pcidevice_handle) == 52);
static_assert(offsetof(::llcpp::test::name::Handles, pmt_handle) == 56);
static_assert(offsetof(::llcpp::test::name::Handles, port_handle) == 60);
static_assert(offsetof(::llcpp::test::name::Handles, process_handle) == 64);
static_assert(offsetof(::llcpp::test::name::Handles, profile_handle) == 68);
static_assert(offsetof(::llcpp::test::name::Handles, resource_handle) == 72);
static_assert(offsetof(::llcpp::test::name::Handles, socket_handle) == 76);
static_assert(offsetof(::llcpp::test::name::Handles, suspendtoken_handle) == 80);
static_assert(offsetof(::llcpp::test::name::Handles, thread_handle) == 84);
static_assert(offsetof(::llcpp::test::name::Handles, timer_handle) == 88);
static_assert(offsetof(::llcpp::test::name::Handles, vcpu_handle) == 92);
static_assert(offsetof(::llcpp::test::name::Handles, vmar_handle) == 96);
static_assert(offsetof(::llcpp::test::name::Handles, vmo_handle) == 100);
static_assert(sizeof(::llcpp::test::name::Handles) == ::llcpp::test::name::Handles::PrimarySize);

}  // namespace fidl
