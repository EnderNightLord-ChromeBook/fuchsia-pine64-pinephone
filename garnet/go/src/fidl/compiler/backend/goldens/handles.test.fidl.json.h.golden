// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Handles;

class Handles  {
 public:
  static const fidl_type_t* FidlType;
  
  ::zx::handle plain_handle{};
  
  ::zx::bti bti_handle{};
  
  ::zx::channel channel_handle{};
  
  ::zx::debuglog debuglog_handle{};
  
  ::zx::event event_handle{};
  
  ::zx::eventpair eventpair_handle{};
  
  ::zx::exception exception_handle{};
  
  ::zx::fifo fifo_handle{};
  
  ::zx::guest guest_handle{};
  
  ::zx::interrupt interrupt_handle{};
  
  ::zx::job job_handle{};
  
  ::zx::process process_handle{};
  
  ::zx::profile profile_handle{};
  
  ::zx::port port_handle{};
  
  ::zx::resource resource_handle{};
  
  ::zx::socket socket_handle{};
  
  ::zx::thread thread_handle{};
  
  ::zx::timer timer_handle{};
  
  ::zx::vmar vmar_handle{};
  
  ::zx::vmo vmo_handle{};

  static inline ::std::unique_ptr<Handles> New() { return ::std::make_unique<Handles>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Handles* value, size_t _offset);
  zx_status_t Clone(Handles* result) const;
};

inline zx_status_t Clone(const ::test::name::Handles& _value,
                         ::test::name::Handles* _result) {
  return _value.Clone(_result);
}

using HandlesPtr = ::std::unique_ptr<Handles>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::Handles>
    : public EncodableCodingTraits<::test::name::Handles, 80> {};

inline zx_status_t Clone(const ::test::name::Handles& value,
                         ::test::name::Handles* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Handles> {
  static inline bool Equals(const ::test::name::Handles& _lhs, const ::test::name::Handles& _rhs) {
    if (!::fidl::Equals(_lhs.plain_handle, _rhs.plain_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.bti_handle, _rhs.bti_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.channel_handle, _rhs.channel_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.debuglog_handle, _rhs.debuglog_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.event_handle, _rhs.event_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.eventpair_handle, _rhs.eventpair_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.exception_handle, _rhs.exception_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.fifo_handle, _rhs.fifo_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.guest_handle, _rhs.guest_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.interrupt_handle, _rhs.interrupt_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.job_handle, _rhs.job_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.process_handle, _rhs.process_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.profile_handle, _rhs.profile_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.port_handle, _rhs.port_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.resource_handle, _rhs.resource_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.socket_handle, _rhs.socket_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.thread_handle, _rhs.thread_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.timer_handle, _rhs.timer_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vmar_handle, _rhs.vmar_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vmo_handle, _rhs.vmo_handle)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
