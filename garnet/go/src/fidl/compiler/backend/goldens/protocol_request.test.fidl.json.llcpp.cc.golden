// WARNING: This file is machine generated by fidlgen.

#include <protocol_request.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint64_t kParent_GetChild_Ordinal = 915586153lu << 32;
extern "C" const fidl_type_t test_name_ParentGetChildResponseTable;
[[maybe_unused]]
constexpr uint64_t kParent_GetChildRequest_Ordinal = 1068158078lu << 32;
extern "C" const fidl_type_t test_name_ParentGetChildRequestResponseTable;
[[maybe_unused]]
constexpr uint64_t kParent_TakeChild_Ordinal = 1275478777lu << 32;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestTable;
[[maybe_unused]]
constexpr uint64_t kParent_TakeChildRequest_Ordinal = 1589872250lu << 32;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestRequestTable;

}  // namespace

zx_status_t Parent::SyncClient::GetChild(::zx::channel* out_c) {
  return Parent::Call::GetChild(zx::unowned_channel(this->channel_), out_c);
}

zx_status_t Parent::Call::GetChild(zx::unowned_channel _client_end, ::zx::channel* out_c) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChildRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetChildRequest*>(_write_bytes);
  _request._hdr.ordinal = kParent_GetChild_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChildRequest));
  ::fidl::DecodedMessage<GetChildRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetChildResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetChildRequest, GetChildResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_c = std::move(_response.c);
  return ZX_OK;
}

::fidl::DecodeResult<Parent::GetChildResponse> Parent::SyncClient::GetChild(::fidl::BytePart _response_buffer, ::zx::channel* out_c) {
  return Parent::Call::GetChild(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_c);
}

::fidl::DecodeResult<Parent::GetChildResponse> Parent::Call::GetChild(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::channel* out_c) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetChildRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetChildRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kParent_GetChild_Ordinal;
  _request_buffer.set_actual(sizeof(GetChildRequest));
  ::fidl::DecodedMessage<GetChildRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetChildResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetChildRequest, GetChildResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetChildResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_c = std::move(_response.c);
  return _decode_result;
}

::fidl::DecodeResult<Parent::GetChildResponse> Parent::SyncClient::GetChild(::fidl::BytePart response_buffer) {
  return Parent::Call::GetChild(zx::unowned_channel(this->channel_), std::move(response_buffer));
}

::fidl::DecodeResult<Parent::GetChildResponse> Parent::Call::GetChild(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetChildRequest)] = {};
  constexpr uint32_t _write_num_bytes = sizeof(GetChildRequest);
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes), _write_num_bytes);
  ::fidl::DecodedMessage<GetChildRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_GetChild_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Parent::GetChildResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<Parent::GetChildResponse>());
  }
  auto _call_result = ::fidl::Call<GetChildRequest, GetChildResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Parent::GetChildResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<Parent::GetChildResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


zx_status_t Parent::SyncClient::GetChildRequest(::zx::channel* out_r) {
  return Parent::Call::GetChildRequest(zx::unowned_channel(this->channel_), out_r);
}

zx_status_t Parent::Call::GetChildRequest(zx::unowned_channel _client_end, ::zx::channel* out_r) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChildRequestRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetChildRequestRequest*>(_write_bytes);
  _request._hdr.ordinal = kParent_GetChildRequest_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChildRequestRequest));
  ::fidl::DecodedMessage<GetChildRequestRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetChildRequestResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetChildRequestRequest, GetChildRequestResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_r = std::move(_response.r);
  return ZX_OK;
}

::fidl::DecodeResult<Parent::GetChildRequestResponse> Parent::SyncClient::GetChildRequest(::fidl::BytePart _response_buffer, ::zx::channel* out_r) {
  return Parent::Call::GetChildRequest(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_r);
}

::fidl::DecodeResult<Parent::GetChildRequestResponse> Parent::Call::GetChildRequest(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::zx::channel* out_r) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetChildRequestRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetChildRequestRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kParent_GetChildRequest_Ordinal;
  _request_buffer.set_actual(sizeof(GetChildRequestRequest));
  ::fidl::DecodedMessage<GetChildRequestRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetChildRequestResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetChildRequestRequest, GetChildRequestResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetChildRequestResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_r = std::move(_response.r);
  return _decode_result;
}

::fidl::DecodeResult<Parent::GetChildRequestResponse> Parent::SyncClient::GetChildRequest(::fidl::BytePart response_buffer) {
  return Parent::Call::GetChildRequest(zx::unowned_channel(this->channel_), std::move(response_buffer));
}

::fidl::DecodeResult<Parent::GetChildRequestResponse> Parent::Call::GetChildRequest(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetChildRequestRequest)] = {};
  constexpr uint32_t _write_num_bytes = sizeof(GetChildRequestRequest);
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes), _write_num_bytes);
  ::fidl::DecodedMessage<GetChildRequestRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_GetChildRequest_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Parent::GetChildRequestResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<Parent::GetChildRequestResponse>());
  }
  auto _call_result = ::fidl::Call<GetChildRequestRequest, GetChildRequestResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Parent::GetChildRequestResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<Parent::GetChildRequestResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


zx_status_t Parent::SyncClient::TakeChild(::zx::channel c) {
  return Parent::Call::TakeChild(zx::unowned_channel(this->channel_), std::move(c));
}

zx_status_t Parent::Call::TakeChild(zx::unowned_channel _client_end, ::zx::channel c) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<TakeChildRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<TakeChildRequest*>(_write_bytes);
  _request._hdr.ordinal = kParent_TakeChild_Ordinal;
  _request.c = std::move(c);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(TakeChildRequest));
  ::fidl::DecodedMessage<TakeChildRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Parent::SyncClient::TakeChild(::fidl::BytePart _request_buffer, ::zx::channel c) {
  return Parent::Call::TakeChild(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(c));
}

zx_status_t Parent::Call::TakeChild(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel c) {
  if (_request_buffer.capacity() < TakeChildRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<TakeChildRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kParent_TakeChild_Ordinal;
  _request.c = std::move(c);
  _request_buffer.set_actual(sizeof(TakeChildRequest));
  ::fidl::DecodedMessage<TakeChildRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Parent::SyncClient::TakeChild(::fidl::DecodedMessage<TakeChildRequest> params) {
  return Parent::Call::TakeChild(zx::unowned_channel(this->channel_), std::move(params));
}

zx_status_t Parent::Call::TakeChild(zx::unowned_channel _client_end, ::fidl::DecodedMessage<TakeChildRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_TakeChild_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}


zx_status_t Parent::SyncClient::TakeChildRequest(::zx::channel r) {
  return Parent::Call::TakeChildRequest(zx::unowned_channel(this->channel_), std::move(r));
}

zx_status_t Parent::Call::TakeChildRequest(zx::unowned_channel _client_end, ::zx::channel r) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<TakeChildRequestRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<TakeChildRequestRequest*>(_write_bytes);
  _request._hdr.ordinal = kParent_TakeChildRequest_Ordinal;
  _request.r = std::move(r);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(TakeChildRequestRequest));
  ::fidl::DecodedMessage<TakeChildRequestRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Parent::SyncClient::TakeChildRequest(::fidl::BytePart _request_buffer, ::zx::channel r) {
  return Parent::Call::TakeChildRequest(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(r));
}

zx_status_t Parent::Call::TakeChildRequest(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel r) {
  if (_request_buffer.capacity() < TakeChildRequestRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<TakeChildRequestRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kParent_TakeChildRequest_Ordinal;
  _request.r = std::move(r);
  _request_buffer.set_actual(sizeof(TakeChildRequestRequest));
  ::fidl::DecodedMessage<TakeChildRequestRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Parent::SyncClient::TakeChildRequest(::fidl::DecodedMessage<TakeChildRequestRequest> params) {
  return Parent::Call::TakeChildRequest(zx::unowned_channel(this->channel_), std::move(params));
}

zx_status_t Parent::Call::TakeChildRequest(zx::unowned_channel _client_end, ::fidl::DecodedMessage<TakeChildRequestRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_TakeChildRequest_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}


bool Parent::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kParent_GetChild_Ordinal: {
      auto result = ::fidl::DecodeAs<GetChildRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetChild(
        Interface::GetChildCompleter::Sync(txn));
      return true;
    }
    case kParent_GetChildRequest_Ordinal: {
      auto result = ::fidl::DecodeAs<GetChildRequestRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetChildRequest(
        Interface::GetChildRequestCompleter::Sync(txn));
      return true;
    }
    case kParent_TakeChild_Ordinal: {
      auto result = ::fidl::DecodeAs<TakeChildRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->TakeChild(std::move(message->c),
        Interface::TakeChildCompleter::Sync(txn));
      return true;
    }
    case kParent_TakeChildRequest_Ordinal: {
      auto result = ::fidl::DecodeAs<TakeChildRequestRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->TakeChildRequest(std::move(message->r),
        Interface::TakeChildRequestCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Parent::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Parent::Interface::GetChildCompleterBase::Reply(::zx::channel c) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChildResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetChildResponse*>(_write_bytes);
  _response._hdr.ordinal = kParent_GetChild_Ordinal;
  _response.c = std::move(c);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChildResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetChildResponse>(std::move(_response_bytes)));
}

void Parent::Interface::GetChildCompleterBase::Reply(::fidl::BytePart _buffer, ::zx::channel c) {
  if (_buffer.capacity() < GetChildResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetChildResponse*>(_buffer.data());
  _response._hdr.ordinal = kParent_GetChild_Ordinal;
  _response.c = std::move(c);
  _buffer.set_actual(sizeof(GetChildResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetChildResponse>(std::move(_buffer)));
}

void Parent::Interface::GetChildCompleterBase::Reply(::fidl::DecodedMessage<GetChildResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_GetChild_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void Parent::Interface::GetChildRequestCompleterBase::Reply(::zx::channel r) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetChildRequestResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetChildRequestResponse*>(_write_bytes);
  _response._hdr.ordinal = kParent_GetChildRequest_Ordinal;
  _response.r = std::move(r);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetChildRequestResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetChildRequestResponse>(std::move(_response_bytes)));
}

void Parent::Interface::GetChildRequestCompleterBase::Reply(::fidl::BytePart _buffer, ::zx::channel r) {
  if (_buffer.capacity() < GetChildRequestResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetChildRequestResponse*>(_buffer.data());
  _response._hdr.ordinal = kParent_GetChildRequest_Ordinal;
  _response.r = std::move(r);
  _buffer.set_actual(sizeof(GetChildRequestResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetChildRequestResponse>(std::move(_buffer)));
}

void Parent::Interface::GetChildRequestCompleterBase::Reply(::fidl::DecodedMessage<GetChildRequestResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kParent_GetChildRequest_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {


}  // namespace

}  // namespace name
}  // namespace test
}  // namespace llcpp
