// WARNING: This file is machine generated by fidlgen.

#include <protocol_request.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace name {

#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t test_name_ParentGetChildRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildResponseTable;

extern "C" const fidl_type_t test_name_ParentGetChildRequestRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildRequestResponseTable;

extern "C" const fidl_type_t test_name_ParentTakeChildRequestTable;

extern "C" const fidl_type_t test_name_ParentTakeChildRequestRequestTable;

}  // namespace

Parent::~Parent() = default;

const fidl_type_t* Parent_RequestDecoder::GetType(uint64_t ordinal, bool* out_needs_response) {
  switch (ordinal) {
    case internal::kParent_GetChild_GenOrdinal:
      *out_needs_response = true;
      return &test_name_ParentGetChildRequestTable;
    case internal::kParent_GetChildRequest_GenOrdinal:
      *out_needs_response = true;
      return &test_name_ParentGetChildRequestRequestTable;
    case internal::kParent_TakeChild_GenOrdinal:
      *out_needs_response = false;
      return &test_name_ParentTakeChildRequestTable;
    case internal::kParent_TakeChildRequest_GenOrdinal:
      *out_needs_response = false;
      return &test_name_ParentTakeChildRequestRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* Parent_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::kParent_GetChild_GenOrdinal:
      return &test_name_ParentGetChildResponseTable;
    case internal::kParent_GetChildRequest_GenOrdinal:
      return &test_name_ParentGetChildRequestResponseTable;
    default:
      return nullptr;
  }
}

Parent_EventSender::~Parent_EventSender() = default;

Parent_Sync::~Parent_Sync() = default;

Parent_Proxy::Parent_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

Parent_Proxy::~Parent_Proxy() = default;

zx_status_t Parent_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


namespace {

class Parent_GetChild_ResponseHandler final : public ::fidl::internal::MessageHandler {
 public:
  Parent_GetChild_ResponseHandler(Parent::GetChildCallback callback)
      : callback_(std::move(callback)) {
    ZX_DEBUG_ASSERT_MSG(callback_,
                        "Callback must not be empty for Parent::GetChild\n");
  }

  zx_status_t OnMessage(::fidl::Message message) override {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_ParentGetChildResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_ParentGetChildResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<::fidl::InterfaceHandle<class Child>>(&decoder, 16);
    callback_(std::move(arg0));
    return ZX_OK;
  }

 private:
  Parent::GetChildCallback callback_;

  Parent_GetChild_ResponseHandler(const Parent_GetChild_ResponseHandler&) = delete;
  Parent_GetChild_ResponseHandler& operator=(const Parent_GetChild_ResponseHandler&) = delete;
};

}  // namespace
void Parent_Proxy::GetChild(GetChildCallback callback) {
  ::fidl::Encoder _encoder(internal::kParent_GetChild_GenOrdinal);
  controller_->Send(&test_name_ParentGetChildRequestTable, Parent_RequestEncoder::GetChild(&_encoder), std::make_unique<Parent_GetChild_ResponseHandler>(std::move(callback)));
}
namespace {

class Parent_GetChildRequest_ResponseHandler final : public ::fidl::internal::MessageHandler {
 public:
  Parent_GetChildRequest_ResponseHandler(Parent::GetChildRequestCallback callback)
      : callback_(std::move(callback)) {
    ZX_DEBUG_ASSERT_MSG(callback_,
                        "Callback must not be empty for Parent::GetChildRequest\n");
  }

  zx_status_t OnMessage(::fidl::Message message) override {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(&test_name_ParentGetChildRequestResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &test_name_ParentGetChildRequestResponseTable, error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<::fidl::InterfaceRequest<Child>>(&decoder, 16);
    callback_(std::move(arg0));
    return ZX_OK;
  }

 private:
  Parent::GetChildRequestCallback callback_;

  Parent_GetChildRequest_ResponseHandler(const Parent_GetChildRequest_ResponseHandler&) = delete;
  Parent_GetChildRequest_ResponseHandler& operator=(const Parent_GetChildRequest_ResponseHandler&) = delete;
};

}  // namespace
void Parent_Proxy::GetChildRequest(GetChildRequestCallback callback) {
  ::fidl::Encoder _encoder(internal::kParent_GetChildRequest_GenOrdinal);
  controller_->Send(&test_name_ParentGetChildRequestRequestTable, Parent_RequestEncoder::GetChildRequest(&_encoder), std::make_unique<Parent_GetChildRequest_ResponseHandler>(std::move(callback)));
}
void Parent_Proxy::TakeChild(::fidl::InterfaceHandle<class Child> c) {
  ::fidl::Encoder _encoder(internal::kParent_TakeChild_GenOrdinal);
  controller_->Send(&test_name_ParentTakeChildRequestTable, Parent_RequestEncoder::TakeChild(&_encoder, &c), nullptr);
}
void Parent_Proxy::TakeChildRequest(::fidl::InterfaceRequest<Child> r) {
  ::fidl::Encoder _encoder(internal::kParent_TakeChildRequest_GenOrdinal);
  controller_->Send(&test_name_ParentTakeChildRequestRequestTable, Parent_RequestEncoder::TakeChildRequest(&_encoder, &r), nullptr);
}

Parent_Stub::Parent_Stub(Parent_clazz* impl) : impl_(impl) {
  (void)impl_;
}

Parent_Stub::~Parent_Stub() = default;

namespace {

class Parent_GetChild_Responder final {
 public:
  Parent_GetChild_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(::fidl::InterfaceHandle<class Child> c) {
    ::fidl::Encoder _encoder(internal::kParent_GetChild_GenOrdinal);
    response_.Send(&test_name_ParentGetChildResponseTable, Parent_ResponseEncoder::GetChild(&_encoder, &c));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

class Parent_GetChildRequest_Responder final {
 public:
  Parent_GetChildRequest_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(::fidl::InterfaceRequest<Child> r) {
    ::fidl::Encoder _encoder(internal::kParent_GetChildRequest_GenOrdinal);
    response_.Send(&test_name_ParentGetChildRequestResponseTable, Parent_ResponseEncoder::GetChildRequest(&_encoder, &r));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t Parent_Stub::Dispatch_(
    ::fidl::Message message,
    ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type = Parent_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::kParent_GetChild_GenOrdinal:
    {
      impl_->GetChild(Parent_GetChild_Responder(std::move(response)));
      break;
    }
    case internal::kParent_GetChildRequest_GenOrdinal:
    {
      impl_->GetChildRequest(Parent_GetChildRequest_Responder(std::move(response)));
      break;
    }
    case internal::kParent_TakeChild_GenOrdinal:
    {
      ::fidl::Decoder decoder(std::move(message));
      auto arg0 = ::fidl::DecodeAs<::fidl::InterfaceHandle<class Child>>(&decoder, 16);
      impl_->TakeChild(std::move(arg0));
      break;
    }
    case internal::kParent_TakeChildRequest_GenOrdinal:
    {
      ::fidl::Decoder decoder(std::move(message));
      auto arg0 = ::fidl::DecodeAs<::fidl::InterfaceRequest<Child>>(&decoder, 16);
      impl_->TakeChildRequest(std::move(arg0));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

Parent_SyncProxy::Parent_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

Parent_SyncProxy::~Parent_SyncProxy() = default;

zx_status_t Parent_SyncProxy::GetChild(::fidl::InterfaceHandle<class Child>* out_c) {
  ::fidl::Encoder _encoder(internal::kParent_GetChild_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ = proxy_.Call(&test_name_ParentGetChildRequestTable, &test_name_ParentGetChildResponseTable, Parent_RequestEncoder::GetChild(&_encoder), &response_);
  if (status_ != ZX_OK)
    return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_c = ::fidl::DecodeAs<::fidl::InterfaceHandle<class Child>>(&decoder_, 16);
  return ZX_OK;
}

zx_status_t Parent_SyncProxy::GetChildRequest(::fidl::InterfaceRequest<Child>* out_r) {
  ::fidl::Encoder _encoder(internal::kParent_GetChildRequest_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ = proxy_.Call(&test_name_ParentGetChildRequestRequestTable, &test_name_ParentGetChildRequestResponseTable, Parent_RequestEncoder::GetChildRequest(&_encoder), &response_);
  if (status_ != ZX_OK)
    return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_r = ::fidl::DecodeAs<::fidl::InterfaceRequest<Child>>(&decoder_, 16);
  return ZX_OK;
}

zx_status_t Parent_SyncProxy::TakeChild(::fidl::InterfaceHandle<class Child> c) {
  ::fidl::Encoder _encoder(internal::kParent_TakeChild_GenOrdinal);
  return proxy_.Send(&test_name_ParentTakeChildRequestTable, Parent_RequestEncoder::TakeChild(&_encoder, &c));
}

zx_status_t Parent_SyncProxy::TakeChildRequest(::fidl::InterfaceRequest<Child> r) {
  ::fidl::Encoder _encoder(internal::kParent_TakeChildRequest_GenOrdinal);
  return proxy_.Send(&test_name_ParentTakeChildRequestRequestTable, Parent_RequestEncoder::TakeChildRequest(&_encoder, &r));
}

#endif // __Fuchsia__

#ifdef __Fuchsia__
namespace {

}  // namespace

Child::~Child() = default;

const fidl_type_t* Child_RequestDecoder::GetType(uint64_t ordinal, bool* out_needs_response) {
  switch (ordinal) {
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* Child_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    default:
      return nullptr;
  }
}

Child_EventSender::~Child_EventSender() = default;

Child_Sync::~Child_Sync() = default;

Child_Proxy::Child_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

Child_Proxy::~Child_Proxy() = default;

zx_status_t Child_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}



Child_Stub::Child_Stub(Child_clazz* impl) : impl_(impl) {
  (void)impl_;
}

Child_Stub::~Child_Stub() = default;

namespace {

}  // namespace

zx_status_t Child_Stub::Dispatch_(
    ::fidl::Message message,
    ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type = Child_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

Child_SyncProxy::Child_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

Child_SyncProxy::~Child_SyncProxy() = default;

#endif // __Fuchsia__

}  // namespace name
}  // namespace test

